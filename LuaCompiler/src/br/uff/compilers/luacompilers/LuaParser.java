
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Dec 21 21:20:07 BRST 2016
//----------------------------------------------------

package br.uff.compilers.luacompilers;

import java_cup.runtime.*;
import java.io.FileReader;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Dec 21 21:20:07 BRST 2016
  */
public class LuaParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public LuaParser() {super();}

  /** Constructor which sets the default scanner. */
  public LuaParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public LuaParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\156\000\002\002\004\000\002\055\003\000\002\002" +
    "\004\000\002\031\005\000\002\031\002\000\002\032\004" +
    "\000\002\032\002\000\002\003\003\000\002\004\005\000" +
    "\002\004\003\000\002\004\005\000\002\004\007\000\002" +
    "\004\006\000\002\004\003\000\002\004\014\000\002\004" +
    "\011\000\002\004\005\000\002\004\006\000\002\004\005" +
    "\000\002\051\011\000\002\033\007\000\002\033\002\000" +
    "\002\034\004\000\002\034\002\000\002\036\004\000\002" +
    "\036\002\000\002\005\004\000\002\005\003\000\002\037" +
    "\003\000\002\037\002\000\002\006\005\000\002\040\005" +
    "\000\002\040\002\000\002\050\004\000\002\050\002\000" +
    "\002\007\004\000\002\010\003\000\002\010\004\000\002" +
    "\053\004\000\002\053\005\000\002\011\004\000\002\012" +
    "\004\000\002\015\004\000\002\052\005\000\002\052\003" +
    "\000\002\017\004\000\002\044\003\000\002\044\002\000" +
    "\002\021\004\000\002\021\003\000\002\022\005\000\002" +
    "\046\003\000\002\023\004\000\002\047\005\000\002\047" +
    "\002\000\002\024\007\000\002\024\005\000\002\024\003" +
    "\000\002\024\002\000\002\026\003\000\002\026\003\000" +
    "\002\026\003\000\002\026\003\000\002\026\003\000\002" +
    "\026\003\000\002\026\003\000\002\026\003\000\002\026" +
    "\003\000\002\026\003\000\002\026\003\000\002\026\003" +
    "\000\002\026\003\000\002\026\003\000\002\026\003\000" +
    "\002\027\003\000\002\027\003\000\002\027\003\000\002" +
    "\030\003\000\002\030\002\000\002\025\003\000\002\025" +
    "\003\000\002\045\004\000\002\045\002\000\002\043\005" +
    "\000\002\043\002\000\002\042\005\000\002\042\002\000" +
    "\002\041\005\000\002\041\002\000\002\035\004\000\002" +
    "\035\002\000\002\016\005\000\002\016\003\000\002\016" +
    "\003\000\002\013\005\000\002\013\004\000\002\013\003" +
    "\000\002\054\003\000\002\054\003\000\002\054\003\000" +
    "\002\054\003\000\002\054\003\000\002\054\003\000\002" +
    "\054\003\000\002\054\003\000\002\054\003\000\002\020" +
    "\007\000\002\014\003\000\002\014\003\000\002\014\005" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\274\000\032\002\ufffd\004\011\006\004\007\023\010" +
    "\010\014\021\017\007\020\005\021\ufffd\022\ufffd\036\013" +
    "\065\006\001\002\000\034\017\037\023\041\024\051\025" +
    "\040\026\044\034\032\036\013\042\047\061\034\062\046" +
    "\063\043\064\042\065\006\001\002\000\006\017\265\065" +
    "\127\001\002\000\130\002\uffdd\004\uffdd\005\uffdd\006\uffdd" +
    "\007\uffdd\010\uffdd\011\uffdd\012\uffdd\013\uffdd\014\uffdd\016" +
    "\uffdd\017\uffdd\020\uffdd\021\uffdd\022\uffdd\027\uffdd\030\uffdd" +
    "\031\uffdd\032\uffdd\033\uffdd\034\uffdd\035\uffdd\036\uffdd\037" +
    "\uffdd\040\uffdd\041\uffdd\042\uffdd\043\uffdd\044\uffdd\045\uffdd" +
    "\046\uffdd\047\uffdd\050\uffdd\051\uffdd\052\uffdd\053\uffdd\054" +
    "\uffdd\055\uffdd\056\uffdd\057\uffdd\060\uffdd\064\uffdd\065\uffdd" +
    "\001\002\000\004\065\253\001\002\000\034\017\037\023" +
    "\041\024\051\025\040\026\044\034\032\036\013\042\047" +
    "\061\034\062\046\063\043\064\042\065\006\001\002\000" +
    "\032\004\011\005\ufffd\006\004\007\023\010\010\014\021" +
    "\017\007\020\005\021\ufffd\022\ufffd\036\013\065\006\001" +
    "\002\000\126\002\uff95\004\uff95\005\uff95\006\uff95\007\uff95" +
    "\010\uff95\011\uff95\012\uff95\013\uff95\014\uff95\016\uff95\017" +
    "\uff95\020\uff95\021\uff95\022\uff95\027\uff95\030\uff95\031\uff95" +
    "\032\uff95\033\uff95\034\uff95\035\uff95\036\uff95\037\uff95\041" +
    "\uff95\042\uff95\043\uff95\044\uff95\045\uff95\046\uff95\047\uff95" +
    "\050\uff95\051\uff95\052\uff95\053\uff95\054\uff95\055\uff95\056" +
    "\uff95\057\uff95\060\uff95\064\uff95\065\uff95\001\002\000\034" +
    "\017\037\023\041\024\051\025\040\026\044\034\032\036" +
    "\013\042\047\061\034\062\046\063\043\064\042\065\006" +
    "\001\002\000\020\002\ufffb\005\ufffb\012\ufffb\013\ufffb\016" +
    "\ufffb\021\223\022\224\001\002\000\004\002\000\001\002" +
    "\000\056\002\ufff8\004\ufff8\005\ufff8\006\ufff8\007\ufff8\010" +
    "\ufff8\012\ufff8\013\ufff8\014\ufff8\016\ufff8\017\ufff8\020\ufff8" +
    "\021\ufff8\022\ufff8\027\055\030\ufff8\032\054\034\032\036" +
    "\056\050\060\064\057\065\ufff8\001\002\000\044\002\uffb3" +
    "\004\uffb3\005\uffb3\006\uffb3\007\uffb3\010\uffb3\012\uffb3\013" +
    "\uffb3\014\uffb3\016\uffb3\017\uffb3\020\uffb3\021\uffb3\022\uffb3" +
    "\030\221\036\uffb3\065\uffb3\001\002\000\062\002\uff96\004" +
    "\uff96\005\uff96\006\uff96\007\uff96\010\uff96\012\uff96\013\uff96" +
    "\014\uff96\016\uff96\017\uff96\020\uff96\021\uff96\022\uff96\027" +
    "\uff96\030\uff96\031\213\032\uff96\034\uff96\036\uff96\040\uffa9" +
    "\050\uff96\064\uff96\065\uff96\001\002\000\004\065\173\001" +
    "\002\000\004\040\170\001\002\000\032\004\011\006\004" +
    "\007\023\010\010\014\021\016\ufffd\017\007\020\005\021" +
    "\ufffd\022\ufffd\036\013\065\006\001\002\000\044\002\ufff4" +
    "\004\ufff4\005\ufff4\006\ufff4\007\ufff4\010\ufff4\012\ufff4\013" +
    "\ufff4\014\ufff4\016\ufff4\017\ufff4\020\ufff4\021\ufff4\022\ufff4" +
    "\030\ufff4\036\ufff4\065\ufff4\001\002\000\004\002\026\001" +
    "\002\000\004\002\001\001\002\000\004\016\031\001\002" +
    "\000\012\005\ufffa\012\ufffa\013\ufffa\016\ufffa\001\002\000" +
    "\034\017\037\023\041\024\051\025\040\026\044\034\032" +
    "\036\013\042\047\061\034\062\046\063\043\064\042\065" +
    "\006\001\002\000\044\017\037\023\041\024\051\025\040" +
    "\026\044\030\uffc7\031\uffc7\032\151\034\032\035\uffc7\036" +
    "\013\042\047\061\034\062\046\063\043\064\042\065\147" +
    "\001\002\000\114\002\uffa1\004\uffa1\005\uffa1\006\uffa1\007" +
    "\uffa1\010\uffa1\011\uffa1\012\uffa1\013\uffa1\014\uffa1\016\uffa1" +
    "\017\uffa1\020\uffa1\021\uffa1\022\uffa1\030\uffa1\031\uffa1\033" +
    "\uffa1\035\uffa1\036\uffa1\037\uffa1\041\uffa1\042\uffa1\043\uffa1" +
    "\044\uffa1\045\uffa1\046\uffa1\047\uffa1\051\uffa1\052\uffa1\053" +
    "\uffa1\054\uffa1\055\uffa1\056\uffa1\057\uffa1\060\uffa1\065\uffa1" +
    "\001\002\000\034\017\uffb6\023\uffb6\024\uffb6\025\uffb6\026" +
    "\uffb6\034\uffb6\036\uffb6\042\uffb6\061\uffb6\062\uffb6\063\uffb6" +
    "\064\uffb6\065\uffb6\001\002\000\114\002\uff9a\004\uff9a\005" +
    "\uff9a\006\uff9a\007\uff9a\010\uff9a\011\uff9a\012\uff9a\013\uff9a" +
    "\014\uff9a\016\uff9a\017\uff9a\020\uff9a\021\uff9a\022\uff9a\030" +
    "\uff9a\031\uff9a\033\uff9a\035\uff9a\036\uff9a\037\uff9a\041\uff9a" +
    "\042\uff9a\043\uff9a\044\uff9a\045\uff9a\046\uff9a\047\uff9a\051" +
    "\uff9a\052\uff9a\053\uff9a\054\uff9a\055\uff9a\056\uff9a\057\uff9a" +
    "\060\uff9a\065\uff9a\001\002\000\102\002\ufff5\004\ufff5\005" +
    "\ufff5\006\ufff5\007\ufff5\010\ufff5\012\ufff5\013\ufff5\014\ufff5" +
    "\016\ufff5\017\ufff5\020\ufff5\021\ufff5\022\ufff5\030\ufff5\036" +
    "\ufff5\041\075\042\110\043\071\044\106\045\104\046\074" +
    "\047\112\051\107\052\100\053\111\054\073\055\077\056" +
    "\102\057\072\060\076\065\ufff5\001\002\000\004\036\125" +
    "\001\002\000\114\002\uff9e\004\uff9e\005\uff9e\006\uff9e\007" +
    "\uff9e\010\uff9e\011\uff9e\012\uff9e\013\uff9e\014\uff9e\016\uff9e" +
    "\017\uff9e\020\uff9e\021\uff9e\022\uff9e\030\uff9e\031\uff9e\033" +
    "\uff9e\035\uff9e\036\uff9e\037\uff9e\041\uff9e\042\uff9e\043\uff9e" +
    "\044\uff9e\045\uff9e\046\uff9e\047\uff9e\051\uff9e\052\uff9e\053" +
    "\uff9e\054\uff9e\055\uff9e\056\uff9e\057\uff9e\060\uff9e\065\uff9e" +
    "\001\002\000\114\002\uffa0\004\uffa0\005\uffa0\006\uffa0\007" +
    "\uffa0\010\uffa0\011\uffa0\012\uffa0\013\uffa0\014\uffa0\016\uffa0" +
    "\017\uffa0\020\uffa0\021\uffa0\022\uffa0\030\uffa0\031\uffa0\033" +
    "\uffa0\035\uffa0\036\uffa0\037\uffa0\041\uffa0\042\uffa0\043\uffa0" +
    "\044\uffa0\045\uffa0\046\uffa0\047\uffa0\051\uffa0\052\uffa0\053" +
    "\uffa0\054\uffa0\055\uffa0\056\uffa0\057\uffa0\060\uffa0\065\uffa0" +
    "\001\002\000\114\002\uff9c\004\uff9c\005\uff9c\006\uff9c\007" +
    "\uff9c\010\uff9c\011\uff9c\012\uff9c\013\uff9c\014\uff9c\016\uff9c" +
    "\017\uff9c\020\uff9c\021\uff9c\022\uff9c\030\uff9c\031\uff9c\033" +
    "\uff9c\035\uff9c\036\uff9c\037\uff9c\041\uff9c\042\uff9c\043\uff9c" +
    "\044\uff9c\045\uff9c\046\uff9c\047\uff9c\051\uff9c\052\uff9c\053" +
    "\uff9c\054\uff9c\055\uff9c\056\uff9c\057\uff9c\060\uff9c\065\uff9c" +
    "\001\002\000\114\002\uff9d\004\uff9d\005\uff9d\006\uff9d\007" +
    "\uff9d\010\uff9d\011\uff9d\012\uff9d\013\uff9d\014\uff9d\016\uff9d" +
    "\017\uff9d\020\uff9d\021\uff9d\022\uff9d\030\uff9d\031\uff9d\033" +
    "\uff9d\035\uff9d\036\uff9d\037\uff9d\041\uff9d\042\uff9d\043\uff9d" +
    "\044\uff9d\045\uff9d\046\uff9d\047\uff9d\051\uff9d\052\uff9d\053" +
    "\uff9d\054\uff9d\055\uff9d\056\uff9d\057\uff9d\060\uff9d\065\uff9d" +
    "\001\002\000\114\002\uff9b\004\uff9b\005\uff9b\006\uff9b\007" +
    "\uff9b\010\uff9b\011\uff9b\012\uff9b\013\uff9b\014\uff9b\016\uff9b" +
    "\017\uff9b\020\uff9b\021\uff9b\022\uff9b\030\uff9b\031\uff9b\033" +
    "\uff9b\035\uff9b\036\uff9b\037\uff9b\041\uff9b\042\uff9b\043\uff9b" +
    "\044\uff9b\045\uff9b\046\uff9b\047\uff9b\051\uff9b\052\uff9b\053" +
    "\uff9b\054\uff9b\055\uff9b\056\uff9b\057\uff9b\060\uff9b\065\uff9b" +
    "\001\002\000\034\017\037\023\041\024\051\025\040\026" +
    "\044\034\032\036\013\042\047\061\034\062\046\063\043" +
    "\064\042\065\006\001\002\000\034\017\uffb5\023\uffb5\024" +
    "\uffb5\025\uffb5\026\uffb5\034\uffb5\036\uffb5\042\uffb5\061\uffb5" +
    "\062\uffb5\063\uffb5\064\uffb5\065\uffb5\001\002\000\034\017" +
    "\uffb7\023\uffb7\024\uffb7\025\uffb7\026\uffb7\034\uffb7\036\uffb7" +
    "\042\uffb7\061\uffb7\062\uffb7\063\uffb7\064\uffb7\065\uffb7\001" +
    "\002\000\114\002\uff98\004\uff98\005\uff98\006\uff98\007\uff98" +
    "\010\uff98\011\uff98\012\uff98\013\uff98\014\uff98\016\uff98\017" +
    "\uff98\020\uff98\021\uff98\022\uff98\030\uff98\031\uff98\033\uff98" +
    "\035\uff98\036\uff98\037\uff98\041\uff98\042\uff98\043\uff98\044" +
    "\uff98\045\uff98\046\uff98\047\uff98\051\uff98\052\uff98\053\uff98" +
    "\054\uff98\055\uff98\056\uff98\057\uff98\060\uff98\065\uff98\001" +
    "\002\000\114\002\uff9f\004\uff9f\005\uff9f\006\uff9f\007\uff9f" +
    "\010\uff9f\011\uff9f\012\uff9f\013\uff9f\014\uff9f\016\uff9f\017" +
    "\uff9f\020\uff9f\021\uff9f\022\uff9f\030\uff9f\031\uff9f\033\uff9f" +
    "\035\uff9f\036\uff9f\037\uff9f\041\uff9f\042\uff9f\043\uff9f\044" +
    "\uff9f\045\uff9f\046\uff9f\047\uff9f\051\uff9f\052\uff9f\053\uff9f" +
    "\054\uff9f\055\uff9f\056\uff9f\057\uff9f\060\uff9f\065\uff9f\001" +
    "\002\000\126\002\uff99\004\uff99\005\uff99\006\uff99\007\uff99" +
    "\010\uff99\011\uff99\012\uff99\013\uff99\014\uff99\016\uff99\017" +
    "\uff99\020\uff99\021\uff99\022\uff99\027\055\030\uff99\031\uff99" +
    "\032\054\033\uff99\034\032\035\uff99\036\056\037\uff99\041" +
    "\uff99\042\uff99\043\uff99\044\uff99\045\uff99\046\uff99\047\uff99" +
    "\050\060\051\uff99\052\uff99\053\uff99\054\uff99\055\uff99\056" +
    "\uff99\057\uff99\060\uff99\064\057\065\uff99\001\002\000\126" +
    "\002\uff96\004\uff96\005\uff96\006\uff96\007\uff96\010\uff96\011" +
    "\uff96\012\uff96\013\uff96\014\uff96\016\uff96\017\uff96\020\uff96" +
    "\021\uff96\022\uff96\027\uff96\030\uff96\031\uff96\032\uff96\033" +
    "\uff96\034\uff96\035\uff96\036\uff96\037\uff96\041\uff96\042\uff96" +
    "\043\uff96\044\uff96\045\uff96\046\uff96\047\uff96\050\uff96\051" +
    "\uff96\052\uff96\053\uff96\054\uff96\055\uff96\056\uff96\057\uff96" +
    "\060\uff96\064\uff96\065\uff96\001\002\000\034\017\037\023" +
    "\041\024\051\025\040\026\044\034\032\036\013\042\047" +
    "\061\034\062\046\063\043\064\042\065\006\001\002\000" +
    "\004\065\117\001\002\000\036\017\037\023\041\024\051" +
    "\025\040\026\044\034\032\036\013\037\uffe4\042\047\061" +
    "\034\062\046\063\043\064\042\065\006\001\002\000\126" +
    "\002\uffa4\004\uffa4\005\uffa4\006\uffa4\007\uffa4\010\uffa4\011" +
    "\uffa4\012\uffa4\013\uffa4\014\uffa4\016\uffa4\017\uffa4\020\uffa4" +
    "\021\uffa4\022\uffa4\027\uffa4\030\uffa4\031\uffa4\032\uffa4\033" +
    "\uffa4\034\uffa4\035\uffa4\036\uffa4\037\uffa4\041\uffa4\042\uffa4" +
    "\043\uffa4\044\uffa4\045\uffa4\046\uffa4\047\uffa4\050\uffa4\051" +
    "\uffa4\052\uffa4\053\uffa4\054\uffa4\055\uffa4\056\uffa4\057\uffa4" +
    "\060\uffa4\064\uffa4\065\uffa4\001\002\000\004\065\065\001" +
    "\002\000\126\002\uffd5\004\uffd5\005\uffd5\006\uffd5\007\uffd5" +
    "\010\uffd5\011\uffd5\012\uffd5\013\uffd5\014\uffd5\016\uffd5\017" +
    "\uffd5\020\uffd5\021\uffd5\022\uffd5\027\uffd5\030\uffd5\031\uffd5" +
    "\032\uffd5\033\uffd5\034\uffd5\035\uffd5\036\uffd5\037\uffd5\041" +
    "\uffd5\042\uffd5\043\uffd5\044\uffd5\045\uffd5\046\uffd5\047\uffd5" +
    "\050\uffd5\051\uffd5\052\uffd5\053\uffd5\054\uffd5\055\uffd5\056" +
    "\uffd5\057\uffd5\060\uffd5\064\uffd5\065\uffd5\001\002\000\126" +
    "\002\uffd7\004\uffd7\005\uffd7\006\uffd7\007\uffd7\010\uffd7\011" +
    "\uffd7\012\uffd7\013\uffd7\014\uffd7\016\uffd7\017\uffd7\020\uffd7" +
    "\021\uffd7\022\uffd7\027\uffd7\030\uffd7\031\uffd7\032\uffd7\033" +
    "\uffd7\034\uffd7\035\uffd7\036\uffd7\037\uffd7\041\uffd7\042\uffd7" +
    "\043\uffd7\044\uffd7\045\uffd7\046\uffd7\047\uffd7\050\uffd7\051" +
    "\uffd7\052\uffd7\053\uffd7\054\uffd7\055\uffd7\056\uffd7\057\uffd7" +
    "\060\uffd7\064\uffd7\065\uffd7\001\002\000\126\002\uffa5\004" +
    "\uffa5\005\uffa5\006\uffa5\007\uffa5\010\uffa5\011\uffa5\012\uffa5" +
    "\013\uffa5\014\uffa5\016\uffa5\017\uffa5\020\uffa5\021\uffa5\022" +
    "\uffa5\027\uffa5\030\uffa5\031\uffa5\032\uffa5\033\uffa5\034\uffa5" +
    "\035\uffa5\036\uffa5\037\uffa5\041\uffa5\042\uffa5\043\uffa5\044" +
    "\uffa5\045\uffa5\046\uffa5\047\uffa5\050\uffa5\051\uffa5\052\uffa5" +
    "\053\uffa5\054\uffa5\055\uffa5\056\uffa5\057\uffa5\060\uffa5\064" +
    "\uffa5\065\uffa5\001\002\000\130\002\uffdc\004\uffdc\005\uffdc" +
    "\006\uffdc\007\uffdc\010\uffdc\011\uffdc\012\uffdc\013\uffdc\014" +
    "\uffdc\016\uffdc\017\uffdc\020\uffdc\021\uffdc\022\uffdc\027\uffdc" +
    "\030\uffdc\031\uffdc\032\uffdc\033\uffdc\034\uffdc\035\uffdc\036" +
    "\uffdc\037\uffdc\040\uffdc\041\uffdc\042\uffdc\043\uffdc\044\uffdc" +
    "\045\uffdc\046\uffdc\047\uffdc\050\uffdc\051\uffdc\052\uffdc\053" +
    "\uffdc\054\uffdc\055\uffdc\056\uffdc\057\uffdc\060\uffdc\064\uffdc" +
    "\065\uffdc\001\002\000\130\002\uffdb\004\uffdb\005\uffdb\006" +
    "\uffdb\007\uffdb\010\uffdb\011\uffdb\012\uffdb\013\uffdb\014\uffdb" +
    "\016\uffdb\017\uffdb\020\uffdb\021\uffdb\022\uffdb\027\uffdb\030" +
    "\uffdb\031\uffdb\032\uffdb\033\uffdb\034\uffdb\035\uffdb\036\uffdb" +
    "\037\uffdb\040\uffdb\041\uffdb\042\uffdb\043\uffdb\044\uffdb\045" +
    "\uffdb\046\uffdb\047\uffdb\050\uffdb\051\uffdb\052\uffdb\053\uffdb" +
    "\054\uffdb\055\uffdb\056\uffdb\057\uffdb\060\uffdb\064\uffdb\065" +
    "\uffdb\001\002\000\004\037\116\001\002\000\020\002\uffe5" +
    "\005\uffe5\012\uffe5\013\uffe5\016\uffe5\030\uffe5\037\uffe5\001" +
    "\002\000\106\002\uffad\004\uffad\005\uffad\006\uffad\007\uffad" +
    "\010\uffad\012\uffad\013\uffad\014\uffad\016\uffad\017\uffad\020" +
    "\uffad\021\uffad\022\uffad\030\uffad\031\105\036\uffad\037\uffad" +
    "\041\075\042\110\043\071\044\106\045\104\046\074\047" +
    "\112\051\107\052\100\053\111\054\073\055\077\056\102" +
    "\057\072\060\076\065\uffad\001\002\000\026\017\uffc4\023" +
    "\uffc4\024\uffc4\025\uffc4\026\uffc4\034\uffc4\036\uffc4\063\uffc4" +
    "\064\uffc4\065\uffc4\001\002\000\026\017\uffb9\023\uffb9\024" +
    "\uffb9\025\uffb9\026\uffb9\034\uffb9\036\uffb9\063\uffb9\064\uffb9" +
    "\065\uffb9\001\002\000\026\017\uffbc\023\uffbc\024\uffbc\025" +
    "\uffbc\026\uffbc\034\uffbc\036\uffbc\063\uffbc\064\uffbc\065\uffbc" +
    "\001\002\000\026\017\uffc1\023\uffc1\024\uffc1\025\uffc1\026" +
    "\uffc1\034\uffc1\036\uffc1\063\uffc1\064\uffc1\065\uffc1\001\002" +
    "\000\026\017\uffc6\023\uffc6\024\uffc6\025\uffc6\026\uffc6\034" +
    "\uffc6\036\uffc6\063\uffc6\064\uffc6\065\uffc6\001\002\000\026" +
    "\017\uffb8\023\uffb8\024\uffb8\025\uffb8\026\uffb8\034\uffb8\036" +
    "\uffb8\063\uffb8\064\uffb8\065\uffb8\001\002\000\026\017\uffbb" +
    "\023\uffbb\024\uffbb\025\uffbb\026\uffbb\034\uffbb\036\uffbb\063" +
    "\uffbb\064\uffbb\065\uffbb\001\002\000\026\017\uffbe\023\uffbe" +
    "\024\uffbe\025\uffbe\026\uffbe\034\uffbe\036\uffbe\063\uffbe\064" +
    "\uffbe\065\uffbe\001\002\000\046\002\uffd8\004\uffd8\005\uffd8" +
    "\006\uffd8\007\uffd8\010\uffd8\012\uffd8\013\uffd8\014\uffd8\016" +
    "\uffd8\017\uffd8\020\uffd8\021\uffd8\022\uffd8\030\uffd8\036\uffd8" +
    "\037\uffd8\065\uffd8\001\002\000\026\017\uffba\023\uffba\024" +
    "\uffba\025\uffba\026\uffba\034\uffba\036\uffba\063\uffba\064\uffba" +
    "\065\uffba\001\002\000\026\017\037\023\041\024\051\025" +
    "\040\026\044\034\032\036\013\063\043\064\042\065\006" +
    "\001\002\000\026\017\uffc2\023\uffc2\024\uffc2\025\uffc2\026" +
    "\uffc2\034\uffc2\036\uffc2\063\uffc2\064\uffc2\065\uffc2\001\002" +
    "\000\034\017\037\023\041\024\051\025\040\026\044\034" +
    "\032\036\013\042\047\061\034\062\046\063\043\064\042" +
    "\065\006\001\002\000\026\017\uffc3\023\uffc3\024\uffc3\025" +
    "\uffc3\026\uffc3\034\uffc3\036\uffc3\063\uffc3\064\uffc3\065\uffc3" +
    "\001\002\000\026\017\uffbf\023\uffbf\024\uffbf\025\uffbf\026" +
    "\uffbf\034\uffbf\036\uffbf\063\uffbf\064\uffbf\065\uffbf\001\002" +
    "\000\026\017\uffc5\023\uffc5\024\uffc5\025\uffc5\026\uffc5\034" +
    "\uffc5\036\uffc5\063\uffc5\064\uffc5\065\uffc5\001\002\000\026" +
    "\017\uffbd\023\uffbd\024\uffbd\025\uffbd\026\uffbd\034\uffbd\036" +
    "\uffbd\063\uffbd\064\uffbd\065\uffbd\001\002\000\026\017\uffc0" +
    "\023\uffc0\024\uffc0\025\uffc0\026\uffc0\034\uffc0\036\uffc0\063" +
    "\uffc0\064\uffc0\065\uffc0\001\002\000\106\002\uffad\004\uffad" +
    "\005\uffad\006\uffad\007\uffad\010\uffad\012\uffad\013\uffad\014" +
    "\uffad\016\uffad\017\uffad\020\uffad\021\uffad\022\uffad\030\uffad" +
    "\031\105\036\uffad\037\uffad\041\075\042\110\043\071\044" +
    "\106\045\104\046\074\047\112\051\107\052\100\053\111" +
    "\054\073\055\077\056\102\057\072\060\076\065\uffad\001" +
    "\002\000\046\002\uffae\004\uffae\005\uffae\006\uffae\007\uffae" +
    "\010\uffae\012\uffae\013\uffae\014\uffae\016\uffae\017\uffae\020" +
    "\uffae\021\uffae\022\uffae\030\uffae\036\uffae\037\uffae\065\uffae" +
    "\001\002\000\114\002\uffa3\004\uffa3\005\uffa3\006\uffa3\007" +
    "\uffa3\010\uffa3\011\uffa3\012\uffa3\013\uffa3\014\uffa3\016\uffa3" +
    "\017\uffa3\020\uffa3\021\uffa3\022\uffa3\030\uffa3\031\uffa3\033" +
    "\uffa3\035\uffa3\036\uffa3\037\uffa3\041\uffa3\042\uffa3\043\uffa3" +
    "\044\uffa3\045\uffa3\046\uffa3\047\uffa3\051\uffa3\052\uffa3\053" +
    "\uffa3\054\uffa3\055\uffa3\056\uffa3\057\uffa3\060\uffa3\065\uffa3" +
    "\001\002\000\126\002\uffa6\004\uffa6\005\uffa6\006\uffa6\007" +
    "\uffa6\010\uffa6\011\uffa6\012\uffa6\013\uffa6\014\uffa6\016\uffa6" +
    "\017\uffa6\020\uffa6\021\uffa6\022\uffa6\027\uffa6\030\uffa6\031" +
    "\uffa6\032\uffa6\033\uffa6\034\uffa6\035\uffa6\036\uffa6\037\uffa6" +
    "\041\uffa6\042\uffa6\043\uffa6\044\uffa6\045\uffa6\046\uffa6\047" +
    "\uffa6\050\uffa6\051\uffa6\052\uffa6\053\uffa6\054\uffa6\055\uffa6" +
    "\056\uffa6\057\uffa6\060\uffa6\064\uffa6\065\uffa6\001\002\000" +
    "\010\034\032\036\056\064\057\001\002\000\126\002\uffd6" +
    "\004\uffd6\005\uffd6\006\uffd6\007\uffd6\010\uffd6\011\uffd6\012" +
    "\uffd6\013\uffd6\014\uffd6\016\uffd6\017\uffd6\020\uffd6\021\uffd6" +
    "\022\uffd6\027\uffd6\030\uffd6\031\uffd6\032\uffd6\033\uffd6\034" +
    "\uffd6\035\uffd6\036\uffd6\037\uffd6\041\uffd6\042\uffd6\043\uffd6" +
    "\044\uffd6\045\uffd6\046\uffd6\047\uffd6\050\uffd6\051\uffd6\052" +
    "\uffd6\053\uffd6\054\uffd6\055\uffd6\056\uffd6\057\uffd6\060\uffd6" +
    "\064\uffd6\065\uffd6\001\002\000\042\033\122\041\075\042" +
    "\110\043\071\044\106\045\104\046\074\047\112\051\107" +
    "\052\100\053\111\054\073\055\077\056\102\057\072\060" +
    "\076\001\002\000\130\002\uffda\004\uffda\005\uffda\006\uffda" +
    "\007\uffda\010\uffda\011\uffda\012\uffda\013\uffda\014\uffda\016" +
    "\uffda\017\uffda\020\uffda\021\uffda\022\uffda\027\uffda\030\uffda" +
    "\031\uffda\032\uffda\033\uffda\034\uffda\035\uffda\036\uffda\037" +
    "\uffda\040\uffda\041\uffda\042\uffda\043\uffda\044\uffda\045\uffda" +
    "\046\uffda\047\uffda\050\uffda\051\uffda\052\uffda\053\uffda\054" +
    "\uffda\055\uffda\056\uffda\057\uffda\060\uffda\064\uffda\065\uffda" +
    "\001\002\000\114\002\uffa2\004\uffa2\005\uffa2\006\uffa2\007" +
    "\uffa2\010\uffa2\011\uffa2\012\uffa2\013\uffa2\014\uffa2\016\uffa2" +
    "\017\uffa2\020\uffa2\021\uffa2\022\uffa2\030\uffa2\031\uffa2\033" +
    "\uffa2\035\uffa2\036\uffa2\037\uffa2\041\075\042\110\043\071" +
    "\044\106\045\104\046\074\047\112\051\107\052\100\053" +
    "\111\054\073\055\077\056\102\057\072\060\076\065\uffa2" +
    "\001\002\000\114\002\uffd4\004\uffd4\005\uffd4\006\uffd4\007" +
    "\uffd4\010\uffd4\011\uffd4\012\uffd4\013\uffd4\014\uffd4\016\uffd4" +
    "\017\uffd4\020\uffd4\021\uffd4\022\uffd4\030\uffd4\031\uffd4\033" +
    "\uffd4\035\uffd4\036\uffd4\037\uffd4\041\uffd4\042\uffd4\043\uffd4" +
    "\044\uffd4\045\uffd4\046\uffd4\047\uffd4\051\uffd4\052\uffd4\053" +
    "\uffd4\054\uffd4\055\uffd4\056\uffd4\057\uffd4\060\uffd4\065\uffd4" +
    "\001\002\000\010\026\131\037\uffd2\065\127\001\002\000" +
    "\006\031\142\037\uffaf\001\002\000\052\002\uffab\004\uffab" +
    "\005\uffab\006\uffab\007\uffab\010\uffab\012\uffab\013\uffab\014" +
    "\uffab\016\uffab\017\uffab\020\uffab\021\uffab\022\uffab\030\uffab" +
    "\031\136\036\uffab\037\uffab\040\uffab\065\uffab\001\002\000" +
    "\004\037\133\001\002\000\004\037\uffd0\001\002\000\004" +
    "\037\uffd3\001\002\000\032\004\011\005\ufffd\006\004\007" +
    "\023\010\010\014\021\017\007\020\005\021\ufffd\022\ufffd" +
    "\036\013\065\006\001\002\000\004\005\135\001\002\000" +
    "\114\002\uff97\004\uff97\005\uff97\006\uff97\007\uff97\010\uff97" +
    "\011\uff97\012\uff97\013\uff97\014\uff97\016\uff97\017\uff97\020" +
    "\uff97\021\uff97\022\uff97\030\uff97\031\uff97\033\uff97\035\uff97" +
    "\036\uff97\037\uff97\041\uff97\042\uff97\043\uff97\044\uff97\045" +
    "\uff97\046\uff97\047\uff97\051\uff97\052\uff97\053\uff97\054\uff97" +
    "\055\uff97\056\uff97\057\uff97\060\uff97\065\uff97\001\002\000" +
    "\004\065\140\001\002\000\054\002\uffd9\004\uffd9\005\uffd9" +
    "\006\uffd9\007\uffd9\010\uffd9\012\uffd9\013\uffd9\014\uffd9\015" +
    "\uffd9\016\uffd9\017\uffd9\020\uffd9\021\uffd9\022\uffd9\030\uffd9" +
    "\031\uffd9\036\uffd9\037\uffd9\040\uffd9\065\uffd9\001\002\000" +
    "\054\002\uffab\004\uffab\005\uffab\006\uffab\007\uffab\010\uffab" +
    "\012\uffab\013\uffab\014\uffab\015\uffab\016\uffab\017\uffab\020" +
    "\uffab\021\uffab\022\uffab\030\uffab\031\136\036\uffab\037\uffab" +
    "\040\uffab\065\uffab\001\002\000\054\002\uffac\004\uffac\005" +
    "\uffac\006\uffac\007\uffac\010\uffac\012\uffac\013\uffac\014\uffac" +
    "\015\uffac\016\uffac\017\uffac\020\uffac\021\uffac\022\uffac\030" +
    "\uffac\031\uffac\036\uffac\037\uffac\040\uffac\065\uffac\001\002" +
    "\000\004\026\144\001\002\000\004\037\uffd1\001\002\000" +
    "\004\037\uffb0\001\002\000\010\030\163\031\162\035\uffcb" +
    "\001\002\000\004\035\161\001\002\000\064\027\uffdd\030" +
    "\uffdd\031\uffdd\032\uffdd\034\uffdd\035\uffdd\036\uffdd\040\157" +
    "\041\uffdd\042\uffdd\043\uffdd\044\uffdd\045\uffdd\046\uffdd\047" +
    "\uffdd\050\uffdd\051\uffdd\052\uffdd\053\uffdd\054\uffdd\055\uffdd" +
    "\056\uffdd\057\uffdd\060\uffdd\064\uffdd\001\002\000\046\030" +
    "\uffc8\031\uffc8\035\uffc8\041\075\042\110\043\071\044\106" +
    "\045\104\046\074\047\112\051\107\052\100\053\111\054" +
    "\073\055\077\056\102\057\072\060\076\001\002\000\034" +
    "\017\037\023\041\024\051\025\040\026\044\034\032\036" +
    "\013\042\047\061\034\062\046\063\043\064\042\065\006" +
    "\001\002\000\004\035\uffce\001\002\000\042\033\154\041" +
    "\075\042\110\043\071\044\106\045\104\046\074\047\112" +
    "\051\107\052\100\053\111\054\073\055\077\056\102\057" +
    "\072\060\076\001\002\000\004\040\155\001\002\000\034" +
    "\017\037\023\041\024\051\025\040\026\044\034\032\036" +
    "\013\042\047\061\034\062\046\063\043\064\042\065\006" +
    "\001\002\000\046\030\uffca\031\uffca\035\uffca\041\075\042" +
    "\110\043\071\044\106\045\104\046\074\047\112\051\107" +
    "\052\100\053\111\054\073\055\077\056\102\057\072\060" +
    "\076\001\002\000\034\017\037\023\041\024\051\025\040" +
    "\026\044\034\032\036\013\042\047\061\034\062\046\063" +
    "\043\064\042\065\006\001\002\000\046\030\uffc9\031\uffc9" +
    "\035\uffc9\041\075\042\110\043\071\044\106\045\104\046" +
    "\074\047\112\051\107\052\100\053\111\054\073\055\077" +
    "\056\102\057\072\060\076\001\002\000\126\002\uffcf\004" +
    "\uffcf\005\uffcf\006\uffcf\007\uffcf\010\uffcf\011\uffcf\012\uffcf" +
    "\013\uffcf\014\uffcf\016\uffcf\017\uffcf\020\uffcf\021\uffcf\022" +
    "\uffcf\027\uffcf\030\uffcf\031\uffcf\032\uffcf\033\uffcf\034\uffcf" +
    "\035\uffcf\036\uffcf\037\uffcf\041\uffcf\042\uffcf\043\uffcf\044" +
    "\uffcf\045\uffcf\046\uffcf\047\uffcf\050\uffcf\051\uffcf\052\uffcf" +
    "\053\uffcf\054\uffcf\055\uffcf\056\uffcf\057\uffcf\060\uffcf\064" +
    "\uffcf\065\uffcf\001\002\000\044\017\uffb2\023\uffb2\024\uffb2" +
    "\025\uffb2\026\uffb2\030\uffb2\031\uffb2\032\uffb2\034\uffb2\035" +
    "\uffb2\036\uffb2\042\uffb2\061\uffb2\062\uffb2\063\uffb2\064\uffb2" +
    "\065\uffb2\001\002\000\044\017\uffb1\023\uffb1\024\uffb1\025" +
    "\uffb1\026\uffb1\030\uffb1\031\uffb1\032\uffb1\034\uffb1\035\uffb1" +
    "\036\uffb1\042\uffb1\061\uffb1\062\uffb1\063\uffb1\064\uffb1\065" +
    "\uffb1\001\002\000\004\035\uffcd\001\002\000\044\017\037" +
    "\023\041\024\051\025\040\026\044\030\uffc7\031\uffc7\032" +
    "\151\034\032\035\uffc7\036\013\042\047\061\034\062\046" +
    "\063\043\064\042\065\147\001\002\000\010\030\163\031" +
    "\162\035\uffcb\001\002\000\004\035\uffcc\001\002\000\034" +
    "\017\037\023\041\024\051\025\040\026\044\034\032\036" +
    "\013\042\047\061\034\062\046\063\043\064\042\065\006" +
    "\001\002\000\044\002\ufff9\004\ufff9\005\ufff9\006\ufff9\007" +
    "\ufff9\010\ufff9\012\ufff9\013\ufff9\014\ufff9\016\ufff9\017\ufff9" +
    "\020\ufff9\021\ufff9\022\ufff9\030\ufff9\036\ufff9\065\ufff9\001" +
    "\002\000\004\015\206\001\002\000\010\015\uffab\031\136" +
    "\040\174\001\002\000\034\017\037\023\041\024\051\025" +
    "\040\026\044\034\032\036\013\042\047\061\034\062\046" +
    "\063\043\064\042\065\006\001\002\000\042\031\176\041" +
    "\075\042\110\043\071\044\106\045\104\046\074\047\112" +
    "\051\107\052\100\053\111\054\073\055\077\056\102\057" +
    "\072\060\076\001\002\000\034\017\037\023\041\024\051" +
    "\025\040\026\044\034\032\036\013\042\047\061\034\062" +
    "\046\063\043\064\042\065\006\001\002\000\044\004\uffa7" +
    "\031\200\041\075\042\110\043\071\044\106\045\104\046" +
    "\074\047\112\051\107\052\100\053\111\054\073\055\077" +
    "\056\102\057\072\060\076\001\002\000\034\017\037\023" +
    "\041\024\051\025\040\026\044\034\032\036\013\042\047" +
    "\061\034\062\046\063\043\064\042\065\006\001\002\000" +
    "\004\004\202\001\002\000\032\004\011\005\ufffd\006\004" +
    "\007\023\010\010\014\021\017\007\020\005\021\ufffd\022" +
    "\ufffd\036\013\065\006\001\002\000\004\005\204\001\002" +
    "\000\044\002\ufff3\004\ufff3\005\ufff3\006\ufff3\007\ufff3\010" +
    "\ufff3\012\ufff3\013\ufff3\014\ufff3\016\ufff3\017\ufff3\020\ufff3" +
    "\021\ufff3\022\ufff3\030\ufff3\036\ufff3\065\ufff3\001\002\000" +
    "\042\004\uffa8\041\075\042\110\043\071\044\106\045\104" +
    "\046\074\047\112\051\107\052\100\053\111\054\073\055" +
    "\077\056\102\057\072\060\076\001\002\000\034\017\037" +
    "\023\041\024\051\025\040\026\044\034\032\036\013\042" +
    "\047\061\034\062\046\063\043\064\042\065\006\001\002" +
    "\000\004\004\210\001\002\000\032\004\011\005\ufffd\006" +
    "\004\007\023\010\010\014\021\017\007\020\005\021\ufffd" +
    "\022\ufffd\036\013\065\006\001\002\000\004\005\212\001" +
    "\002\000\044\002\ufff2\004\ufff2\005\ufff2\006\ufff2\007\ufff2" +
    "\010\ufff2\012\ufff2\013\ufff2\014\ufff2\016\ufff2\017\ufff2\020" +
    "\ufff2\021\ufff2\022\ufff2\030\ufff2\036\ufff2\065\ufff2\001\002" +
    "\000\006\036\013\065\006\001\002\000\004\040\uffde\001" +
    "\002\000\022\027\uff96\031\213\032\uff96\034\uff96\036\uff96" +
    "\040\uffa9\050\uff96\064\uff96\001\002\000\016\027\055\032" +
    "\054\034\032\036\056\050\060\064\057\001\002\000\004" +
    "\040\uffaa\001\002\000\042\002\ufffd\004\011\005\ufffd\006" +
    "\004\007\023\010\010\012\ufffd\013\ufffd\014\021\016\ufffd" +
    "\017\007\020\005\021\ufffd\022\ufffd\036\013\065\006\001" +
    "\002\000\042\002\uffb4\004\uffb4\005\uffb4\006\uffb4\007\uffb4" +
    "\010\uffb4\012\uffb4\013\uffb4\014\uffb4\016\uffb4\017\uffb4\020" +
    "\uffb4\021\uffb4\022\uffb4\036\uffb4\065\uffb4\001\002\000\020" +
    "\002\ufffe\005\ufffe\012\ufffe\013\ufffe\016\ufffe\021\ufffe\022" +
    "\ufffe\001\002\000\050\002\uffe4\005\uffe4\012\uffe4\013\uffe4" +
    "\016\uffe4\017\037\023\041\024\051\025\040\026\044\030" +
    "\uffe4\034\032\036\013\042\047\061\034\062\046\063\043" +
    "\064\042\065\006\001\002\000\016\002\uffe6\005\uffe6\012" +
    "\uffe6\013\uffe6\016\uffe6\030\uffe6\001\002\000\014\002\uffff" +
    "\005\uffff\012\uffff\013\uffff\016\uffff\001\002\000\016\002" +
    "\uffb3\005\uffb3\012\uffb3\013\uffb3\016\uffb3\030\221\001\002" +
    "\000\014\002\ufffc\005\ufffc\012\ufffc\013\ufffc\016\ufffc\001" +
    "\002\000\016\002\uffe7\005\uffe7\012\uffe7\013\uffe7\016\uffe7" +
    "\030\uffe7\001\002\000\042\037\232\041\075\042\110\043" +
    "\071\044\106\045\104\046\074\047\112\051\107\052\100" +
    "\053\111\054\073\055\077\056\102\057\072\060\076\001" +
    "\002\000\126\002\uff94\004\uff94\005\uff94\006\uff94\007\uff94" +
    "\010\uff94\011\uff94\012\uff94\013\uff94\014\uff94\016\uff94\017" +
    "\uff94\020\uff94\021\uff94\022\uff94\027\uff94\030\uff94\031\uff94" +
    "\032\uff94\033\uff94\034\uff94\035\uff94\036\uff94\037\uff94\041" +
    "\uff94\042\uff94\043\uff94\044\uff94\045\uff94\046\uff94\047\uff94" +
    "\050\uff94\051\uff94\052\uff94\053\uff94\054\uff94\055\uff94\056" +
    "\uff94\057\uff94\060\uff94\064\uff94\065\uff94\001\002\000\004" +
    "\005\234\001\002\000\044\002\ufff7\004\ufff7\005\ufff7\006" +
    "\ufff7\007\ufff7\010\ufff7\012\ufff7\013\ufff7\014\ufff7\016\ufff7" +
    "\017\ufff7\020\ufff7\021\ufff7\022\ufff7\030\ufff7\036\ufff7\065" +
    "\ufff7\001\002\000\042\011\236\041\075\042\110\043\071" +
    "\044\106\045\104\046\074\047\112\051\107\052\100\053" +
    "\111\054\073\055\077\056\102\057\072\060\076\001\002" +
    "\000\036\004\011\005\ufffd\006\004\007\023\010\010\012" +
    "\ufffd\013\ufffd\014\021\017\007\020\005\021\ufffd\022\ufffd" +
    "\036\013\065\006\001\002\000\010\005\uffec\012\uffec\013" +
    "\241\001\002\000\006\005\uffea\012\246\001\002\000\034" +
    "\017\037\023\041\024\051\025\040\026\044\034\032\036" +
    "\013\042\047\061\034\062\046\063\043\064\042\065\006" +
    "\001\002\000\042\011\243\041\075\042\110\043\071\044" +
    "\106\045\104\046\074\047\112\051\107\052\100\053\111" +
    "\054\073\055\077\056\102\057\072\060\076\001\002\000" +
    "\036\004\011\005\ufffd\006\004\007\023\010\010\012\ufffd" +
    "\013\ufffd\014\021\017\007\020\005\021\ufffd\022\ufffd\036" +
    "\013\065\006\001\002\000\010\005\uffec\012\uffec\013\241" +
    "\001\002\000\006\005\uffed\012\uffed\001\002\000\032\004" +
    "\011\005\ufffd\006\004\007\023\010\010\014\021\017\007" +
    "\020\005\021\ufffd\022\ufffd\036\013\065\006\001\002\000" +
    "\004\005\250\001\002\000\044\002\uffee\004\uffee\005\uffee" +
    "\006\uffee\007\uffee\010\uffee\012\uffee\013\uffee\014\uffee\016" +
    "\uffee\017\uffee\020\uffee\021\uffee\022\uffee\030\uffee\036\uffee" +
    "\065\uffee\001\002\000\004\005\uffeb\001\002\000\004\036" +
    "\125\001\002\000\010\036\uffe1\047\uffe1\050\255\001\002" +
    "\000\006\036\uffdf\047\260\001\002\000\004\065\256\001" +
    "\002\000\010\036\uffe1\047\uffe1\050\255\001\002\000\006" +
    "\036\uffe2\047\uffe2\001\002\000\004\065\262\001\002\000" +
    "\004\036\uffe3\001\002\000\004\036\uffe0\001\002\000\044" +
    "\002\ufff1\004\ufff1\005\ufff1\006\ufff1\007\ufff1\010\ufff1\012" +
    "\ufff1\013\ufff1\014\ufff1\016\ufff1\017\ufff1\020\ufff1\021\ufff1" +
    "\022\ufff1\030\ufff1\036\ufff1\065\ufff1\001\002\000\046\002" +
    "\uffe8\004\uffe8\005\uffe8\006\uffe8\007\uffe8\010\uffe8\012\uffe8" +
    "\013\uffe8\014\uffe8\016\uffe8\017\uffe8\020\uffe8\021\uffe8\022" +
    "\uffe8\030\uffe8\036\uffe8\040\271\065\uffe8\001\002\000\004" +
    "\065\266\001\002\000\004\036\125\001\002\000\044\002" +
    "\ufff0\004\ufff0\005\ufff0\006\ufff0\007\ufff0\010\ufff0\012\ufff0" +
    "\013\ufff0\014\ufff0\016\ufff0\017\ufff0\020\ufff0\021\ufff0\022" +
    "\ufff0\030\ufff0\036\ufff0\065\ufff0\001\002\000\044\002\uffef" +
    "\004\uffef\005\uffef\006\uffef\007\uffef\010\uffef\012\uffef\013" +
    "\uffef\014\uffef\016\uffef\017\uffef\020\uffef\021\uffef\022\uffef" +
    "\030\uffef\036\uffef\065\uffef\001\002\000\034\017\037\023" +
    "\041\024\051\025\040\026\044\034\032\036\013\042\047" +
    "\061\034\062\046\063\043\064\042\065\006\001\002\000" +
    "\044\002\uffe9\004\uffe9\005\uffe9\006\uffe9\007\uffe9\010\uffe9" +
    "\012\uffe9\013\uffe9\014\uffe9\016\uffe9\017\uffe9\020\uffe9\021" +
    "\uffe9\022\uffe9\030\uffe9\036\uffe9\065\uffe9\001\002\000\042" +
    "\004\274\041\075\042\110\043\071\044\106\045\104\046" +
    "\074\047\112\051\107\052\100\053\111\054\073\055\077" +
    "\056\102\057\072\060\076\001\002\000\032\004\011\005" +
    "\ufffd\006\004\007\023\010\010\014\021\017\007\020\005" +
    "\021\ufffd\022\ufffd\036\013\065\006\001\002\000\004\005" +
    "\276\001\002\000\044\002\ufff6\004\ufff6\005\ufff6\006\ufff6" +
    "\007\ufff6\010\ufff6\012\ufff6\013\ufff6\014\ufff6\016\ufff6\017" +
    "\ufff6\020\ufff6\021\ufff6\022\ufff6\030\ufff6\036\ufff6\065\ufff6" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\274\000\024\002\014\004\016\007\021\010\017\014" +
    "\015\015\011\031\013\051\023\055\024\001\001\000\022" +
    "\010\052\013\272\014\051\015\011\017\034\022\047\027" +
    "\044\054\032\001\001\000\004\011\263\001\001\000\002" +
    "\001\001\000\004\006\251\001\001\000\022\010\052\013" +
    "\234\014\051\015\011\017\034\022\047\027\044\054\032" +
    "\001\001\000\024\002\027\003\232\004\016\007\021\010" +
    "\017\014\015\015\011\031\013\051\023\001\001\000\002" +
    "\001\001\000\022\010\052\013\230\014\051\015\011\017" +
    "\034\022\047\027\044\054\032\001\001\000\006\005\225" +
    "\032\224\001\001\000\002\001\001\000\012\016\060\022" +
    "\062\052\061\053\063\001\001\000\004\030\217\001\001" +
    "\000\004\041\213\001\001\000\004\011\171\001\001\000" +
    "\002\001\001\000\024\002\027\003\026\004\016\007\021" +
    "\010\017\014\015\015\011\031\013\051\023\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\010\052\013\035\014" +
    "\051\015\011\017\034\022\047\027\044\054\032\001\001" +
    "\000\030\010\052\013\147\014\051\015\011\017\034\022" +
    "\047\023\151\024\144\027\044\046\145\054\032\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\026\102\001\001\000\004\020\123\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\010\052\013\122\014\051" +
    "\015\011\017\034\022\047\027\044\054\032\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\016\060\022\062\052\061\053\063\001" +
    "\001\000\002\001\001\000\022\010\052\013\120\014\051" +
    "\015\011\017\034\022\047\027\044\054\032\001\001\000" +
    "\002\001\001\000\026\010\052\012\066\013\067\014\051" +
    "\015\011\017\034\022\047\027\044\037\065\054\032\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\026\102\043\100\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\010\052\014\051" +
    "\015\011\017\034\022\047\054\114\001\001\000\002\001" +
    "\001\000\022\010\052\013\112\014\051\015\011\017\034" +
    "\022\047\027\044\054\032\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\026\102\043\113\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\016\117" +
    "\022\062\001\001\000\002\001\001\000\004\026\102\001" +
    "\001\000\002\001\001\000\004\026\102\001\001\000\002" +
    "\001\001\000\010\011\125\021\131\044\127\001\001\000" +
    "\004\045\142\001\001\000\004\042\136\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\002" +
    "\027\003\133\004\016\007\021\010\017\014\015\015\011" +
    "\031\013\051\023\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\042\140" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\025\164\047\163\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\026\102\001" +
    "\001\000\022\010\052\013\152\014\051\015\011\017\034" +
    "\022\047\027\044\054\032\001\001\000\002\001\001\000" +
    "\004\026\102\001\001\000\002\001\001\000\022\010\052" +
    "\013\155\014\051\015\011\017\034\022\047\027\044\054" +
    "\032\001\001\000\004\026\102\001\001\000\022\010\052" +
    "\013\157\014\051\015\011\017\034\022\047\027\044\054" +
    "\032\001\001\000\004\026\102\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\010\052\013\147\014\051\015\011\017\034\022\047" +
    "\024\165\027\044\054\032\001\001\000\006\025\164\047" +
    "\166\001\001\000\002\001\001\000\024\010\052\012\170" +
    "\013\067\014\051\015\011\017\034\022\047\027\044\054" +
    "\032\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\042\136\001\001\000\022\010\052\013\174\014\051\015" +
    "\011\017\034\022\047\027\044\054\032\001\001\000\004" +
    "\026\102\001\001\000\022\010\052\013\176\014\051\015" +
    "\011\017\034\022\047\027\044\054\032\001\001\000\006" +
    "\026\102\035\200\001\001\000\022\010\052\013\204\014" +
    "\051\015\011\017\034\022\047\027\044\054\032\001\001" +
    "\000\002\001\001\000\024\002\027\003\202\004\016\007" +
    "\021\010\017\014\015\015\011\031\013\051\023\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\026\102\001" +
    "\001\000\024\010\052\012\206\013\067\014\051\015\011" +
    "\017\034\022\047\027\044\054\032\001\001\000\002\001" +
    "\001\000\024\002\027\003\210\004\016\007\021\010\017" +
    "\014\015\015\011\031\013\051\023\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\010\214\014\215\015\011" +
    "\001\001\000\002\001\001\000\004\041\216\001\001\000" +
    "\012\016\060\022\062\052\061\053\063\001\001\000\002" +
    "\001\001\000\020\004\016\007\021\010\017\014\015\015" +
    "\011\031\221\051\023\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\010\052\012\066\013\067\014\051\015" +
    "\011\017\034\022\047\027\044\037\227\054\032\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\030\226\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\026\102" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\026\102\001\001\000\024\002\027\003\236" +
    "\004\016\007\021\010\017\014\015\015\011\031\013\051" +
    "\023\001\001\000\004\033\237\001\001\000\004\034\246" +
    "\001\001\000\022\010\052\013\241\014\051\015\011\017" +
    "\034\022\047\027\044\054\032\001\001\000\004\026\102" +
    "\001\001\000\024\002\027\003\243\004\016\007\021\010" +
    "\017\014\015\015\011\031\013\051\023\001\001\000\004" +
    "\033\244\001\001\000\002\001\001\000\024\002\027\003" +
    "\250\004\016\007\021\010\017\014\015\015\011\031\013" +
    "\051\023\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\020\262\001\001\000\004\040\253" +
    "\001\001\000\004\050\260\001\001\000\002\001\001\000" +
    "\004\040\256\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\036\267\001\001\000\002\001\001\000\004\020\266" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\010" +
    "\052\012\271\013\067\014\051\015\011\017\034\022\047" +
    "\027\044\054\032\001\001\000\002\001\001\000\004\026" +
    "\102\001\001\000\024\002\027\003\274\004\016\007\021" +
    "\010\017\014\015\015\011\031\013\051\023\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$LuaParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$LuaParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$LuaParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    // Funções chamadas em erros ///////////////////////////////////////////////////////////////////////////
    public void syntax_error(Symbol s){ 
        System.out.println("\nOcorreu um erro na linha " + (s.right) +", coluna "+s.left+ ". Identificador "
        +s.value + " não reconhecido." );
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        System.out.println("\nOcorreu um erro na linha " + (s.right)+ ", coluna "+s.left+". Identificador " +
        s.value + " não reconhecido.");
    }
    
    public static void main(String[] args){
        try {
            LuaParser parser = new LuaParser(new LuaLexer(new FileReader(args[0])));
            Object result = parser.parse().value;
            System.out.println("*** Resultados finais ***");
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$LuaParser$actions {
  private final LuaParser parser;

  /** Constructor */
  CUP$LuaParser$actions(LuaParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$LuaParser$do_action(
    int                        CUP$LuaParser$act_num,
    java_cup.runtime.lr_parser CUP$LuaParser$parser,
    java.util.Stack            CUP$LuaParser$stack,
    int                        CUP$LuaParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$LuaParser$result;

      /* select the action based on the action number */
      switch (CUP$LuaParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // prefixexp ::= OPEN_PARENTHESES exp CLOSE_PARENTHESES 
            {
              Node RESULT =null;
		int openPleft = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-2)).left;
		int openPright = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-2)).right;
		Token openP = (Token)((java_cup.runtime.Symbol) CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-1)).right;
		Node exp = (Node)((java_cup.runtime.Symbol) CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-1)).value;
		int closePleft = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()).left;
		int closePright = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()).right;
		Token closeP = (Token)((java_cup.runtime.Symbol) CUP$LuaParser$stack.peek()).value;
		 
                exp.addChildren(openP);
                exp.addChildren(closeP);
                RESULT = exp;
            
              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("prefixexp",10, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-2)), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // prefixexp ::= functioncall 
            {
              Node RESULT =null;
		int functioncallleft = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()).left;
		int functioncallright = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()).right;
		Node functioncall = (Node)((java_cup.runtime.Symbol) CUP$LuaParser$stack.peek()).value;
		 
                RESULT = functioncall; 
            
              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("prefixexp",10, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // prefixexp ::= var 
            {
              Node RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()).right;
		Node var = (Node)((java_cup.runtime.Symbol) CUP$LuaParser$stack.peek()).value;
		 
                RESULT = var; 
            
              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("prefixexp",10, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // funcbody ::= OPEN_PARENTHESES parlisttemp CLOSE_PARENTHESES block END 
            {
              Node RESULT =null;
		int openPleft = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-4)).left;
		int openPright = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-4)).right;
		Token openP = (Token)((java_cup.runtime.Symbol) CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-4)).value;
		int parlisttempleft = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-3)).left;
		int parlisttempright = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-3)).right;
		Node parlisttemp = (Node)((java_cup.runtime.Symbol) CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-3)).value;
		int closePleft = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-2)).left;
		int closePright = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-2)).right;
		Token closeP = (Token)((java_cup.runtime.Symbol) CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-2)).value;
		int blockleft = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-1)).left;
		int blockright = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-1)).right;
		Node block = (Node)((java_cup.runtime.Symbol) CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()).right;
		Token end = (Token)((java_cup.runtime.Symbol) CUP$LuaParser$stack.peek()).value;
		
                
                parlisttemp.addChildren(openP);
                parlisttemp.addChildren(closeP);
                block.addChildren(parlisttemp);
                block.addChildren(end);
                RESULT = block;
            
              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("funcbody",14, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-4)), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // exptemp ::= tableconstructor 
            {
              Node RESULT =null;
		int tableconstructorleft = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()).left;
		int tableconstructorright = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()).right;
		Node tableconstructor = (Node)((java_cup.runtime.Symbol) CUP$LuaParser$stack.peek()).value;
		 
            RESULT = tableconstructor; 
        
              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("exptemp",42, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // exptemp ::= prefixexp 
            {
              Node RESULT =null;
		int prefixexpleft = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()).left;
		int prefixexpright = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()).right;
		Node prefixexp = (Node)((java_cup.runtime.Symbol) CUP$LuaParser$stack.peek()).value;
		 
            RESULT = prefixexp; 
        
              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("exptemp",42, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // exptemp ::= function 
            {
              Node RESULT =null;
		int functionleft = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()).left;
		int functionright = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()).right;
		Node function = (Node)((java_cup.runtime.Symbol) CUP$LuaParser$stack.peek()).value;
		 
            RESULT = function;
            //RESULT = new Node(function); 
        
              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("exptemp",42, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // exptemp ::= ELLIPSIS 
            {
              Node RESULT =null;
		int ellipsisleft = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()).left;
		int ellipsisright = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()).right;
		Token ellipsis = (Token)((java_cup.runtime.Symbol) CUP$LuaParser$stack.peek()).value;
		
           RESULT = new Node(ellipsis);
        
              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("exptemp",42, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // exptemp ::= STRING 
            {
              Node RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()).right;
		Token str = (Token)((java_cup.runtime.Symbol) CUP$LuaParser$stack.peek()).value;
		
            RESULT = new Node(str);
        
              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("exptemp",42, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // exptemp ::= NUMBER 
            {
              Node RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()).right;
		Token num = (Token)((java_cup.runtime.Symbol) CUP$LuaParser$stack.peek()).value;
		
            RESULT = new Node(num);
        
              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("exptemp",42, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // exptemp ::= TRUE 
            {
              Node RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$LuaParser$stack.peek()).value;
		
            RESULT = new Node(t);
        
              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("exptemp",42, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // exptemp ::= FALSE 
            {
              Node RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()).right;
		Token f = (Token)((java_cup.runtime.Symbol) CUP$LuaParser$stack.peek()).value;
		
            RESULT = new Node(f);
        
              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("exptemp",42, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // exptemp ::= NIL 
            {
              Node RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()).right;
		Token n = (Token)((java_cup.runtime.Symbol) CUP$LuaParser$stack.peek()).value;
		
            RESULT = new Node(n);
        
              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("exptemp",42, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // exp ::= exptemp 
            {
              Node RESULT =null;
		int exptempleft = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()).left;
		int exptempright = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()).right;
		Node exptemp = (Node)((java_cup.runtime.Symbol) CUP$LuaParser$stack.peek()).value;
		
            RESULT = exptemp;
        
              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("exp",9, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // exp ::= unop exp 
            {
              Node RESULT =null;
		int unopleft = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-1)).left;
		int unopright = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-1)).right;
		Node unop = (Node)((java_cup.runtime.Symbol) CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-1)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()).right;
		Node exp = (Node)((java_cup.runtime.Symbol) CUP$LuaParser$stack.peek()).value;
		
            unop.addChildren(exp);
            RESULT = unop;
        
              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("exp",9, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-1)), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // exp ::= exp binop exptemp 
            {
              Node RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-2)).right;
		Node exp = (Node)((java_cup.runtime.Symbol) CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-2)).value;
		int binopleft = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-1)).left;
		int binopright = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-1)).right;
		Node binop = (Node)((java_cup.runtime.Symbol) CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-1)).value;
		int exptempleft = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()).left;
		int exptempright = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()).right;
		Node exptemp = (Node)((java_cup.runtime.Symbol) CUP$LuaParser$stack.peek()).value;
		
            binop.addChildren(exp);
            binop.addChildren(exptemp);
            RESULT = binop;
        
              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("exp",9, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-2)), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // args ::= STRING 
            {
              Node RESULT =null;
		int stringleft = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()).right;
		Token string = (Token)((java_cup.runtime.Symbol) CUP$LuaParser$stack.peek()).value;
		
          RESULT = new Node(string);
       
              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("args",12, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // args ::= tableconstructor 
            {
              Node RESULT =null;
		int tableconstructorleft = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()).left;
		int tableconstructorright = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()).right;
		Node tableconstructor = (Node)((java_cup.runtime.Symbol) CUP$LuaParser$stack.peek()).value;
		
          RESULT = tableconstructor;
       
              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("args",12, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // args ::= OPEN_PARENTHESES explisttemp CLOSE_PARENTHESES 
            {
              Node RESULT =null;
		int openPleft = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-2)).left;
		int openPright = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-2)).right;
		Token openP = (Token)((java_cup.runtime.Symbol) CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-2)).value;
		int explisttempleft = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-1)).left;
		int explisttempright = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-1)).right;
		Node explisttemp = (Node)((java_cup.runtime.Symbol) CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-1)).value;
		int closePleft = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()).left;
		int closePright = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()).right;
		Token closeP = (Token)((java_cup.runtime.Symbol) CUP$LuaParser$stack.peek()).value;
		
            explisttemp.addChildren(openP);
            explisttemp.addChildren(closeP);
            RESULT = explisttemp;
        
              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("args",12, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-2)), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // commaexptemp ::= 
            {
              Node RESULT =null;
		 RESULT = new Node(); 
              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("commaexptemp",27, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // commaexptemp ::= COMMA exp 
            {
              Node RESULT =null;
		int commaleft = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-1)).left;
		int commaright = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-1)).right;
		Token comma = (Token)((java_cup.runtime.Symbol) CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-1)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()).right;
		Node exp = (Node)((java_cup.runtime.Symbol) CUP$LuaParser$stack.peek()).value;
		
            // Node comma = new Node(comma);
            exp.addChildren(comma);
            RESULT = exp;
        
              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("commaexptemp",27, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-1)), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // commavartemp ::= 
            {
              Node RESULT =null;
		 RESULT = new Node(); 
              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("commavartemp",31, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // commavartemp ::= COMMA var commavartemp 
            {
              Node RESULT =null;
		int commaleft = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-2)).left;
		int commaright = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-2)).right;
		Token comma = (Token)((java_cup.runtime.Symbol) CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-1)).right;
		Node var = (Node)((java_cup.runtime.Symbol) CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-1)).value;
		int commavartempleft = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()).left;
		int commavartempright = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()).right;
		Node commavartemp = (Node)((java_cup.runtime.Symbol) CUP$LuaParser$stack.peek()).value;
		
            // Node comma = new Node(comma);
            commavartemp.addChildren(comma);
            commavartemp.addChildren(var);
            RESULT = commavartemp;
        
              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("commavartemp",31, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-2)), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // commaidentifiertemp ::= 
            {
              Node RESULT =null;
		 RESULT = new Node(); 
              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("commaidentifiertemp",32, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // commaidentifiertemp ::= COMMA IDENTIFIER commaidentifiertemp 
            {
              Node RESULT =null;
		int commaleft = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-2)).left;
		int commaright = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-2)).right;
		Token comma = (Token)((java_cup.runtime.Symbol) CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-1)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-1)).value;
		int commaidentifiertempleft = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()).left;
		int commaidentifiertempright = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()).right;
		Node commaidentifiertemp = (Node)((java_cup.runtime.Symbol) CUP$LuaParser$stack.peek()).value;
		
            Node node = new Node(comma);
            node.addChildren(id);
            node.addChildren(commaidentifiertemp);
            RESULT = node;
        
              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("commaidentifiertemp",32, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-2)), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // expcommatemp ::= 
            {
              Node RESULT =null;
		 RESULT = new Node(); 
              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("expcommatemp",33, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // expcommatemp ::= COMMA exp expcommatemp 
            {
              Node RESULT =null;
		int commaleft = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-2)).left;
		int commaright = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-2)).right;
		Token comma = (Token)((java_cup.runtime.Symbol) CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-1)).right;
		Node exp = (Node)((java_cup.runtime.Symbol) CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-1)).value;
		int expcommatempleft = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()).left;
		int expcommatempright = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()).right;
		Node expcommatemp = (Node)((java_cup.runtime.Symbol) CUP$LuaParser$stack.peek()).value;
		
            // Node comma = new Node(comma);
            expcommatemp.addChildren(comma);
            expcommatemp.addChildren(exp);
            RESULT = expcommatemp;
        
              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("expcommatemp",33, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-2)), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // commaellipsistemp ::= 
            {
              Node RESULT =null;
		 RESULT = new Node(); 
              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("commaellipsistemp",35, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // commaellipsistemp ::= COMMA ELLIPSIS 
            {
              Node RESULT =null;
		int commaleft = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-1)).left;
		int commaright = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-1)).right;
		Token comma = (Token)((java_cup.runtime.Symbol) CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-1)).value;
		int ellipsisleft = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()).left;
		int ellipsisright = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()).right;
		Token ellipsis = (Token)((java_cup.runtime.Symbol) CUP$LuaParser$stack.peek()).value;
		
         Node comm = new Node(comma);
        //Node ell = new Node(ellipsis);
        comm.addChildren(ellipsis);
        RESULT = comm;
        
              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("commaellipsistemp",35, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-1)), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // fieldsep ::= SEMICOLON 
            {
              Node RESULT =null;
		int semicolonleft = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()).left;
		int semicolonright = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()).right;
		Token semicolon = (Token)((java_cup.runtime.Symbol) CUP$LuaParser$stack.peek()).value;
		
            RESULT = new Node(semicolon);

        
              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("fieldsep",19, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // fieldsep ::= COMMA 
            {
              Node RESULT =null;
		int commaleft = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()).left;
		int commaright = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()).right;
		Token comma = (Token)((java_cup.runtime.Symbol) CUP$LuaParser$stack.peek()).value;
		
            RESULT = new Node(comma);
        
              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("fieldsep",19, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // semicolontemp ::= 
            {
              Node RESULT =null;

              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("semicolontemp",22, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // semicolontemp ::= SEMICOLON 
            {
              Node RESULT =null;
		int semicolonleft = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()).left;
		int semicolonright = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()).right;
		Token semicolon = (Token)((java_cup.runtime.Symbol) CUP$LuaParser$stack.peek()).value;
		
            RESULT = new Node(semicolon);
        
              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("semicolontemp",22, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // unop ::= LENGTH 
            {
              Node RESULT =null;
		int lengthleft = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()).left;
		int lengthright = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()).right;
		Token length = (Token)((java_cup.runtime.Symbol) CUP$LuaParser$stack.peek()).value;
		
            RESULT = new Node(length);
        
              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("unop",21, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // unop ::= NOT 
            {
              Node RESULT =null;
		int notleft = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()).left;
		int notright = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()).right;
		Token not = (Token)((java_cup.runtime.Symbol) CUP$LuaParser$stack.peek()).value;
		
            RESULT = new Node(not);
        
              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("unop",21, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // unop ::= MINUS 
            {
              Node RESULT =null;
		int minusleft = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()).left;
		int minusright = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()).right;
		Token minus = (Token)((java_cup.runtime.Symbol) CUP$LuaParser$stack.peek()).value;
		
            RESULT = new Node(minus);
        
              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("unop",21, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // binop ::= OR 
            {
              Node RESULT =null;
		int orleft = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()).left;
		int orright = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()).right;
		Token or = (Token)((java_cup.runtime.Symbol) CUP$LuaParser$stack.peek()).value;
		
            RESULT = new Node(or);

        
              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("binop",20, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // binop ::= AND 
            {
              Node RESULT =null;
		int andleft = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()).left;
		int andright = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()).right;
		Token and = (Token)((java_cup.runtime.Symbol) CUP$LuaParser$stack.peek()).value;
		
            RESULT = new Node(and);

        
              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("binop",20, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // binop ::= DIFFERENT 
            {
              Node RESULT =null;
		int differentleft = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()).left;
		int differentright = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()).right;
		Token different = (Token)((java_cup.runtime.Symbol) CUP$LuaParser$stack.peek()).value;
		
            RESULT = new Node(different);
        
              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("binop",20, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // binop ::= EQUAL 
            {
              Node RESULT =null;
		int equalleft = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()).left;
		int equalright = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()).right;
		Token equal = (Token)((java_cup.runtime.Symbol) CUP$LuaParser$stack.peek()).value;
		
            RESULT = new Node(equal);

        
              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("binop",20, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // binop ::= GREATHER_THAN_EQUAL 
            {
              Node RESULT =null;
		int greather_than_equalleft = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()).left;
		int greather_than_equalright = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()).right;
		Token greather_than_equal = (Token)((java_cup.runtime.Symbol) CUP$LuaParser$stack.peek()).value;
		
            RESULT = new Node(greather_than_equal);
        
              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("binop",20, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // binop ::= GREATHER_THAN 
            {
              Node RESULT =null;
		int greather_thanleft = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()).left;
		int greather_thanright = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()).right;
		Token greather_than = (Token)((java_cup.runtime.Symbol) CUP$LuaParser$stack.peek()).value;
		
            RESULT = new Node(greather_than);
        
              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("binop",20, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // binop ::= LESS_THAN_EQUAL 
            {
              Node RESULT =null;
		int less_than_equalleft = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()).left;
		int less_than_equalright = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()).right;
		Token less_than_equal = (Token)((java_cup.runtime.Symbol) CUP$LuaParser$stack.peek()).value;
		
            RESULT = new Node(less_than_equal);
        
              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("binop",20, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // binop ::= LESS_THAN 
            {
              Node RESULT =null;
		int less_thanleft = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()).left;
		int less_thanright = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()).right;
		Token less_than = (Token)((java_cup.runtime.Symbol) CUP$LuaParser$stack.peek()).value;
		
            RESULT = new Node(less_than);
        
              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("binop",20, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // binop ::= TWO_PERIOD 
            {
              Node RESULT =null;
		int two_periodleft = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()).left;
		int two_periodright = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()).right;
		Token two_period = (Token)((java_cup.runtime.Symbol) CUP$LuaParser$stack.peek()).value;
		
            RESULT = new Node(two_period);
        
              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("binop",20, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // binop ::= PERCENT 
            {
              Node RESULT =null;
		int percentleft = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()).left;
		int percentright = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()).right;
		Token percent = (Token)((java_cup.runtime.Symbol) CUP$LuaParser$stack.peek()).value;
		
            RESULT = new Node(percent);
        
              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("binop",20, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // binop ::= UP_CARET 
            {
              Node RESULT =null;
		int up_caretleft = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()).left;
		int up_caretright = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()).right;
		Token up_caret = (Token)((java_cup.runtime.Symbol) CUP$LuaParser$stack.peek()).value;
		
            RESULT = new Node(up_caret);
        
              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("binop",20, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // binop ::= DIV 
            {
              Node RESULT =null;
		int divleft = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()).left;
		int divright = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()).right;
		Token div = (Token)((java_cup.runtime.Symbol) CUP$LuaParser$stack.peek()).value;
		
            RESULT = new Node(div);
        
              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("binop",20, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // binop ::= TIMES 
            {
              Node RESULT =null;
		int timesleft = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()).left;
		int timesright = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()).right;
		Token times = (Token)((java_cup.runtime.Symbol) CUP$LuaParser$stack.peek()).value;
		
            RESULT = new Node(times);
        
              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("binop",20, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // binop ::= MINUS 
            {
              Node RESULT =null;
		int minusleft = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()).left;
		int minusright = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()).right;
		Token minus = (Token)((java_cup.runtime.Symbol) CUP$LuaParser$stack.peek()).value;
		
            RESULT = new Node(minus);
        
              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("binop",20, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // binop ::= PLUS 
            {
              Node RESULT =null;
		int plusleft = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()).left;
		int plusright = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()).right;
		Token plus = (Token)((java_cup.runtime.Symbol) CUP$LuaParser$stack.peek()).value;
		
            RESULT = new Node(plus);
        
              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("binop",20, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // field ::= 
            {
              Node RESULT =null;
		 RESULT = new Node(); 
              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("field",18, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // field ::= exp 
            {
              Node RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()).right;
		Node exp = (Node)((java_cup.runtime.Symbol) CUP$LuaParser$stack.peek()).value;
		
          RESULT = exp;
        
              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("field",18, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // field ::= IDENTIFIER SIGN exp 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-2)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-2)).value;
		int signleft = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-1)).left;
		int signright = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-1)).right;
		Token sign = (Token)((java_cup.runtime.Symbol) CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-1)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()).right;
		Node exp = (Node)((java_cup.runtime.Symbol) CUP$LuaParser$stack.peek()).value;
		
            // Node id = new Node(id);
            // Node sgn = new Node(sign);
            exp.addChildren(id);
            exp.addChildren(sign);
            RESULT = exp;
        
              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("field",18, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-2)), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // field ::= OPEN_BRACKETS exp CLOSE_BRACKETS SIGN exp 
            {
              Node RESULT =null;
		int openBleft = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-4)).left;
		int openBright = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-4)).right;
		Token openB = (Token)((java_cup.runtime.Symbol) CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-4)).value;
		int exp1left = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-3)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-3)).right;
		Node exp1 = (Node)((java_cup.runtime.Symbol) CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-3)).value;
		int closeBleft = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-2)).left;
		int closeBright = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-2)).right;
		Token closeB = (Token)((java_cup.runtime.Symbol) CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-2)).value;
		int signleft = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-1)).left;
		int signright = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-1)).right;
		Token sign = (Token)((java_cup.runtime.Symbol) CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-1)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()).right;
		Node exp2 = (Node)((java_cup.runtime.Symbol) CUP$LuaParser$stack.peek()).value;
		
            exp1.addChildren(openB);
            exp1.addChildren(closeB);
            Node sgn = new Node(sign);
            sgn.addChildren(exp1);
            sgn.addChildren(exp2);
            RESULT = sgn;
        
              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("field",18, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-4)), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // fieldsepfieldtemp ::= 
            {
              Node RESULT =null;
		 RESULT = new Node(); 
              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("fieldsepfieldtemp",37, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // fieldsepfieldtemp ::= fieldsep field fieldsepfieldtemp 
            {
              Node RESULT =null;
		int fieldsepleft = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-2)).left;
		int fieldsepright = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-2)).right;
		Node fieldsep = (Node)((java_cup.runtime.Symbol) CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-2)).value;
		int fieldleft = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-1)).left;
		int fieldright = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-1)).right;
		Node field = (Node)((java_cup.runtime.Symbol) CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-1)).value;
		int fieldsepfieldtempleft = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()).left;
		int fieldsepfieldtempright = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()).right;
		Node fieldsepfieldtemp = (Node)((java_cup.runtime.Symbol) CUP$LuaParser$stack.peek()).value;
		
            fieldsepfieldtemp.addChildren(fieldsep);
            fieldsepfieldtemp.addChildren(field);
            RESULT = fieldsepfieldtemp;
        
              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("fieldsepfieldtemp",37, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-2)), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // fieldlist ::= field fieldsepfieldtemp 
            {
              Node RESULT =null;
		int fieldleft = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-1)).left;
		int fieldright = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-1)).right;
		Node field = (Node)((java_cup.runtime.Symbol) CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-1)).value;
		int fieldsepfieldtempleft = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()).left;
		int fieldsepfieldtempright = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()).right;
		Node fieldsepfieldtemp = (Node)((java_cup.runtime.Symbol) CUP$LuaParser$stack.peek()).value;
		
            fieldsepfieldtemp.addChildren(field);
            RESULT = fieldsepfieldtemp;
        
              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("fieldlist",17, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-1)), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // fieldlisttemp ::= fieldlist 
            {
              Node RESULT =null;
		int fieldlistleft = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()).left;
		int fieldlistright = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()).right;
		Node fieldlist = (Node)((java_cup.runtime.Symbol) CUP$LuaParser$stack.peek()).value;
		
            RESULT = fieldlist;
        
              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("fieldlisttemp",36, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // tableconstructor ::= OPEN_BRACES fieldlisttemp CLOSE_BRACES 
            {
              Node RESULT =null;
		int openBleft = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-2)).left;
		int openBright = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-2)).right;
		Token openB = (Token)((java_cup.runtime.Symbol) CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-2)).value;
		int fieldlisttempleft = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-1)).left;
		int fieldlisttempright = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-1)).right;
		Node fieldlisttemp = (Node)((java_cup.runtime.Symbol) CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-1)).value;
		int closeBleft = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()).left;
		int closeBright = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()).right;
		Token closeB = (Token)((java_cup.runtime.Symbol) CUP$LuaParser$stack.peek()).value;
		
            fieldlisttemp.addChildren(openB);
            fieldlisttemp.addChildren(closeB);
            RESULT = fieldlisttemp;
        
              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("tableconstructor",16, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-2)), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // parlist ::= ELLIPSIS 
            {
              Node RESULT =null;
		int ellipsisleft = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()).left;
		int ellipsisright = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()).right;
		Token ellipsis = (Token)((java_cup.runtime.Symbol) CUP$LuaParser$stack.peek()).value;
		
             RESULT = new Node(ellipsis);
        
              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("parlist",15, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // parlist ::= namelist commaellipsistemp 
            {
              Node RESULT =null;
		int namelistleft = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-1)).left;
		int namelistright = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-1)).right;
		Node namelist = (Node)((java_cup.runtime.Symbol) CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-1)).value;
		int commaellipsistempleft = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()).left;
		int commaellipsistempright = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()).right;
		Node commaellipsistemp = (Node)((java_cup.runtime.Symbol) CUP$LuaParser$stack.peek()).value;
		
            namelist.addChildren(commaellipsistemp);
            RESULT = namelist;
        
              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("parlist",15, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-1)), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // parlisttemp ::= 
            {
              Node RESULT =null;
		 RESULT = new Node(); 
              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("parlisttemp",34, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // parlisttemp ::= parlist 
            {
              Node RESULT =null;
		int parlistleft = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()).left;
		int parlistright = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()).right;
		Node parlist = (Node)((java_cup.runtime.Symbol) CUP$LuaParser$stack.peek()).value;
		
            RESULT = parlist;
        
              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("parlisttemp",34, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // function ::= FUNCTION funcbody 
            {
              Node RESULT =null;
		int functionleft = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-1)).left;
		int functionright = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-1)).right;
		Token function = (Token)((java_cup.runtime.Symbol) CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-1)).value;
		int funcbodyleft = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()).left;
		int funcbodyright = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()).right;
		Node funcbody = (Node)((java_cup.runtime.Symbol) CUP$LuaParser$stack.peek()).value;
		
                Node func = new Node(function);
                func.addChildren(funcbody);
                RESULT = func;
            
              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("function",13, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-1)), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // functioncalltemp ::= args 
            {
              Node RESULT =null;
		int argsleft = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()).right;
		Node args = (Node)((java_cup.runtime.Symbol) CUP$LuaParser$stack.peek()).value;
		
                RESULT = args;
            
              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("functioncalltemp",40, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // functioncalltemp ::= COLON IDENTIFIER args 
            {
              Node RESULT =null;
		int colonleft = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-2)).left;
		int colonright = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-2)).right;
		Token colon = (Token)((java_cup.runtime.Symbol) CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-1)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-1)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()).right;
		Node args = (Node)((java_cup.runtime.Symbol) CUP$LuaParser$stack.peek()).value;
		
                // Node colon = new Node(colon);
                Node ids = new Node(id);
                args.addChildren(colon);
                ids.addChildren(args);
                RESULT = ids;
            
              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("functioncalltemp",40, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-2)), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // functioncall ::= prefixexp functioncalltemp 
            {
              Node RESULT =null;
		int prefixexpleft = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-1)).left;
		int prefixexpright = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-1)).right;
		Node prefixexp = (Node)((java_cup.runtime.Symbol) CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-1)).value;
		int functioncalltempleft = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()).left;
		int functioncalltempright = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()).right;
		Node functioncalltemp = (Node)((java_cup.runtime.Symbol) CUP$LuaParser$stack.peek()).value;
		 
                functioncalltemp.addChildren(prefixexp);
                RESULT = functioncalltemp;
            
              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("functioncall",11, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-1)), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // explist ::= exp expcommatemp 
            {
              Node RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-1)).right;
		Node exp = (Node)((java_cup.runtime.Symbol) CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-1)).value;
		int expcommatempleft = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()).left;
		int expcommatempright = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()).right;
		Node expcommatemp = (Node)((java_cup.runtime.Symbol) CUP$LuaParser$stack.peek()).value;
		
            expcommatemp.addChildren(exp);
            RESULT = expcommatemp;
        
              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("explist",8, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-1)), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // namelist ::= IDENTIFIER commaidentifiertemp 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-1)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-1)).value;
		int commaidentifiertempleft = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()).left;
		int commaidentifiertempright = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()).right;
		Node commaidentifiertemp = (Node)((java_cup.runtime.Symbol) CUP$LuaParser$stack.peek()).value;
		
            Node node = new Node(id);
            node.addChildren(commaidentifiertemp);
            RESULT = node;
        
              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("namelist",7, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-1)), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // vartemp ::= OPEN_BRACKETS exp CLOSE_BRACKETS 
            {
              Node RESULT =null;
		int openBleft = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-2)).left;
		int openBright = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-2)).right;
		Token openB = (Token)((java_cup.runtime.Symbol) CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-1)).right;
		Node exp = (Node)((java_cup.runtime.Symbol) CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-1)).value;
		int closeBleft = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()).left;
		int closeBright = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()).right;
		Token closeB = (Token)((java_cup.runtime.Symbol) CUP$LuaParser$stack.peek()).value;
		
            exp.addChildren(openB);
            exp.addChildren(closeB);
            RESULT = exp;
        
              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("vartemp",41, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-2)), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // vartemp ::= PERIOD IDENTIFIER 
            {
              Node RESULT =null;
		int periodleft = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-1)).left;
		int periodright = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-1)).right;
		Token period = (Token)((java_cup.runtime.Symbol) CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$LuaParser$stack.peek()).value;
		
            Node p = new Node(period);
            // Node id = new Node(id);
            p.addChildren(id);
            RESULT = p;
        
              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("vartemp",41, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-1)), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // var ::= prefixexp vartemp 
            {
              Node RESULT =null;
		int prefixexpleft = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-1)).left;
		int prefixexpright = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-1)).right;
		Node prefixexp = (Node)((java_cup.runtime.Symbol) CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-1)).value;
		int vartempleft = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()).left;
		int vartempright = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()).right;
		Node vartemp = (Node)((java_cup.runtime.Symbol) CUP$LuaParser$stack.peek()).value;
		
        vartemp.addChildren(prefixexp);
        RESULT = vartemp;
    
              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("var",6, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-1)), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // var ::= IDENTIFIER 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$LuaParser$stack.peek()).value;
		
        RESULT = new Node(id);
    
              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("var",6, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // varlist ::= var commavartemp 
            {
              Node RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-1)).right;
		Node var = (Node)((java_cup.runtime.Symbol) CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-1)).value;
		int commavartempleft = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()).left;
		int commavartempright = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()).right;
		Node commavartemp = (Node)((java_cup.runtime.Symbol) CUP$LuaParser$stack.peek()).value;
		
            commavartemp.addChildren(var);
            RESULT = commavartemp;
        
              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("varlist",5, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-1)), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // twoperiodidentifertemp ::= 
            {
              Node RESULT =null;
		 RESULT = new Node(); 
              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("twoperiodidentifertemp",38, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // twoperiodidentifertemp ::= TWO_PERIOD IDENTIFIER 
            {
              Node RESULT =null;
		int twoperiodleft = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-1)).left;
		int twoperiodright = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-1)).right;
		Token twoperiod = (Token)((java_cup.runtime.Symbol) CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$LuaParser$stack.peek()).value;
		  
            //Node twoperiod = new Node(twoperiod);
            Node idx = new Node(id);
            idx.addChildren(twoperiod);
            RESULT = idx;
        
              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("twoperiodidentifertemp",38, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-1)), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // periodidentifiertemp ::= 
            {
              Node RESULT =null;
		 RESULT = new Node(); 
              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("periodidentifiertemp",30, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // periodidentifiertemp ::= PERIOD IDENTIFIER periodidentifiertemp 
            {
              Node RESULT =null;
		int periodleft = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-2)).left;
		int periodright = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-2)).right;
		Token period = (Token)((java_cup.runtime.Symbol) CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-1)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-1)).value;
		int periodidentifiertempleft = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()).left;
		int periodidentifiertempright = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()).right;
		Node periodidentifiertemp = (Node)((java_cup.runtime.Symbol) CUP$LuaParser$stack.peek()).value;
		
            //Node p = new Node(period);
            //Node id = Node(id);
            periodidentifiertemp.addChildren(period);
            periodidentifiertemp.addChildren(id);
            RESULT = periodidentifiertemp;
        
              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("periodidentifiertemp",30, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-2)), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // funcname ::= IDENTIFIER periodidentifiertemp twoperiodidentifertemp 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-2)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-2)).value;
		int periodidentifiertempleft = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-1)).left;
		int periodidentifiertempright = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-1)).right;
		Node periodidentifiertemp = (Node)((java_cup.runtime.Symbol) CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-1)).value;
		int twoperiodidentifertempleft = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()).left;
		int twoperiodidentifertempright = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()).right;
		Node twoperiodidentifertemp = (Node)((java_cup.runtime.Symbol) CUP$LuaParser$stack.peek()).value;
		
            Node node = new Node(id);
            node.addChildren(periodidentifiertemp);
            node.addChildren(twoperiodidentifertemp);
            RESULT = node;
        
              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("funcname",4, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-2)), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // explisttemp ::= 
            {
              Node RESULT =null;
		 RESULT = new Node(); 
              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("explisttemp",29, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // explisttemp ::= explist 
            {
              Node RESULT =null;
		int explistleft = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()).left;
		int explistright = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()).right;
		Node explist = (Node)((java_cup.runtime.Symbol) CUP$LuaParser$stack.peek()).value;
		
            RESULT = explist;
        
              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("explisttemp",29, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // laststat ::= BREAK 
            {
              Node RESULT =null;
		int bkleft = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()).left;
		int bkright = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()).right;
		Token bk = (Token)((java_cup.runtime.Symbol) CUP$LuaParser$stack.peek()).value;
		
            RESULT = new Node(bk);
        
              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("laststat",3, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // laststat ::= RETURN explisttemp 
            {
              Node RESULT =null;
		int retleft = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-1)).left;
		int retright = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-1)).right;
		Token ret = (Token)((java_cup.runtime.Symbol) CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-1)).value;
		int explisttempleft = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()).left;
		int explisttempright = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()).right;
		Node explisttemp = (Node)((java_cup.runtime.Symbol) CUP$LuaParser$stack.peek()).value;
		
            Node r = new Node(ret);
            r.addChildren(explisttemp);
            RESULT = r;
        
              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("laststat",3, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-1)), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // signexplisttemp ::= 
            {
              Node RESULT =null;
		 RESULT = new Node(); 
              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("signexplisttemp",28, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // signexplisttemp ::= SIGN explist 
            {
              Node RESULT =null;
		int signleft = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-1)).left;
		int signright = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-1)).right;
		Token sign = (Token)((java_cup.runtime.Symbol) CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-1)).value;
		int explistleft = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()).left;
		int explistright = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()).right;
		Node explist = (Node)((java_cup.runtime.Symbol) CUP$LuaParser$stack.peek()).value;
		
            Node sgn = new Node(sign);
            sgn.addChildren(explist);
            RESULT = sgn;
        
              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("signexplisttemp",28, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-1)), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // elsetemp ::= 
            {
              Node RESULT =null;

              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("elsetemp",26, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // elsetemp ::= ELSE block 
            {
              Node RESULT =null;
		int elsleft = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-1)).left;
		int elsright = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-1)).right;
		Token els = (Token)((java_cup.runtime.Symbol) CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-1)).value;
		int blockleft = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()).left;
		int blockright = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()).right;
		Node block = (Node)((java_cup.runtime.Symbol) CUP$LuaParser$stack.peek()).value;
		
            Node e = new Node(els);
            e.addChildren(block);
            RESULT = e;
        
              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("elsetemp",26, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-1)), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // elseiftemp ::= 
            {
              Node RESULT =null;
		 RESULT = new Node(); 
              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("elseiftemp",25, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // elseiftemp ::= ELSEIF exp THEN block elseiftemp 
            {
              Node RESULT =null;
		int elseifleft = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-4)).left;
		int elseifright = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-4)).right;
		Token elseif = (Token)((java_cup.runtime.Symbol) CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-4)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-3)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-3)).right;
		Node exp = (Node)((java_cup.runtime.Symbol) CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-3)).value;
		int thenleft = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-2)).left;
		int thenright = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-2)).right;
		Token then = (Token)((java_cup.runtime.Symbol) CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-2)).value;
		int blockleft = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-1)).left;
		int blockright = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-1)).right;
		Node block = (Node)((java_cup.runtime.Symbol) CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-1)).value;
		int elseiftempleft = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()).left;
		int elseiftempright = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()).right;
		Node elseiftemp = (Node)((java_cup.runtime.Symbol) CUP$LuaParser$stack.peek()).value;
		
            Node eif = new Node(elseif);
            Node t = new Node(then);
            eif.addChildren(exp);
            t.addChildren(block);
            t.addChildren(elseiftemp);
            eif.addChildren(t);
            RESULT = eif;
        
              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("elseiftemp",25, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-4)), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ifstatment ::= IF exp THEN block elseiftemp elsetemp END 
            {
              Node RESULT =null;
		int ifsleft = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-6)).left;
		int ifsright = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-6)).right;
		Token ifs = (Token)((java_cup.runtime.Symbol) CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-6)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-5)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-5)).right;
		Node exp = (Node)((java_cup.runtime.Symbol) CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-5)).value;
		int thenleft = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-4)).left;
		int thenright = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-4)).right;
		Token then = (Token)((java_cup.runtime.Symbol) CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-4)).value;
		int blockleft = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-3)).left;
		int blockright = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-3)).right;
		Node block = (Node)((java_cup.runtime.Symbol) CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-3)).value;
		int elseiftempleft = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-2)).left;
		int elseiftempright = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-2)).right;
		Node elseiftemp = (Node)((java_cup.runtime.Symbol) CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-2)).value;
		int elsetempleft = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-1)).left;
		int elsetempright = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-1)).right;
		Node elsetemp = (Node)((java_cup.runtime.Symbol) CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()).right;
		Token end = (Token)((java_cup.runtime.Symbol) CUP$LuaParser$stack.peek()).value;
		
            Node if1 = new Node(ifs);
            if1.addChildren(exp);
            Node t = new Node(then);
            t.addChildren(block);
            if1.addChildren(t);
            if1.addChildren(elseiftemp);
            if1.addChildren(elsetemp);
            if1.addChildren(end);
            RESULT = if1;
        
              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("ifstatment",39, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-6)), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // stat ::= LOCAL namelist signexplisttemp 
            {
              Node RESULT =null;
		int localleft = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-2)).left;
		int localright = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-2)).right;
		Token local = (Token)((java_cup.runtime.Symbol) CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-2)).value;
		int namelistleft = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-1)).left;
		int namelistright = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-1)).right;
		Node namelist = (Node)((java_cup.runtime.Symbol) CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-1)).value;
		int signexplisttempleft = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()).left;
		int signexplisttempright = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()).right;
		Node signexplisttemp = (Node)((java_cup.runtime.Symbol) CUP$LuaParser$stack.peek()).value;
		
            Node node = new Node(local);
            node.addChildren(namelist);
            node.addChildren(signexplisttemp);
            RESULT = node;
        
              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("stat",2, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-2)), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // stat ::= LOCAL FUNCTION IDENTIFIER funcbody 
            {
              Node RESULT =null;
		int localleft = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-3)).left;
		int localright = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-3)).right;
		Token local = (Token)((java_cup.runtime.Symbol) CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-3)).value;
		int funleft = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-2)).left;
		int funright = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-2)).right;
		Token fun = (Token)((java_cup.runtime.Symbol) CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-1)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-1)).value;
		int fbodyleft = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()).left;
		int fbodyright = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()).right;
		Node fbody = (Node)((java_cup.runtime.Symbol) CUP$LuaParser$stack.peek()).value;
		
            Node node = new Node(local);
            node.addChildren(fun);
            node.addChildren(id);
            node.addChildren(fbody);
            RESULT = node;
        
              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("stat",2, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-3)), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // stat ::= FUNCTION funcname funcbody 
            {
              Node RESULT =null;
		int funleft = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-2)).left;
		int funright = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-2)).right;
		Token fun = (Token)((java_cup.runtime.Symbol) CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-2)).value;
		int fnameleft = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-1)).left;
		int fnameright = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-1)).right;
		Node fname = (Node)((java_cup.runtime.Symbol) CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-1)).value;
		int fbodyleft = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()).left;
		int fbodyright = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()).right;
		Node fbody = (Node)((java_cup.runtime.Symbol) CUP$LuaParser$stack.peek()).value;
		
            Node node = new Node(fun);
            node.addChildren(fname);
            node.addChildren(fbody);
            RESULT = node;
        
              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("stat",2, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-2)), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // stat ::= FOR namelist IN explist DO block END 
            {
              Node RESULT =null;
		int frleft = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-6)).left;
		int frright = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-6)).right;
		Token fr = (Token)((java_cup.runtime.Symbol) CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-6)).value;
		int namelistleft = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-5)).left;
		int namelistright = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-5)).right;
		Node namelist = (Node)((java_cup.runtime.Symbol) CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-5)).value;
		int inleft = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-4)).left;
		int inright = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-4)).right;
		Token in = (Token)((java_cup.runtime.Symbol) CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-4)).value;
		int explistleft = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-3)).left;
		int explistright = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-3)).right;
		Node explist = (Node)((java_cup.runtime.Symbol) CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-2)).right;
		Token d = (Token)((java_cup.runtime.Symbol) CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-2)).value;
		int blockleft = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-1)).left;
		int blockright = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-1)).right;
		Node block = (Node)((java_cup.runtime.Symbol) CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()).right;
		Token end = (Token)((java_cup.runtime.Symbol) CUP$LuaParser$stack.peek()).value;
		
            Node node = new Node(fr);
            node.addChildren(namelist);
            node.addChildren(in);
            node.addChildren(explist);
            node.addChildren(d);
            node.addChildren(block);
            node.addChildren(end);
            RESULT = node;
        
              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("stat",2, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-6)), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // stat ::= FOR IDENTIFIER SIGN exp COMMA exp commaexptemp DO block END 
            {
              Node RESULT =null;
		int frleft = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-9)).left;
		int frright = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-9)).right;
		Token fr = (Token)((java_cup.runtime.Symbol) CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-9)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-8)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-8)).value;
		int signleft = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-7)).left;
		int signright = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-7)).right;
		Token sign = (Token)((java_cup.runtime.Symbol) CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-7)).value;
		int exp1left = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-6)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-6)).right;
		Node exp1 = (Node)((java_cup.runtime.Symbol) CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-6)).value;
		int commaleft = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-5)).left;
		int commaright = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-5)).right;
		Token comma = (Token)((java_cup.runtime.Symbol) CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-5)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-4)).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-4)).right;
		Node exp2 = (Node)((java_cup.runtime.Symbol) CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-4)).value;
		int commaexptempleft = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-3)).left;
		int commaexptempright = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-3)).right;
		Node commaexptemp = (Node)((java_cup.runtime.Symbol) CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-2)).right;
		Token d = (Token)((java_cup.runtime.Symbol) CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-2)).value;
		int blockleft = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-1)).left;
		int blockright = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-1)).right;
		Node block = (Node)((java_cup.runtime.Symbol) CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()).right;
		Token end = (Token)((java_cup.runtime.Symbol) CUP$LuaParser$stack.peek()).value;
		
            Node node = new Node(fr);
            node.addChildren(id);
            node.addChildren(sign);
            node.addChildren(exp1);
            node.addChildren(comma);
            node.addChildren(exp2);
            node.addChildren(commaexptemp);
            node.addChildren(d);
            node.addChildren(block);
            node.addChildren(end);
            RESULT = node;
        
              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("stat",2, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-9)), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // stat ::= ifstatment 
            {
              Node RESULT =null;
		int ifstatleft = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()).left;
		int ifstatright = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()).right;
		Node ifstat = (Node)((java_cup.runtime.Symbol) CUP$LuaParser$stack.peek()).value;
		
            RESULT = ifstat;
        
              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("stat",2, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // stat ::= REPEAT block UNTIL exp 
            {
              Node RESULT =null;
		int repeatleft = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-3)).left;
		int repeatright = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-3)).right;
		Token repeat = (Token)((java_cup.runtime.Symbol) CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-3)).value;
		int blockleft = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-2)).left;
		int blockright = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-2)).right;
		Node block = (Node)((java_cup.runtime.Symbol) CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-2)).value;
		int untilleft = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-1)).left;
		int untilright = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-1)).right;
		Token until = (Token)((java_cup.runtime.Symbol) CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-1)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()).right;
		Node exp = (Node)((java_cup.runtime.Symbol) CUP$LuaParser$stack.peek()).value;
		
            Node node = new Node(repeat);
            node.addChildren(block);
            node.addChildren(until);
            node.addChildren(exp);
            RESULT = node;
        
              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("stat",2, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-3)), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // stat ::= WHILE exp DO block END 
            {
              Node RESULT =null;
		int wlleft = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-4)).left;
		int wlright = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-4)).right;
		Token wl = (Token)((java_cup.runtime.Symbol) CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-4)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-3)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-3)).right;
		Node exp = (Node)((java_cup.runtime.Symbol) CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-2)).right;
		Token d = (Token)((java_cup.runtime.Symbol) CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-2)).value;
		int blockleft = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-1)).left;
		int blockright = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-1)).right;
		Node block = (Node)((java_cup.runtime.Symbol) CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()).right;
		Token end = (Token)((java_cup.runtime.Symbol) CUP$LuaParser$stack.peek()).value;
		
            Node wle = new Node(wl);
            Node d1 = new Node(d);
            //Node end = new Node(end);
            wle.addChildren(exp);
            d1.addChildren(block);
            wle.addChildren(d1);
            wle.addChildren(end);
            RESULT = wle;
        
              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("stat",2, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-4)), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // stat ::= DO block END 
            {
              Node RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-2)).right;
		Token d = (Token)((java_cup.runtime.Symbol) CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-2)).value;
		int blleft = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-1)).left;
		int blright = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-1)).right;
		Node bl = (Node)((java_cup.runtime.Symbol) CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-1)).value;
		int enleft = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()).left;
		int enright = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()).right;
		Token en = (Token)((java_cup.runtime.Symbol) CUP$LuaParser$stack.peek()).value;
		
            Node d1 = new Node(d);
            d1.addChildren(bl);
            d1.addChildren(en);
            RESULT = d1;
        
              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("stat",2, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-2)), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // stat ::= prefixexp 
            {
              Node RESULT =null;
		int preexpleft = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()).left;
		int preexpright = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()).right;
		Node preexp = (Node)((java_cup.runtime.Symbol) CUP$LuaParser$stack.peek()).value;
		
            RESULT = preexp;
        
              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("stat",2, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // stat ::= varlist SIGN explist 
            {
              Node RESULT =null;
		int vlistleft = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-2)).left;
		int vlistright = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-2)).right;
		Node vlist = (Node)((java_cup.runtime.Symbol) CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-2)).value;
		int signleft = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-1)).left;
		int signright = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-1)).right;
		Token sign = (Token)((java_cup.runtime.Symbol) CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-1)).value;
		int elistleft = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()).left;
		int elistright = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()).right;
		Node elist = (Node)((java_cup.runtime.Symbol) CUP$LuaParser$stack.peek()).value;
		
            Node sgn = new Node(sign);
            sgn.addChildren(vlist);
            sgn.addChildren(elist);
            RESULT = sgn;
        
              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("stat",2, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-2)), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // block ::= chuck 
            {
              Node RESULT =null;
		int chleft = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()).left;
		int chright = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()).right;
		Node ch = (Node)((java_cup.runtime.Symbol) CUP$LuaParser$stack.peek()).value;
		
            RESULT = ch;
        
              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("block",1, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // laststattemp ::= 
            {
              Node RESULT =null;
		 RESULT = new Node(); 
              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("laststattemp",24, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // laststattemp ::= laststat semicolontemp 
            {
              Node RESULT =null;
		int ltstatleft = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-1)).left;
		int ltstatright = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-1)).right;
		Node ltstat = (Node)((java_cup.runtime.Symbol) CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-1)).value;
		int smcltpleft = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()).left;
		int smcltpright = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()).right;
		Node smcltp = (Node)((java_cup.runtime.Symbol) CUP$LuaParser$stack.peek()).value;
		
            Node root = new Node(new Token("EOF"));
            root.addChildren(ltstat);
            root.addChildren(smcltp);
            RESULT = root;
        
              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("laststattemp",24, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-1)), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // tempchuck ::= 
            {
              Node RESULT =null;
		 RESULT = new Node(); 
              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("tempchuck",23, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // tempchuck ::= stat semicolontemp tempchuck 
            {
              Node RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-2)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-2)).right;
		Node st = (Node)((java_cup.runtime.Symbol) CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-2)).value;
		int smcltpleft = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-1)).left;
		int smcltpright = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-1)).right;
		Node smcltp = (Node)((java_cup.runtime.Symbol) CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-1)).value;
		int tpchuckleft = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()).left;
		int tpchuckright = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()).right;
		Node tpchuck = (Node)((java_cup.runtime.Symbol) CUP$LuaParser$stack.peek()).value;
		
            Node node = new Node(new Token("EOL"));
            node.addChildren(st);
            node.addChildren(smcltp);
            node.addChildren(tpchuck);
            RESULT = node;
        
              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("tempchuck",23, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-2)), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // chuck ::= tempchuck laststattemp 
            {
              Node RESULT =null;
		int tpchuckleft = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-1)).left;
		int tpchuckright = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-1)).right;
		Node tpchuck = (Node)((java_cup.runtime.Symbol) CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-1)).value;
		int ltstattpleft = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()).left;
		int ltstattpright = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()).right;
		Node ltstattp = (Node)((java_cup.runtime.Symbol) CUP$LuaParser$stack.peek()).value;
		
            Node root = new Node(new Token("EOF"));
            root.addChildren(tpchuck);
            root.addChildren(ltstattp);
            RESULT = root;
        
              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("chuck",0, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-1)), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // chucktemp ::= chuck 
            {
              Node RESULT =null;
		int chunckleft = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()).left;
		int chunckright = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()).right;
		Node chunck = (Node)((java_cup.runtime.Symbol) CUP$LuaParser$stack.peek()).value;
		
            System.out.println(chunck);
            RESULT = chunck;
        
              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("chucktemp",43, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= chucktemp EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-1)).right;
		Node start_val = (Node)((java_cup.runtime.Symbol) CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-1)).value;
		RESULT = start_val;
              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-1)), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$LuaParser$parser.done_parsing();
          return CUP$LuaParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

