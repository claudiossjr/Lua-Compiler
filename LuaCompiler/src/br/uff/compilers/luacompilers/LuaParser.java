
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Dec 18 11:21:18 BRST 2016
//----------------------------------------------------

package br.uff.compilers.luacompilers;

import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Dec 18 11:21:18 BRST 2016
  */
public class LuaParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public LuaParser() {super();}

  /** Constructor which sets the default scanner. */
  public LuaParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public LuaParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\144\000\002\002\004\000\002\002\004\000\002\031" +
    "\004\000\002\032\004\000\002\032\002\000\002\003\003" +
    "\000\002\030\003\000\002\030\002\000\002\004\005\000" +
    "\002\004\003\000\002\004\005\000\002\004\007\000\002" +
    "\004\006\000\002\004\011\000\002\004\014\000\002\004" +
    "\011\000\002\004\005\000\002\004\006\000\002\004\005" +
    "\000\002\033\006\000\002\034\004\000\002\034\002\000" +
    "\002\035\004\000\002\035\002\000\002\036\004\000\002" +
    "\036\002\000\002\005\004\000\002\005\003\000\002\037" +
    "\003\000\002\037\002\000\002\006\005\000\002\040\004" +
    "\000\002\051\004\000\002\051\002\000\002\007\004\000" +
    "\002\041\004\000\002\010\003\000\002\010\006\000\002" +
    "\010\005\000\002\011\004\000\002\042\004\000\002\012" +
    "\004\000\002\043\004\000\002\013\003\000\002\013\003" +
    "\000\002\013\003\000\002\013\003\000\002\013\003\000" +
    "\002\013\003\000\002\013\003\000\002\013\003\000\002" +
    "\013\003\000\002\013\005\000\002\013\004\000\002\014" +
    "\003\000\002\014\003\000\002\014\005\000\002\015\004" +
    "\000\002\015\006\000\002\016\005\000\002\016\003\000" +
    "\002\016\003\000\002\017\004\000\002\020\007\000\002" +
    "\044\003\000\002\044\002\000\002\021\004\000\002\021" +
    "\003\000\002\045\004\000\002\045\002\000\002\022\005" +
    "\000\002\046\003\000\002\046\002\000\002\023\005\000" +
    "\002\047\004\000\002\050\003\000\002\050\002\000\002" +
    "\024\007\000\002\024\005\000\002\024\003\000\002\025" +
    "\003\000\002\025\003\000\002\026\003\000\002\026\003" +
    "\000\002\026\003\000\002\026\003\000\002\026\003\000" +
    "\002\026\003\000\002\026\003\000\002\026\003\000\002" +
    "\026\003\000\002\026\003\000\002\026\003\000\002\026" +
    "\003\000\002\026\003\000\002\026\003\000\002\026\003" +
    "\000\002\027\003\000\002\027\003\000\002\027\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\262\000\024\004\021\006\006\007\005\010\014\014" +
    "\007\017\020\020\013\036\011\065\017\001\002\000\020" +
    "\002\ufffd\005\ufffd\012\ufffd\013\ufffd\016\ufffd\021\257\022" +
    "\260\001\002\000\024\004\021\006\006\007\005\010\014" +
    "\014\007\017\020\020\013\036\011\065\017\001\002\000" +
    "\034\017\041\023\044\024\054\025\042\026\051\034\032" +
    "\036\011\042\056\061\036\062\053\063\047\064\045\065" +
    "\017\001\002\000\004\065\230\001\002\000\036\002\ufff8" +
    "\005\ufff8\012\ufff8\013\ufff8\016\ufff8\021\ufff8\022\ufff8\027" +
    "\uffca\030\ufff8\032\uffca\034\uffca\036\uffca\050\uffca\064\uffca" +
    "\001\002\000\034\017\041\023\044\024\054\025\042\026" +
    "\051\034\032\036\011\042\056\061\036\062\053\063\047" +
    "\064\045\065\017\001\002\000\022\002\ufffa\005\ufffa\012" +
    "\ufffa\013\ufffa\016\ufffa\021\ufffa\022\ufffa\030\224\001\002" +
    "\000\006\017\215\065\114\001\002\000\034\017\041\023" +
    "\044\024\054\025\042\026\051\034\032\036\011\042\056" +
    "\061\036\062\053\063\047\064\045\065\017\001\002\000" +
    "\004\040\176\001\002\000\004\002\175\001\002\000\112" +
    "\002\uffdd\004\uffdd\005\uffdd\011\uffdd\012\uffdd\013\uffdd\016" +
    "\uffdd\021\uffdd\022\uffdd\027\uffdd\030\uffdd\031\uffdd\032\uffdd" +
    "\033\uffdd\034\uffdd\035\uffdd\036\uffdd\037\uffdd\040\uffdd\041" +
    "\uffdd\042\uffdd\043\uffdd\044\uffdd\045\uffdd\046\uffdd\047\uffdd" +
    "\050\uffdd\051\uffdd\052\uffdd\053\uffdd\054\uffdd\055\uffdd\056" +
    "\uffdd\057\uffdd\060\uffdd\064\uffdd\001\002\000\004\065\165" +
    "\001\002\000\024\004\021\006\006\007\005\010\014\014" +
    "\007\017\020\020\013\036\011\065\017\001\002\000\020" +
    "\027\uffcb\031\157\032\uffcb\034\uffcb\036\uffcb\050\uffcb\064" +
    "\uffcb\001\002\000\016\027\026\032\027\034\032\036\031" +
    "\050\030\064\024\001\002\000\110\002\uffc4\004\uffc4\005" +
    "\uffc4\011\uffc4\012\uffc4\013\uffc4\016\uffc4\021\uffc4\022\uffc4" +
    "\027\uffc4\030\uffc4\031\uffc4\032\uffc4\033\uffc4\034\uffc4\035" +
    "\uffc4\036\uffc4\037\uffc4\041\uffc4\042\uffc4\043\uffc4\044\uffc4" +
    "\045\uffc4\046\uffc4\047\uffc4\050\uffc4\051\uffc4\052\uffc4\053" +
    "\uffc4\054\uffc4\055\uffc4\056\uffc4\057\uffc4\060\uffc4\064\uffc4" +
    "\001\002\000\110\002\uffc8\004\uffc8\005\uffc8\011\uffc8\012" +
    "\uffc8\013\uffc8\016\uffc8\021\uffc8\022\uffc8\027\uffc8\030\uffc8" +
    "\031\uffc8\032\uffc8\033\uffc8\034\uffc8\035\uffc8\036\uffc8\037" +
    "\uffc8\041\uffc8\042\uffc8\043\uffc8\044\uffc8\045\uffc8\046\uffc8" +
    "\047\uffc8\050\uffc8\051\uffc8\052\uffc8\053\uffc8\054\uffc8\055" +
    "\uffc8\056\uffc8\057\uffc8\060\uffc8\064\uffc8\001\002\000\004" +
    "\065\155\001\002\000\034\017\041\023\044\024\054\025" +
    "\042\026\051\034\032\036\011\042\056\061\036\062\053" +
    "\063\047\064\045\065\017\001\002\000\004\065\152\001" +
    "\002\000\036\017\041\023\044\024\054\025\042\026\051" +
    "\034\032\036\011\037\uffe4\042\056\061\036\062\053\063" +
    "\047\064\045\065\017\001\002\000\040\017\041\023\044" +
    "\024\054\025\042\026\051\032\046\034\032\035\uffb9\036" +
    "\011\042\056\061\036\062\053\063\047\064\045\065\040" +
    "\001\002\000\110\002\uffc5\004\uffc5\005\uffc5\011\uffc5\012" +
    "\uffc5\013\uffc5\016\uffc5\021\uffc5\022\uffc5\027\uffc5\030\uffc5" +
    "\031\uffc5\032\uffc5\033\uffc5\034\uffc5\035\uffc5\036\uffc5\037" +
    "\uffc5\041\uffc5\042\uffc5\043\uffc5\044\uffc5\045\uffc5\046\uffc5" +
    "\047\uffc5\050\uffc5\051\uffc5\052\uffc5\053\uffc5\054\uffc5\055" +
    "\uffc5\056\uffc5\057\uffc5\060\uffc5\064\uffc5\001\002\000\006" +
    "\030\135\031\134\001\002\000\004\035\133\001\002\000" +
    "\034\017\uff9f\023\uff9f\024\uff9f\025\uff9f\026\uff9f\034\uff9f" +
    "\036\uff9f\042\uff9f\061\uff9f\062\uff9f\063\uff9f\064\uff9f\065" +
    "\uff9f\001\002\000\074\002\uffd0\004\uffd0\005\uffd0\011\uffd0" +
    "\012\uffd0\013\uffd0\016\uffd0\021\uffd0\022\uffd0\030\uffd0\031" +
    "\uffd0\033\uffd0\035\uffd0\037\uffd0\041\uffd0\042\uffd0\043\uffd0" +
    "\044\uffd0\045\uffd0\046\uffd0\047\uffd0\051\uffd0\052\uffd0\053" +
    "\uffd0\054\uffd0\055\uffd0\056\uffd0\057\uffd0\060\uffd0\001\002" +
    "\000\064\027\uffdd\030\uffdd\031\uffdd\032\uffdd\034\uffdd\035" +
    "\uffdd\036\uffdd\040\131\041\uffdd\042\uffdd\043\uffdd\044\uffdd" +
    "\045\uffdd\046\uffdd\047\uffdd\050\uffdd\051\uffdd\052\uffdd\053" +
    "\uffdd\054\uffdd\055\uffdd\056\uffdd\057\uffdd\060\uffdd\064\uffdd" +
    "\001\002\000\004\036\111\001\002\000\074\002\uffd4\004" +
    "\uffd4\005\uffd4\011\uffd4\012\uffd4\013\uffd4\016\uffd4\021\uffd4" +
    "\022\uffd4\030\uffd4\031\uffd4\033\uffd4\035\uffd4\037\uffd4\041" +
    "\uffd4\042\uffd4\043\uffd4\044\uffd4\045\uffd4\046\uffd4\047\uffd4" +
    "\051\uffd4\052\uffd4\053\uffd4\054\uffd4\055\uffd4\056\uffd4\057" +
    "\uffd4\060\uffd4\001\002\000\046\030\uffb2\031\uffb2\035\uffb2" +
    "\041\073\042\064\043\100\044\076\045\077\046\067\047" +
    "\065\051\072\052\066\053\102\054\075\055\070\056\071" +
    "\057\063\060\101\001\002\000\074\002\uffd6\004\uffd6\005" +
    "\uffd6\011\uffd6\012\uffd6\013\uffd6\016\uffd6\021\uffd6\022\uffd6" +
    "\030\uffd6\031\uffd6\033\uffd6\035\uffd6\037\uffd6\041\uffd6\042" +
    "\uffd6\043\uffd6\044\uffd6\045\uffd6\046\uffd6\047\uffd6\051\uffd6" +
    "\052\uffd6\053\uffd6\054\uffd6\055\uffd6\056\uffd6\057\uffd6\060" +
    "\uffd6\001\002\000\074\002\uffd2\004\uffd2\005\uffd2\011\uffd2" +
    "\012\uffd2\013\uffd2\016\uffd2\021\uffd2\022\uffd2\030\uffd2\031" +
    "\uffd2\033\uffd2\035\uffd2\037\uffd2\041\uffd2\042\uffd2\043\uffd2" +
    "\044\uffd2\045\uffd2\046\uffd2\047\uffd2\051\uffd2\052\uffd2\053" +
    "\uffd2\054\uffd2\055\uffd2\056\uffd2\057\uffd2\060\uffd2\001\002" +
    "\000\034\017\041\023\044\024\054\025\042\026\051\034" +
    "\032\036\011\042\056\061\036\062\053\063\047\064\045" +
    "\065\017\001\002\000\074\002\uffd3\004\uffd3\005\uffd3\011" +
    "\uffd3\012\uffd3\013\uffd3\016\uffd3\021\uffd3\022\uffd3\030\uffd3" +
    "\031\uffd3\033\uffd3\035\uffd3\037\uffd3\041\uffd3\042\uffd3\043" +
    "\uffd3\044\uffd3\045\uffd3\046\uffd3\047\uffd3\051\uffd3\052\uffd3" +
    "\053\uffd3\054\uffd3\055\uffd3\056\uffd3\057\uffd3\060\uffd3\001" +
    "\002\000\110\002\uffca\004\uffca\005\uffca\011\uffca\012\uffca" +
    "\013\uffca\016\uffca\021\uffca\022\uffca\027\uffca\030\uffca\031" +
    "\uffca\032\uffca\033\uffca\034\uffca\035\uffca\036\uffca\037\uffca" +
    "\041\uffca\042\uffca\043\uffca\044\uffca\045\uffca\046\uffca\047" +
    "\uffca\050\uffca\051\uffca\052\uffca\053\uffca\054\uffca\055\uffca" +
    "\056\uffca\057\uffca\060\uffca\064\uffca\001\002\000\074\002" +
    "\uffd1\004\uffd1\005\uffd1\011\uffd1\012\uffd1\013\uffd1\016\uffd1" +
    "\021\uffd1\022\uffd1\030\uffd1\031\uffd1\033\uffd1\035\uffd1\037" +
    "\uffd1\041\uffd1\042\uffd1\043\uffd1\044\uffd1\045\uffd1\046\uffd1" +
    "\047\uffd1\051\uffd1\052\uffd1\053\uffd1\054\uffd1\055\uffd1\056" +
    "\uffd1\057\uffd1\060\uffd1\001\002\000\034\017\041\023\044" +
    "\024\054\025\042\026\051\034\032\036\011\042\056\061" +
    "\036\062\053\063\047\064\045\065\017\001\002\000\034" +
    "\017\uff9e\023\uff9e\024\uff9e\025\uff9e\026\uff9e\034\uff9e\036" +
    "\uff9e\042\uff9e\061\uff9e\062\uff9e\063\uff9e\064\uff9e\065\uff9e" +
    "\001\002\000\074\002\uffd5\004\uffd5\005\uffd5\011\uffd5\012" +
    "\uffd5\013\uffd5\016\uffd5\021\uffd5\022\uffd5\030\uffd5\031\uffd5" +
    "\033\uffd5\035\uffd5\037\uffd5\041\uffd5\042\uffd5\043\uffd5\044" +
    "\uffd5\045\uffd5\046\uffd5\047\uffd5\051\uffd5\052\uffd5\053\uffd5" +
    "\054\uffd5\055\uffd5\056\uffd5\057\uffd5\060\uffd5\001\002\000" +
    "\074\002\uffce\004\uffce\005\uffce\011\uffce\012\uffce\013\uffce" +
    "\016\uffce\021\uffce\022\uffce\030\uffce\031\uffce\033\uffce\035" +
    "\uffce\037\uffce\041\uffce\042\uffce\043\uffce\044\uffce\045\uffce" +
    "\046\uffce\047\uffce\051\uffce\052\uffce\053\uffce\054\uffce\055" +
    "\uffce\056\uffce\057\uffce\060\uffce\001\002\000\034\017\uffa0" +
    "\023\uffa0\024\uffa0\025\uffa0\026\uffa0\034\uffa0\036\uffa0\042" +
    "\uffa0\061\uffa0\062\uffa0\063\uffa0\064\uffa0\065\uffa0\001\002" +
    "\000\110\002\uffcf\004\uffcf\005\uffcf\011\uffcf\012\uffcf\013" +
    "\uffcf\016\uffcf\021\uffcf\022\uffcf\027\026\030\uffcf\031\uffcf" +
    "\032\027\033\uffcf\034\032\035\uffcf\036\031\037\uffcf\041" +
    "\uffcf\042\uffcf\043\uffcf\044\uffcf\045\uffcf\046\uffcf\047\uffcf" +
    "\050\030\051\uffcf\052\uffcf\053\uffcf\054\uffcf\055\uffcf\056" +
    "\uffcf\057\uffcf\060\uffcf\064\024\001\002\000\004\035\uffba" +
    "\001\002\000\110\002\uffcb\004\uffcb\005\uffcb\011\uffcb\012" +
    "\uffcb\013\uffcb\016\uffcb\021\uffcb\022\uffcb\027\uffcb\030\uffcb" +
    "\031\uffcb\032\uffcb\033\uffcb\034\uffcb\035\uffcb\036\uffcb\037" +
    "\uffcb\041\uffcb\042\uffcb\043\uffcb\044\uffcb\045\uffcb\046\uffcb" +
    "\047\uffcb\050\uffcb\051\uffcb\052\uffcb\053\uffcb\054\uffcb\055" +
    "\uffcb\056\uffcb\057\uffcb\060\uffcb\064\uffcb\001\002\000\074" +
    "\002\uffcc\004\uffcc\005\uffcc\011\uffcc\012\uffcc\013\uffcc\016" +
    "\uffcc\021\uffcc\022\uffcc\030\uffcc\031\uffcc\033\uffcc\035\uffcc" +
    "\037\uffcc\041\073\042\064\043\100\044\076\045\077\046" +
    "\067\047\065\051\072\052\066\053\102\054\075\055\070" +
    "\056\071\057\063\060\101\001\002\000\034\017\uffa2\023" +
    "\uffa2\024\uffa2\025\uffa2\026\uffa2\034\uffa2\036\uffa2\042\uffa2" +
    "\061\uffa2\062\uffa2\063\uffa2\064\uffa2\065\uffa2\001\002\000" +
    "\034\017\uffae\023\uffae\024\uffae\025\uffae\026\uffae\034\uffae" +
    "\036\uffae\042\uffae\061\uffae\062\uffae\063\uffae\064\uffae\065" +
    "\uffae\001\002\000\034\017\uffa9\023\uffa9\024\uffa9\025\uffa9" +
    "\026\uffa9\034\uffa9\036\uffa9\042\uffa9\061\uffa9\062\uffa9\063" +
    "\uffa9\064\uffa9\065\uffa9\001\002\000\034\017\uffa7\023\uffa7" +
    "\024\uffa7\025\uffa7\026\uffa7\034\uffa7\036\uffa7\042\uffa7\061" +
    "\uffa7\062\uffa7\063\uffa7\064\uffa7\065\uffa7\001\002\000\034" +
    "\017\uffaa\023\uffaa\024\uffaa\025\uffaa\026\uffaa\034\uffaa\036" +
    "\uffaa\042\uffaa\061\uffaa\062\uffaa\063\uffaa\064\uffaa\065\uffaa" +
    "\001\002\000\034\017\uffa4\023\uffa4\024\uffa4\025\uffa4\026" +
    "\uffa4\034\uffa4\036\uffa4\042\uffa4\061\uffa4\062\uffa4\063\uffa4" +
    "\064\uffa4\065\uffa4\001\002\000\034\017\uffa3\023\uffa3\024" +
    "\uffa3\025\uffa3\026\uffa3\034\uffa3\036\uffa3\042\uffa3\061\uffa3" +
    "\062\uffa3\063\uffa3\064\uffa3\065\uffa3\001\002\000\034\017" +
    "\uffa8\023\uffa8\024\uffa8\025\uffa8\026\uffa8\034\uffa8\036\uffa8" +
    "\042\uffa8\061\uffa8\062\uffa8\063\uffa8\064\uffa8\065\uffa8\001" +
    "\002\000\034\017\uffaf\023\uffaf\024\uffaf\025\uffaf\026\uffaf" +
    "\034\uffaf\036\uffaf\042\uffaf\061\uffaf\062\uffaf\063\uffaf\064" +
    "\uffaf\065\uffaf\001\002\000\034\017\041\023\044\024\054" +
    "\025\042\026\051\034\032\036\011\042\056\061\036\062" +
    "\053\063\047\064\045\065\017\001\002\000\034\017\uffa5" +
    "\023\uffa5\024\uffa5\025\uffa5\026\uffa5\034\uffa5\036\uffa5\042" +
    "\uffa5\061\uffa5\062\uffa5\063\uffa5\064\uffa5\065\uffa5\001\002" +
    "\000\034\017\uffac\023\uffac\024\uffac\025\uffac\026\uffac\034" +
    "\uffac\036\uffac\042\uffac\061\uffac\062\uffac\063\uffac\064\uffac" +
    "\065\uffac\001\002\000\034\017\uffab\023\uffab\024\uffab\025" +
    "\uffab\026\uffab\034\uffab\036\uffab\042\uffab\061\uffab\062\uffab" +
    "\063\uffab\064\uffab\065\uffab\001\002\000\034\017\uffad\023" +
    "\uffad\024\uffad\025\uffad\026\uffad\034\uffad\036\uffad\042\uffad" +
    "\061\uffad\062\uffad\063\uffad\064\uffad\065\uffad\001\002\000" +
    "\034\017\uffa1\023\uffa1\024\uffa1\025\uffa1\026\uffa1\034\uffa1" +
    "\036\uffa1\042\uffa1\061\uffa1\062\uffa1\063\uffa1\064\uffa1\065" +
    "\uffa1\001\002\000\034\017\uffa6\023\uffa6\024\uffa6\025\uffa6" +
    "\026\uffa6\034\uffa6\036\uffa6\042\uffa6\061\uffa6\062\uffa6\063" +
    "\uffa6\064\uffa6\065\uffa6\001\002\000\074\002\uffcd\004\uffcd" +
    "\005\uffcd\011\uffcd\012\uffcd\013\uffcd\016\uffcd\021\uffcd\022" +
    "\uffcd\030\uffcd\031\uffcd\033\uffcd\035\uffcd\037\uffcd\041\073" +
    "\042\064\043\100\044\076\045\077\046\067\047\065\051" +
    "\072\052\066\053\102\054\075\055\070\056\071\057\063" +
    "\060\101\001\002\000\042\033\105\041\073\042\064\043" +
    "\100\044\076\045\077\046\067\047\065\051\072\052\066" +
    "\053\102\054\075\055\070\056\071\057\063\060\101\001" +
    "\002\000\004\040\106\001\002\000\034\017\041\023\044" +
    "\024\054\025\042\026\051\034\032\036\011\042\056\061" +
    "\036\062\053\063\047\064\045\065\017\001\002\000\046" +
    "\030\uffb4\031\uffb4\035\uffb4\041\073\042\064\043\100\044" +
    "\076\045\077\046\067\047\065\051\072\052\066\053\102" +
    "\054\075\055\070\056\071\057\063\060\101\001\002\000" +
    "\074\002\uffc3\004\uffc3\005\uffc3\011\uffc3\012\uffc3\013\uffc3" +
    "\016\uffc3\021\uffc3\022\uffc3\030\uffc3\031\uffc3\033\uffc3\035" +
    "\uffc3\037\uffc3\041\uffc3\042\uffc3\043\uffc3\044\uffc3\045\uffc3" +
    "\046\uffc3\047\uffc3\051\uffc3\052\uffc3\053\uffc3\054\uffc3\055" +
    "\uffc3\056\uffc3\057\uffc3\060\uffc3\001\002\000\010\026\115" +
    "\037\uffc0\065\114\001\002\000\006\031\126\037\uffbc\001" +
    "\002\000\004\037\122\001\002\000\004\031\117\001\002" +
    "\000\004\037\uffbe\001\002\000\004\037\uffc1\001\002\000" +
    "\004\065\121\001\002\000\032\002\uffda\005\uffda\012\uffda" +
    "\013\uffda\015\uffda\016\uffda\021\uffda\022\uffda\030\uffda\031" +
    "\uffda\037\uffda\040\uffda\001\002\000\032\002\uffd9\005\uffd9" +
    "\012\uffd9\013\uffd9\015\uffd9\016\uffd9\021\uffd9\022\uffd9\030" +
    "\uffd9\031\uffd9\037\uffd9\040\uffd9\001\002\000\024\004\021" +
    "\006\006\007\005\010\014\014\007\017\020\020\013\036" +
    "\011\065\017\001\002\000\004\005\125\001\002\000\012" +
    "\005\ufffc\012\ufffc\013\ufffc\016\ufffc\001\002\000\074\002" +
    "\uffc2\004\uffc2\005\uffc2\011\uffc2\012\uffc2\013\uffc2\016\uffc2" +
    "\021\uffc2\022\uffc2\030\uffc2\031\uffc2\033\uffc2\035\uffc2\037" +
    "\uffc2\041\uffc2\042\uffc2\043\uffc2\044\uffc2\045\uffc2\046\uffc2" +
    "\047\uffc2\051\uffc2\052\uffc2\053\uffc2\054\uffc2\055\uffc2\056" +
    "\uffc2\057\uffc2\060\uffc2\001\002\000\004\026\130\001\002" +
    "\000\004\037\uffbf\001\002\000\004\037\uffbd\001\002\000" +
    "\034\017\041\023\044\024\054\025\042\026\051\034\032" +
    "\036\011\042\056\061\036\062\053\063\047\064\045\065" +
    "\017\001\002\000\046\030\uffb3\031\uffb3\035\uffb3\041\073" +
    "\042\064\043\100\044\076\045\077\046\067\047\065\051" +
    "\072\052\066\053\102\054\075\055\070\056\071\057\063" +
    "\060\101\001\002\000\110\002\uffbb\004\uffbb\005\uffbb\011" +
    "\uffbb\012\uffbb\013\uffbb\016\uffbb\021\uffbb\022\uffbb\027\uffbb" +
    "\030\uffbb\031\uffbb\032\uffbb\033\uffbb\034\uffbb\035\uffbb\036" +
    "\uffbb\037\uffbb\041\uffbb\042\uffbb\043\uffbb\044\uffbb\045\uffbb" +
    "\046\uffbb\047\uffbb\050\uffbb\051\uffbb\052\uffbb\053\uffbb\054" +
    "\uffbb\055\uffbb\056\uffbb\057\uffbb\060\uffbb\064\uffbb\001\002" +
    "\000\040\017\uffb1\023\uffb1\024\uffb1\025\uffb1\026\uffb1\032" +
    "\uffb1\034\uffb1\035\uffb1\036\uffb1\042\uffb1\061\uffb1\062\uffb1" +
    "\063\uffb1\064\uffb1\065\uffb1\001\002\000\040\017\uffb0\023" +
    "\uffb0\024\uffb0\025\uffb0\026\uffb0\032\uffb0\034\uffb0\035\uffb0" +
    "\036\uffb0\042\uffb0\061\uffb0\062\uffb0\063\uffb0\064\uffb0\065" +
    "\uffb0\001\002\000\010\030\135\031\134\035\uffb5\001\002" +
    "\000\036\017\041\023\044\024\054\025\042\026\051\032" +
    "\046\034\032\036\011\042\056\061\036\062\053\063\047" +
    "\064\045\065\040\001\002\000\010\030\uffb7\031\uffb7\035" +
    "\uffb7\001\002\000\004\035\uffb8\001\002\000\004\035\uffb6" +
    "\001\002\000\004\037\151\001\002\000\020\002\uffe5\005" +
    "\uffe5\012\uffe5\013\uffe5\016\uffe5\030\uffe5\037\uffe5\001\002" +
    "\000\034\017\041\023\044\024\054\025\042\026\051\034" +
    "\032\036\011\042\056\061\036\062\053\063\047\064\045" +
    "\065\017\001\002\000\042\031\147\041\073\042\064\043" +
    "\100\044\076\045\077\046\067\047\065\051\072\052\066" +
    "\053\102\054\075\055\070\056\071\057\063\060\101\001" +
    "\002\000\034\017\uffd7\023\uffd7\024\uffd7\025\uffd7\026\uffd7" +
    "\034\uffd7\036\uffd7\042\uffd7\061\uffd7\062\uffd7\063\uffd7\064" +
    "\uffd7\065\uffd7\001\002\000\064\002\uffd8\004\uffd8\005\uffd8" +
    "\012\uffd8\013\uffd8\016\uffd8\021\uffd8\022\uffd8\030\uffd8\037" +
    "\uffd8\041\073\042\064\043\100\044\076\045\077\046\067" +
    "\047\065\051\072\052\066\053\102\054\075\055\070\056" +
    "\071\057\063\060\101\001\002\000\110\002\uffc6\004\uffc6" +
    "\005\uffc6\011\uffc6\012\uffc6\013\uffc6\016\uffc6\021\uffc6\022" +
    "\uffc6\027\uffc6\030\uffc6\031\uffc6\032\uffc6\033\uffc6\034\uffc6" +
    "\035\uffc6\036\uffc6\037\uffc6\041\uffc6\042\uffc6\043\uffc6\044" +
    "\uffc6\045\uffc6\046\uffc6\047\uffc6\050\uffc6\051\uffc6\052\uffc6" +
    "\053\uffc6\054\uffc6\055\uffc6\056\uffc6\057\uffc6\060\uffc6\064" +
    "\uffc6\001\002\000\112\002\uffdb\004\uffdb\005\uffdb\011\uffdb" +
    "\012\uffdb\013\uffdb\016\uffdb\021\uffdb\022\uffdb\027\uffdb\030" +
    "\uffdb\031\uffdb\032\uffdb\033\uffdb\034\uffdb\035\uffdb\036\uffdb" +
    "\037\uffdb\040\uffdb\041\uffdb\042\uffdb\043\uffdb\044\uffdb\045" +
    "\uffdb\046\uffdb\047\uffdb\050\uffdb\051\uffdb\052\uffdb\053\uffdb" +
    "\054\uffdb\055\uffdb\056\uffdb\057\uffdb\060\uffdb\064\uffdb\001" +
    "\002\000\042\033\154\041\073\042\064\043\100\044\076" +
    "\045\077\046\067\047\065\051\072\052\066\053\102\054" +
    "\075\055\070\056\071\057\063\060\101\001\002\000\112" +
    "\002\uffdc\004\uffdc\005\uffdc\011\uffdc\012\uffdc\013\uffdc\016" +
    "\uffdc\021\uffdc\022\uffdc\027\uffdc\030\uffdc\031\uffdc\032\uffdc" +
    "\033\uffdc\034\uffdc\035\uffdc\036\uffdc\037\uffdc\040\uffdc\041" +
    "\uffdc\042\uffdc\043\uffdc\044\uffdc\045\uffdc\046\uffdc\047\uffdc" +
    "\050\uffdc\051\uffdc\052\uffdc\053\uffdc\054\uffdc\055\uffdc\056" +
    "\uffdc\057\uffdc\060\uffdc\064\uffdc\001\002\000\010\034\032" +
    "\036\031\064\024\001\002\000\110\002\uffc7\004\uffc7\005" +
    "\uffc7\011\uffc7\012\uffc7\013\uffc7\016\uffc7\021\uffc7\022\uffc7" +
    "\027\uffc7\030\uffc7\031\uffc7\032\uffc7\033\uffc7\034\uffc7\035" +
    "\uffc7\036\uffc7\037\uffc7\041\uffc7\042\uffc7\043\uffc7\044\uffc7" +
    "\045\uffc7\046\uffc7\047\uffc7\050\uffc7\051\uffc7\052\uffc7\053" +
    "\uffc7\054\uffc7\055\uffc7\056\uffc7\057\uffc7\060\uffc7\064\uffc7" +
    "\001\002\000\006\036\011\065\017\001\002\000\004\040" +
    "\uffdf\001\002\000\020\027\uffcb\032\uffcb\034\uffcb\036\uffcb" +
    "\040\uffde\050\uffcb\064\uffcb\001\002\000\004\005\163\001" +
    "\002\000\022\002\ufff7\005\ufff7\012\ufff7\013\ufff7\016\ufff7" +
    "\021\ufff7\022\ufff7\030\ufff7\001\002\000\004\036\111\001" +
    "\002\000\004\050\167\001\002\000\006\036\uffe0\047\171" +
    "\001\002\000\004\065\170\001\002\000\006\036\uffe2\047" +
    "\uffe2\001\002\000\004\065\173\001\002\000\004\036\uffe3" +
    "\001\002\000\004\036\uffe1\001\002\000\022\002\ufff1\005" +
    "\ufff1\012\ufff1\013\ufff1\016\ufff1\021\ufff1\022\ufff1\030\ufff1" +
    "\001\002\000\004\002\001\001\002\000\034\017\041\023" +
    "\044\024\054\025\042\026\051\034\032\036\011\042\056" +
    "\061\036\062\053\063\047\064\045\065\017\001\002\000" +
    "\022\002\ufff9\005\ufff9\012\ufff9\013\ufff9\016\ufff9\021\ufff9" +
    "\022\ufff9\030\ufff9\001\002\000\042\011\201\041\073\042" +
    "\064\043\100\044\076\045\077\046\067\047\065\051\072" +
    "\052\066\053\102\054\075\055\070\056\071\057\063\060" +
    "\101\001\002\000\024\004\021\006\006\007\005\010\014" +
    "\014\007\017\020\020\013\036\011\065\017\001\002\000" +
    "\004\013\204\001\002\000\006\005\uffec\012\210\001\002" +
    "\000\034\017\041\023\044\024\054\025\042\026\051\034" +
    "\032\036\011\042\056\061\036\062\053\063\047\064\045" +
    "\065\017\001\002\000\042\011\206\041\073\042\064\043" +
    "\100\044\076\045\077\046\067\047\065\051\072\052\066" +
    "\053\102\054\075\055\070\056\071\057\063\060\101\001" +
    "\002\000\024\004\021\006\006\007\005\010\014\014\007" +
    "\017\020\020\013\036\011\065\017\001\002\000\006\005" +
    "\uffee\012\uffee\001\002\000\024\004\021\006\006\007\005" +
    "\010\014\014\007\017\020\020\013\036\011\065\017\001" +
    "\002\000\004\005\212\001\002\000\022\002\ufff4\005\ufff4" +
    "\012\ufff4\013\ufff4\016\ufff4\021\ufff4\022\ufff4\030\ufff4\001" +
    "\002\000\004\005\uffed\001\002\000\024\002\uffe8\005\uffe8" +
    "\012\uffe8\013\uffe8\016\uffe8\021\uffe8\022\uffe8\030\uffe8\040" +
    "\221\001\002\000\004\065\216\001\002\000\004\036\111" +
    "\001\002\000\022\002\ufff0\005\ufff0\012\ufff0\013\ufff0\016" +
    "\ufff0\021\ufff0\022\ufff0\030\ufff0\001\002\000\022\002\uffef" +
    "\005\uffef\012\uffef\013\uffef\016\uffef\021\uffef\022\uffef\030" +
    "\uffef\001\002\000\034\017\041\023\044\024\054\025\042" +
    "\026\051\034\032\036\011\042\056\061\036\062\053\063" +
    "\047\064\045\065\017\001\002\000\022\002\uffe9\005\uffe9" +
    "\012\uffe9\013\uffe9\016\uffe9\021\uffe9\022\uffe9\030\uffe9\001" +
    "\002\000\020\002\uffff\005\uffff\012\uffff\013\uffff\016\uffff" +
    "\021\uffff\022\uffff\001\002\000\020\002\ufffb\005\ufffb\012" +
    "\ufffb\013\ufffb\016\ufffb\021\ufffb\022\ufffb\001\002\000\042" +
    "\037\226\041\073\042\064\043\100\044\076\045\077\046" +
    "\067\047\065\051\072\052\066\053\102\054\075\055\070" +
    "\056\071\057\063\060\101\001\002\000\110\002\uffc9\004" +
    "\uffc9\005\uffc9\011\uffc9\012\uffc9\013\uffc9\016\uffc9\021\uffc9" +
    "\022\uffc9\027\uffc9\030\uffc9\031\uffc9\032\uffc9\033\uffc9\034" +
    "\uffc9\035\uffc9\036\uffc9\037\uffc9\041\uffc9\042\uffc9\043\uffc9" +
    "\044\uffc9\045\uffc9\046\uffc9\047\uffc9\050\uffc9\051\uffc9\052" +
    "\uffc9\053\uffc9\054\uffc9\055\uffc9\056\uffc9\057\uffc9\060\uffc9" +
    "\064\uffc9\001\002\000\004\015\243\001\002\000\006\031" +
    "\117\040\231\001\002\000\034\017\041\023\044\024\054" +
    "\025\042\026\051\034\032\036\011\042\056\061\036\062" +
    "\053\063\047\064\045\065\017\001\002\000\042\031\233" +
    "\041\073\042\064\043\100\044\076\045\077\046\067\047" +
    "\065\051\072\052\066\053\102\054\075\055\070\056\071" +
    "\057\063\060\101\001\002\000\034\017\041\023\044\024" +
    "\054\025\042\026\051\034\032\036\011\042\056\061\036" +
    "\062\053\063\047\064\045\065\017\001\002\000\044\004" +
    "\uffea\031\235\041\073\042\064\043\100\044\076\045\077" +
    "\046\067\047\065\051\072\052\066\053\102\054\075\055" +
    "\070\056\071\057\063\060\101\001\002\000\034\017\041" +
    "\023\044\024\054\025\042\026\051\034\032\036\011\042" +
    "\056\061\036\062\053\063\047\064\045\065\017\001\002" +
    "\000\004\004\237\001\002\000\024\004\021\006\006\007" +
    "\005\010\014\014\007\017\020\020\013\036\011\065\017" +
    "\001\002\000\004\005\241\001\002\000\022\002\ufff3\005" +
    "\ufff3\012\ufff3\013\ufff3\016\ufff3\021\ufff3\022\ufff3\030\ufff3" +
    "\001\002\000\042\004\uffeb\041\073\042\064\043\100\044" +
    "\076\045\077\046\067\047\065\051\072\052\066\053\102" +
    "\054\075\055\070\056\071\057\063\060\101\001\002\000" +
    "\034\017\041\023\044\024\054\025\042\026\051\034\032" +
    "\036\011\042\056\061\036\062\053\063\047\064\045\065" +
    "\017\001\002\000\004\004\245\001\002\000\024\004\021" +
    "\006\006\007\005\010\014\014\007\017\020\020\013\036" +
    "\011\065\017\001\002\000\004\005\247\001\002\000\022" +
    "\002\ufff2\005\ufff2\012\ufff2\013\ufff2\016\ufff2\021\ufff2\022" +
    "\ufff2\030\ufff2\001\002\000\042\004\251\041\073\042\064" +
    "\043\100\044\076\045\077\046\067\047\065\051\072\052" +
    "\066\053\102\054\075\055\070\056\071\057\063\060\101" +
    "\001\002\000\024\004\021\006\006\007\005\010\014\014" +
    "\007\017\020\020\013\036\011\065\017\001\002\000\004" +
    "\005\253\001\002\000\022\002\ufff6\005\ufff6\012\ufff6\013" +
    "\ufff6\016\ufff6\021\ufff6\022\ufff6\030\ufff6\001\002\000\004" +
    "\016\255\001\002\000\034\017\041\023\044\024\054\025" +
    "\042\026\051\034\032\036\011\042\056\061\036\062\053" +
    "\063\047\064\045\065\017\001\002\000\060\002\ufff5\005" +
    "\ufff5\012\ufff5\013\ufff5\016\ufff5\021\ufff5\022\ufff5\030\ufff5" +
    "\041\073\042\064\043\100\044\076\045\077\046\067\047" +
    "\065\051\072\052\066\053\102\054\075\055\070\056\071" +
    "\057\063\060\101\001\002\000\050\002\uffe4\005\uffe4\012" +
    "\uffe4\013\uffe4\016\uffe4\017\041\023\044\024\054\025\042" +
    "\026\051\030\uffe4\034\032\036\011\042\056\061\036\062" +
    "\053\063\047\064\045\065\017\001\002\000\016\002\uffe6" +
    "\005\uffe6\012\uffe6\013\uffe6\016\uffe6\030\uffe6\001\002\000" +
    "\016\002\ufffa\005\ufffa\012\ufffa\013\ufffa\016\ufffa\030\224" +
    "\001\002\000\014\002\000\005\000\012\000\013\000\016" +
    "\000\001\002\000\014\002\ufffe\005\ufffe\012\ufffe\013\ufffe" +
    "\016\ufffe\001\002\000\016\002\uffe7\005\uffe7\012\uffe7\013" +
    "\uffe7\016\uffe7\030\uffe7\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\262\000\020\002\015\004\011\007\014\010\021\014" +
    "\022\015\007\031\003\001\001\000\006\005\260\032\261" +
    "\001\001\000\022\002\123\003\253\004\011\007\014\010" +
    "\021\014\022\015\007\031\003\001\001\000\020\010\060" +
    "\013\247\014\056\015\047\017\036\022\054\027\051\001" +
    "\001\000\004\011\226\001\001\000\002\001\001\000\020" +
    "\010\060\013\224\014\056\015\047\017\036\022\054\027" +
    "\051\001\001\000\004\030\222\001\001\000\004\011\213" +
    "\001\001\000\020\010\060\013\177\014\056\015\047\017" +
    "\036\022\054\027\051\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\006\163\001\001\000" +
    "\022\002\123\003\161\004\011\007\014\010\021\014\022" +
    "\015\007\031\003\001\001\000\004\041\157\001\001\000" +
    "\006\016\024\022\032\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\010\060\013\152\014" +
    "\056\015\047\017\036\022\054\027\051\001\001\000\002" +
    "\001\001\000\026\010\060\012\143\013\145\014\056\015" +
    "\047\017\036\022\054\027\051\037\142\043\144\001\001" +
    "\000\026\010\060\013\042\014\056\015\047\017\036\022" +
    "\054\023\057\024\033\027\051\046\034\001\001\000\002" +
    "\001\001\000\006\025\136\047\135\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\020\107\001\001\000\002\001\001\000\004\026" +
    "\073\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\010\060\013\103\014\056\015\047\017\036\022\054\027" +
    "\051\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\010\060\013\061\014\056\015\047\017" +
    "\036\022\054\027\051\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\016" +
    "\024\022\032\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\026\073\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\010\060\013\102\014\056\015\047" +
    "\017\036\022\054\027\051\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\026\073\001\001\000" +
    "\004\026\073\001\001\000\002\001\001\000\020\010\060" +
    "\013\106\014\056\015\047\017\036\022\054\027\051\001" +
    "\001\000\004\026\073\001\001\000\002\001\001\000\010" +
    "\011\111\021\115\044\112\001\001\000\004\045\126\001" +
    "\001\000\002\001\001\000\004\042\117\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\002\123\003\122\004\011" +
    "\007\014\010\021\014\022\015\007\031\003\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\010" +
    "\060\013\131\014\056\015\047\017\036\022\054\027\051" +
    "\001\001\000\004\026\073\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\025\141\050\140" +
    "\001\001\000\022\010\060\013\042\014\056\015\047\017" +
    "\036\022\054\024\137\027\051\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\010\060\013\147\014\056\015\047" +
    "\017\036\022\054\027\051\001\001\000\004\026\073\001" +
    "\001\000\002\001\001\000\004\026\073\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\026\073\001\001\000" +
    "\002\001\001\000\006\016\155\022\032\001\001\000\002" +
    "\001\001\000\010\010\160\014\022\015\047\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\020\173\001\001\000\004\040\165\001" +
    "\001\000\004\051\171\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\010\060" +
    "\012\176\013\145\014\056\015\047\017\036\022\054\027" +
    "\051\043\144\001\001\000\002\001\001\000\004\026\073" +
    "\001\001\000\022\002\123\003\201\004\011\007\014\010" +
    "\021\014\022\015\007\031\003\001\001\000\004\033\202" +
    "\001\001\000\004\034\210\001\001\000\020\010\060\013" +
    "\204\014\056\015\047\017\036\022\054\027\051\001\001" +
    "\000\004\026\073\001\001\000\022\002\123\003\206\004" +
    "\011\007\014\010\021\014\022\015\007\031\003\001\001" +
    "\000\002\001\001\000\022\002\123\003\212\004\011\007" +
    "\014\010\021\014\022\015\007\031\003\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\036" +
    "\217\001\001\000\002\001\001\000\004\020\216\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\010\060\012" +
    "\221\013\145\014\056\015\047\017\036\022\054\027\051" +
    "\043\144\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\026\073\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\042\117\001\001\000\020\010" +
    "\060\013\231\014\056\015\047\017\036\022\054\027\051" +
    "\001\001\000\004\026\073\001\001\000\020\010\060\013" +
    "\233\014\056\015\047\017\036\022\054\027\051\001\001" +
    "\000\006\026\073\035\235\001\001\000\020\010\060\013" +
    "\241\014\056\015\047\017\036\022\054\027\051\001\001" +
    "\000\002\001\001\000\022\002\123\003\237\004\011\007" +
    "\014\010\021\014\022\015\007\031\003\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\026\073\001\001\000" +
    "\024\010\060\012\243\013\145\014\056\015\047\017\036" +
    "\022\054\027\051\043\144\001\001\000\002\001\001\000" +
    "\022\002\123\003\245\004\011\007\014\010\021\014\022" +
    "\015\007\031\003\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\026\073\001\001\000\022\002\123\003\251" +
    "\004\011\007\014\010\021\014\022\015\007\031\003\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\010\060\013\255\014\056\015\047\017\036\022" +
    "\054\027\051\001\001\000\004\026\073\001\001\000\026" +
    "\010\060\012\143\013\145\014\056\015\047\017\036\022" +
    "\054\027\051\037\263\043\144\001\001\000\002\001\001" +
    "\000\004\030\262\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$LuaParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$LuaParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$LuaParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    // Funções chamadas em erros ///////////////////////////////////////////////////////////////////////////
    public void syntax_error(Symbol s){ 
        System.out.println("\nOcorreu um erro na linha " + (s.right) +", coluna "+s.left+ ". Identificador "
        +s.value + " não reconhecido." );
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        System.out.println("\nOcorreu um erro na linha " + (s.right)+ ", coluna "+s.left+". Identificador " +
        s.value + " não reconhecido.");
    }
    ////////////////////////////////////////////////////////////////////////////////////////////////////////

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$LuaParser$actions {
  private final LuaParser parser;

  /** Constructor */
  CUP$LuaParser$actions(LuaParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$LuaParser$do_action(
    int                        CUP$LuaParser$act_num,
    java_cup.runtime.lr_parser CUP$LuaParser$parser,
    java.util.Stack            CUP$LuaParser$stack,
    int                        CUP$LuaParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$LuaParser$result;

      /* select the action based on the action number */
      switch (CUP$LuaParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // unop ::= LENGTH 
            {
              Object RESULT =null;

              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("unop",21, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // unop ::= NOT 
            {
              Object RESULT =null;

              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("unop",21, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // unop ::= MINUS 
            {
              Object RESULT =null;

              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("unop",21, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // binop ::= OR 
            {
              Object RESULT =null;

              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("binop",20, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // binop ::= AND 
            {
              Object RESULT =null;

              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("binop",20, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // binop ::= DIFFERENT 
            {
              Object RESULT =null;

              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("binop",20, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // binop ::= EQUAL 
            {
              Object RESULT =null;

              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("binop",20, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // binop ::= GREATHER_THAN_EQUAL 
            {
              Object RESULT =null;

              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("binop",20, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // binop ::= GREATHER_THAN 
            {
              Object RESULT =null;

              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("binop",20, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // binop ::= LESS_THAN_EQUAL 
            {
              Object RESULT =null;

              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("binop",20, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // binop ::= LESS_THAN 
            {
              Object RESULT =null;

              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("binop",20, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // binop ::= TWO_PERIOD 
            {
              Object RESULT =null;

              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("binop",20, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // binop ::= PERCENT 
            {
              Object RESULT =null;

              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("binop",20, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // binop ::= UP_CARET 
            {
              Object RESULT =null;

              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("binop",20, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // binop ::= DIV 
            {
              Object RESULT =null;

              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("binop",20, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // binop ::= TIMES 
            {
              Object RESULT =null;

              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("binop",20, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // binop ::= MINUS 
            {
              Object RESULT =null;

              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("binop",20, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // binop ::= PLUS 
            {
              Object RESULT =null;

              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("binop",20, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // fieldsep ::= SEMICOLON 
            {
              Object RESULT =null;

              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("fieldsep",19, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // fieldsep ::= COMMA 
            {
              Object RESULT =null;

              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("fieldsep",19, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // field ::= exp 
            {
              Object RESULT =null;

              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("field",18, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // field ::= IDENTIFIER SIGN exp 
            {
              Object RESULT =null;

              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("field",18, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-2)), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // field ::= OPEN_BRACKETS exp CLOSE_BRACKETS SIGN exp 
            {
              Object RESULT =null;

              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("field",18, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-4)), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // fieldseptemp ::= 
            {
              Object RESULT =null;

              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("fieldseptemp",38, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // fieldseptemp ::= fieldsep 
            {
              Object RESULT =null;

              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("fieldseptemp",38, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // fieldsepfieldtemp ::= fieldsep field 
            {
              Object RESULT =null;

              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("fieldsepfieldtemp",37, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-1)), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // fieldlist ::= field fieldsepfieldtemp fieldseptemp 
            {
              Object RESULT =null;

              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("fieldlist",17, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-2)), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // fieldlisttemp ::= 
            {
              Object RESULT =null;

              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("fieldlisttemp",36, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // fieldlisttemp ::= fieldlist 
            {
              Object RESULT =null;

              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("fieldlisttemp",36, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // tableconstructor ::= OPEN_BRACES fieldlisttemp CLOSE_BRACES 
            {
              Object RESULT =null;

              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("tableconstructor",16, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-2)), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // commaellipsistemp ::= 
            {
              Object RESULT =null;

              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("commaellipsistemp",35, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // commaellipsistemp ::= COMMA ELLIPSIS 
            {
              Object RESULT =null;

              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("commaellipsistemp",35, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-1)), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // parlist ::= ELLIPSIS 
            {
              Object RESULT =null;

              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("parlist",15, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // parlist ::= namelist commaellipsistemp 
            {
              Object RESULT =null;

              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("parlist",15, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-1)), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // parlisttemp ::= 
            {
              Object RESULT =null;

              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("parlisttemp",34, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // parlisttemp ::= parlist 
            {
              Object RESULT =null;

              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("parlisttemp",34, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // funcbody ::= OPEN_PARENTHESES parlisttemp CLOSE_PARENTHESES block END 
            {
              Object RESULT =null;

              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("funcbody",14, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-4)), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // function ::= FUNCTION funcbody 
            {
              Object RESULT =null;

              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("function",13, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-1)), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // args ::= STRING 
            {
              Object RESULT =null;

              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("args",12, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // args ::= tableconstructor 
            {
              Object RESULT =null;

              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("args",12, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // args ::= OPEN_PARENTHESES explisttemp CLOSE_PARENTHESES 
            {
              Object RESULT =null;

              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("args",12, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-2)), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // functioncall ::= prefixexp COLON IDENTIFIER args 
            {
              Object RESULT =null;

              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("functioncall",11, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-3)), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // functioncall ::= prefixexp args 
            {
              Object RESULT =null;

              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("functioncall",11, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-1)), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // prefixexp ::= OPEN_PARENTHESES exp CLOSE_PARENTHESES 
            {
              Object RESULT =null;

              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("prefixexp",10, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-2)), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // prefixexp ::= functioncall 
            {
              Object RESULT =null;

              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("prefixexp",10, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // prefixexp ::= var 
            {
              Object RESULT =null;

              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("prefixexp",10, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // exp ::= unop exp 
            {
              Object RESULT =null;

              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("exp",9, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-1)), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // exp ::= exp binop exp 
            {
              Object RESULT =null;

              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("exp",9, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-2)), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // exp ::= tableconstructor 
            {
              Object RESULT =null;

              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("exp",9, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // exp ::= prefixexp 
            {
              Object RESULT =null;

              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("exp",9, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // exp ::= function 
            {
              Object RESULT =null;

              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("exp",9, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // exp ::= ELLIPSIS 
            {
              Object RESULT =null;

              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("exp",9, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // exp ::= STRING 
            {
              Object RESULT =null;

              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("exp",9, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // exp ::= NUMBER 
            {
              Object RESULT =null;

              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("exp",9, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // exp ::= TRUE 
            {
              Object RESULT =null;

              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("exp",9, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // exp ::= FALSE 
            {
              Object RESULT =null;

              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("exp",9, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // exp ::= NIL 
            {
              Object RESULT =null;

              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("exp",9, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expcommatemp ::= exp COMMA 
            {
              Object RESULT =null;

              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("expcommatemp",33, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-1)), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // explist ::= expcommatemp exp 
            {
              Object RESULT =null;

              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("explist",8, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-1)), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // commaidentifiertemp ::= COMMA IDENTIFIER 
            {
              Object RESULT =null;

              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("commaidentifiertemp",32, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-1)), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // namelist ::= IDENTIFIER commaidentifiertemp 
            {
              Object RESULT =null;

              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("namelist",7, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-1)), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // var ::= prefixexp PERIOD IDENTIFIER 
            {
              Object RESULT =null;

              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("var",6, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-2)), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // var ::= prefixexp OPEN_BRACKETS exp CLOSE_BRACKETS 
            {
              Object RESULT =null;

              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("var",6, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-3)), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // var ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("var",6, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // commavartemp ::= COMMA var 
            {
              Object RESULT =null;

              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("commavartemp",31, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-1)), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // varlist ::= var commavartemp 
            {
              Object RESULT =null;

              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("varlist",5, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-1)), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // twoperiodidentifertemp ::= 
            {
              Object RESULT =null;

              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("twoperiodidentifertemp",39, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // twoperiodidentifertemp ::= TWO_PERIOD IDENTIFIER 
            {
              Object RESULT =null;

              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("twoperiodidentifertemp",39, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-1)), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // periodidentifiertemp ::= PERIOD IDENTIFIER 
            {
              Object RESULT =null;

              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("periodidentifiertemp",30, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-1)), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // funcname ::= IDENTIFIER periodidentifiertemp twoperiodidentifertemp 
            {
              Object RESULT =null;

              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("funcname",4, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-2)), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // explisttemp ::= 
            {
              Object RESULT =null;

              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("explisttemp",29, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // explisttemp ::= explist 
            {
              Object RESULT =null;

              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("explisttemp",29, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // laststat ::= BREAK 
            {
              Object RESULT =null;

              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("laststat",3, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // laststat ::= RETURN explisttemp 
            {
              Object RESULT =null;

              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("laststat",3, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-1)), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // signexplisttemp ::= 
            {
              Object RESULT =null;

              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("signexplisttemp",28, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // signexplisttemp ::= SIGN explist 
            {
              Object RESULT =null;

              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("signexplisttemp",28, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-1)), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // commaexptemp ::= 
            {
              Object RESULT =null;

              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("commaexptemp",27, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // commaexptemp ::= COMMA exp 
            {
              Object RESULT =null;

              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("commaexptemp",27, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-1)), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // elsetemp ::= 
            {
              Object RESULT =null;

              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("elsetemp",26, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // elsetemp ::= ELSE block 
            {
              Object RESULT =null;

              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("elsetemp",26, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-1)), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // elseiftemp ::= ELSEIF exp THEN block 
            {
              Object RESULT =null;

              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("elseiftemp",25, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-3)), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // stat ::= LOCAL namelist signexplisttemp 
            {
              Object RESULT =null;

              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("stat",2, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-2)), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // stat ::= LOCAL FUNCTION IDENTIFIER funcbody 
            {
              Object RESULT =null;

              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("stat",2, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-3)), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // stat ::= FUNCTION funcname funcbody 
            {
              Object RESULT =null;

              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("stat",2, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-2)), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // stat ::= FOR namelist IN explist DO block END 
            {
              Object RESULT =null;

              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("stat",2, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-6)), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // stat ::= FOR IDENTIFIER SIGN exp COMMA exp commaexptemp DO block END 
            {
              Object RESULT =null;

              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("stat",2, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-9)), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // stat ::= IF exp THEN block elseiftemp elsetemp END 
            {
              Object RESULT =null;

              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("stat",2, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-6)), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // stat ::= REPEAT block UNTIL exp 
            {
              Object RESULT =null;

              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("stat",2, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-3)), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // stat ::= WHILE exp DO block END 
            {
              Object RESULT =null;

              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("stat",2, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-4)), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // stat ::= DO block END 
            {
              Object RESULT =null;

              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("stat",2, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-2)), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // stat ::= functioncall 
            {
              Object RESULT =null;

              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("stat",2, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // stat ::= varlist SIGN explist 
            {
              Object RESULT =null;

              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("stat",2, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-2)), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // semicolontemp ::= 
            {
              Object RESULT =null;

              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("semicolontemp",22, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // semicolontemp ::= SEMICOLON 
            {
              Object RESULT =null;

              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("semicolontemp",22, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // block ::= chuck 
            {
              Object RESULT =null;

              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("block",1, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // laststattemp ::= 
            {
              Object RESULT =null;

              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("laststattemp",24, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // laststattemp ::= laststat semicolontemp 
            {
              Object RESULT =null;

              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("laststattemp",24, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-1)), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // tempchuck ::= stat semicolontemp 
            {
              Object RESULT =null;

              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("tempchuck",23, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-1)), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // chuck ::= tempchuck laststattemp 
            {
              Object RESULT =null;

              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("chuck",0, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-1)), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= chuck EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-1)).value;
		RESULT = start_val;
              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-1)), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$LuaParser$parser.done_parsing();
          return CUP$LuaParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

