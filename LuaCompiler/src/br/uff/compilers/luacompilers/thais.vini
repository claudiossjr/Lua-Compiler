local tokens = require 'tokens'
local nextToken = require "lexer"
local la = require "lookahead"

local lookahead = la.new(nextToken)

function match(kind)
  if lookahead(1).kind == kind then
    lookahead:consume()
  else
    error("expecting "..tokens[kind].." but found "..tostring(lookahead(1)))
  end
end

function matchorbacktrack(name, func)
  lookahead:mark() 
  local success, msg = pcall(func)
  lookahead:release() 
  if success then
    func()  
  else
    print("Failed matching "..name.." with msg: "..msg..". Backtracked.")
  end
  return success
end

function elements()
  element()
  while lookahead(1).kind == tokens.COMMA do
    match(tokens.COMMA)
    element()
  end
end


function element()
  if lookahead(1).kind == tokens.NAME and
     lookahead(2).kind == tokens.EQUALS then match(tokens.NAME); match(tokens.EQUALS); match(tokens.NAME)
  elseif lookahead(1).kind == tokens.NAME then match(tokens.NAME)
  elseif lookahead(1).kind == tokens.LBRACK then list( )
  else error("expecting name or list; found "..tostring(lookahead(1)))
  end
end

function stat()
  return matchorbacktrack("list",       function( ) list( ); match(tokens.EOF) end) or
         matchorbacktrack("assignment", function( ) assign( ); match(tokens.EOF) end) or
         error("expecting stat but found "..tostring(lookahead(1)))
end


function assign()
  list()
  match(tokens.EQUALS)
  list()
end


list = lookahead:memoizedRule(function()
  match(tokens.LBRACK)
  elements()
  match(tokens.RBRACK)
end)


function elements()
  element()
  while (lookahead(1).kind == tokens.COMMA) do
    match(tokens.COMMA)
    element()
  end
end


function element()
  if lookahead(1).kind == tokens.NAME and lookahead(2).kind == tokens.EQUALS then
    match(tokens.NAME)
    match(tokens.EQUALS)
    match(tokens.NAME)
  elseif lookahead(1).kind == tokens.NAME then
    match(tokens.NAME)
  elseif lookahead(1).kind == tokens.LBRACK then
    list()
  else
    error("expecting element, but found "..tostring(lookahead(1)))
  end
end

sucess, msg = pcall(stat) 

if sucess then
  print("The input was valid")
else
  print("Invalid input: "..msg)
end
