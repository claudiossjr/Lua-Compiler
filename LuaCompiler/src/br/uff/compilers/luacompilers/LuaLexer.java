/* The following code was generated by JFlex 1.6.1 */

/* User Code */
import java.util.*;
import java_cup.runtime.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>C:/Users/IBM_ADMIN/Downloads/LuaCompiler-Claudio/LuaCompiler/src/br/uff/compilers/luacompilers/lua.jflex</tt>
 */
public class LuaLexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\5\1\6\1\6\1\6\1\6\22\0\1\5\1\0\1\13"+
    "\1\57\1\0\1\53\2\0\1\45\1\46\1\50\1\15\1\43\1\1"+
    "\1\16\1\51\2\12\1\11\7\12\1\41\1\42\1\54\1\47\1\55"+
    "\2\0\32\7\1\2\1\14\1\3\1\52\1\7\1\0\1\31\1\37"+
    "\1\36\1\20\1\17\1\33\1\7\1\24\1\25\1\7\1\40\1\26"+
    "\1\7\1\22\1\21\1\30\1\7\1\27\1\34\1\32\1\35\1\7"+
    "\1\23\3\7\1\44\1\0\1\4\1\56\6\0\1\6\32\0\1\5"+
    "\11\0\1\10\12\0\1\10\4\0\1\10\5\0\27\10\1\0\37\10"+
    "\1\0\u01ca\10\4\0\14\10\16\0\5\10\7\0\1\10\1\0\1\10"+
    "\21\0\165\10\1\0\2\10\2\0\4\10\1\0\1\10\6\0\1\10"+
    "\1\0\3\10\1\0\1\10\1\0\24\10\1\0\123\10\1\0\213\10"+
    "\1\0\255\10\1\0\46\10\2\0\1\10\7\0\47\10\11\0\55\10"+
    "\1\0\1\10\1\0\2\10\1\0\2\10\1\0\1\10\10\0\33\10"+
    "\5\0\3\10\35\0\13\10\5\0\100\10\12\12\4\0\146\10\1\0"+
    "\10\10\2\0\12\10\1\0\6\10\12\12\3\10\2\0\1\10\20\0"+
    "\73\10\2\0\145\10\16\0\12\12\54\10\4\0\1\10\5\0\56\10"+
    "\22\0\34\10\104\0\23\10\61\0\200\10\2\0\12\12\1\0\23\10"+
    "\1\0\10\10\2\0\2\10\2\0\26\10\1\0\7\10\1\0\1\10"+
    "\3\0\4\10\2\0\11\10\2\0\2\10\2\0\4\10\10\0\1\10"+
    "\4\0\2\10\1\0\5\10\2\0\12\12\2\10\17\0\3\10\1\0"+
    "\6\10\4\0\2\10\2\0\26\10\1\0\7\10\1\0\2\10\1\0"+
    "\2\10\1\0\2\10\2\0\1\10\1\0\5\10\4\0\2\10\2\0"+
    "\3\10\3\0\1\10\7\0\4\10\1\0\1\10\7\0\12\12\6\10"+
    "\13\0\3\10\1\0\11\10\1\0\3\10\1\0\26\10\1\0\7\10"+
    "\1\0\2\10\1\0\5\10\2\0\12\10\1\0\3\10\1\0\3\10"+
    "\2\0\1\10\17\0\4\10\2\0\12\12\21\0\3\10\1\0\10\10"+
    "\2\0\2\10\2\0\26\10\1\0\7\10\1\0\2\10\1\0\5\10"+
    "\2\0\11\10\2\0\2\10\2\0\3\10\10\0\2\10\4\0\2\10"+
    "\1\0\5\10\2\0\12\12\1\0\1\10\20\0\2\10\1\0\6\10"+
    "\3\0\3\10\1\0\4\10\3\0\2\10\1\0\1\10\1\0\2\10"+
    "\3\0\2\10\3\0\3\10\3\0\14\10\4\0\5\10\3\0\3\10"+
    "\1\0\4\10\2\0\1\10\6\0\1\10\16\0\12\12\20\0\4\10"+
    "\1\0\10\10\1\0\3\10\1\0\27\10\1\0\20\10\3\0\10\10"+
    "\1\0\3\10\1\0\4\10\7\0\2\10\1\0\2\10\6\0\4\10"+
    "\2\0\12\12\21\0\3\10\1\0\10\10\1\0\3\10\1\0\27\10"+
    "\1\0\12\10\1\0\5\10\2\0\11\10\1\0\3\10\1\0\4\10"+
    "\7\0\2\10\7\0\1\10\1\0\4\10\2\0\12\12\1\0\2\10"+
    "\16\0\3\10\1\0\10\10\1\0\3\10\1\0\51\10\2\0\10\10"+
    "\1\0\3\10\1\0\5\10\10\0\1\10\10\0\4\10\2\0\12\12"+
    "\12\0\6\10\2\0\2\10\1\0\22\10\3\0\30\10\1\0\11\10"+
    "\1\0\1\10\2\0\7\10\3\0\1\10\4\0\6\10\1\0\1\10"+
    "\1\0\10\10\6\0\12\12\2\0\2\10\15\0\72\10\5\0\17\10"+
    "\1\0\12\12\47\0\2\10\1\0\1\10\2\0\2\10\1\0\1\10"+
    "\2\0\1\10\6\0\4\10\1\0\7\10\1\0\3\10\1\0\1\10"+
    "\1\0\1\10\2\0\2\10\1\0\15\10\1\0\3\10\2\0\5\10"+
    "\1\0\1\10\1\0\6\10\2\0\12\12\2\0\4\10\40\0\1\10"+
    "\27\0\2\10\6\0\12\12\13\0\1\10\1\0\1\10\1\0\1\10"+
    "\4\0\12\10\1\0\44\10\4\0\24\10\1\0\22\10\1\0\44\10"+
    "\11\0\1\10\71\0\100\10\12\12\6\0\100\10\12\12\4\10\2\0"+
    "\46\10\1\0\1\10\5\0\1\10\2\0\53\10\1\0\u014d\10\1\0"+
    "\4\10\2\0\7\10\1\0\1\10\1\0\4\10\2\0\51\10\1\0"+
    "\4\10\2\0\41\10\1\0\4\10\2\0\7\10\1\0\1\10\1\0"+
    "\4\10\2\0\17\10\1\0\71\10\1\0\4\10\2\0\103\10\2\0"+
    "\3\10\40\0\20\10\20\0\125\10\14\0\u026c\10\2\0\21\10\1\5"+
    "\32\10\5\0\113\10\3\0\13\10\7\0\15\10\1\0\7\10\13\0"+
    "\25\10\13\0\24\10\14\0\15\10\1\0\3\10\1\0\2\10\14\0"+
    "\124\10\3\0\1\10\4\0\2\10\2\0\12\12\41\0\3\10\2\0"+
    "\12\12\6\0\130\10\10\0\53\10\5\0\106\10\12\0\37\10\1\0"+
    "\14\10\4\0\14\10\12\0\12\12\36\10\2\0\5\10\13\0\54\10"+
    "\4\0\32\10\6\0\12\12\46\0\34\10\4\0\77\10\1\0\35\10"+
    "\2\0\1\10\12\12\6\0\12\12\15\0\1\10\10\0\17\10\101\0"+
    "\114\10\4\0\12\12\21\0\11\10\14\0\60\10\12\12\72\10\14\0"+
    "\70\10\10\0\12\12\3\0\3\10\12\12\44\10\122\0\3\10\1\0"+
    "\43\10\1\0\2\10\6\0\366\10\6\0\u011a\10\2\0\6\10\2\0"+
    "\46\10\2\0\6\10\2\0\10\10\1\0\1\10\1\0\1\10\1\0"+
    "\1\10\1\0\37\10\2\0\65\10\1\0\7\10\1\0\1\10\3\0"+
    "\3\10\1\0\7\10\3\0\4\10\2\0\6\10\4\0\15\10\5\0"+
    "\3\10\1\0\7\10\3\0\13\5\35\0\1\6\1\6\5\0\1\5"+
    "\17\0\2\10\23\0\1\10\12\0\1\5\21\0\1\10\15\0\1\10"+
    "\20\0\15\10\63\0\41\10\21\0\1\10\4\0\1\10\2\0\12\10"+
    "\1\0\1\10\3\0\5\10\6\0\1\10\1\0\1\10\1\0\1\10"+
    "\1\0\4\10\1\0\13\10\2\0\4\10\5\0\5\10\4\0\1\10"+
    "\21\0\51\10\u032d\0\64\10\u0716\0\57\10\1\0\57\10\1\0\205\10"+
    "\6\0\11\10\14\0\46\10\1\0\1\10\5\0\1\10\2\0\70\10"+
    "\7\0\1\10\17\0\30\10\11\0\7\10\1\0\7\10\1\0\7\10"+
    "\1\0\7\10\1\0\7\10\1\0\7\10\1\0\7\10\1\0\7\10"+
    "\1\0\40\10\57\0\1\10\u01d0\0\1\5\4\0\3\10\31\0\17\10"+
    "\1\0\5\10\2\0\5\10\4\0\126\10\2\0\2\10\2\0\3\10"+
    "\1\0\132\10\1\0\4\10\5\0\51\10\3\0\136\10\21\0\33\10"+
    "\65\0\20\10\u0200\0\u19b6\10\112\0\u51cd\10\63\0\u048d\10\103\0\56\10"+
    "\2\0\u010d\10\3\0\20\10\12\12\2\10\24\0\63\10\1\0\12\10"+
    "\1\0\37\10\1\0\123\10\45\0\11\10\2\0\147\10\2\0\4\10"+
    "\1\0\36\10\2\0\2\10\105\0\61\10\30\0\64\10\14\0\105\10"+
    "\13\0\12\12\6\0\30\10\3\0\1\10\4\0\12\12\44\10\2\0"+
    "\44\10\14\0\35\10\3\0\101\10\16\0\1\10\12\12\6\0\20\10"+
    "\12\12\5\10\1\0\67\10\11\0\16\10\2\0\12\12\6\0\27\10"+
    "\3\0\111\10\30\0\3\10\2\0\20\10\2\0\5\10\12\0\6\10"+
    "\2\0\6\10\2\0\6\10\11\0\7\10\1\0\7\10\1\0\53\10"+
    "\1\0\4\10\4\0\2\10\132\0\53\10\1\0\2\10\2\0\12\12"+
    "\6\0\u2ba4\10\14\0\27\10\4\0\61\10\u2104\0\u016e\10\2\0\152\10"+
    "\46\0\7\10\14\0\5\10\5\0\14\10\1\0\15\10\1\0\5\10"+
    "\1\0\1\10\1\0\2\10\1\0\2\10\1\0\154\10\41\0\u016b\10"+
    "\22\0\100\10\2\0\66\10\50\0\14\10\4\0\20\10\20\0\16\10"+
    "\5\0\2\10\30\0\3\10\40\0\5\10\1\0\207\10\23\0\12\12"+
    "\7\0\32\10\4\0\1\10\1\0\32\10\13\0\131\10\3\0\6\10"+
    "\2\0\6\10\2\0\6\10\2\0\3\10\43\0\14\10\1\0\32\10"+
    "\1\0\23\10\1\0\2\10\1\0\17\10\2\0\16\10\42\0\173\10"+
    "\105\0\65\10\210\0\1\10\202\0\35\10\3\0\61\10\17\0\1\10"+
    "\37\0\40\10\20\0\33\10\5\0\53\10\5\0\36\10\2\0\44\10"+
    "\4\0\10\10\1\0\5\10\52\0\236\10\2\0\12\12\126\0\50\10"+
    "\10\0\64\10\234\0\u0137\10\11\0\26\10\12\0\10\10\230\0\6\10"+
    "\2\0\1\10\1\0\54\10\1\0\2\10\3\0\1\10\2\0\27\10"+
    "\12\0\27\10\11\0\37\10\141\0\26\10\12\0\32\10\106\0\70\10"+
    "\6\0\2\10\100\0\4\10\1\0\2\10\5\0\10\10\1\0\3\10"+
    "\1\0\33\10\4\0\3\10\4\0\1\10\40\0\35\10\3\0\35\10"+
    "\43\0\10\10\1\0\36\10\31\0\66\10\12\0\26\10\12\0\23\10"+
    "\15\0\22\10\156\0\111\10\u03b7\0\107\10\37\0\12\12\17\0\74\10"+
    "\25\0\31\10\7\0\12\12\6\0\65\10\1\0\12\12\20\0\44\10"+
    "\2\0\1\10\11\0\105\10\13\0\12\12\1\10\45\0\22\10\1\0"+
    "\45\10\170\0\73\10\5\0\12\12\7\0\3\10\1\0\10\10\2\0"+
    "\2\10\2\0\26\10\1\0\7\10\1\0\2\10\1\0\5\10\2\0"+
    "\11\10\2\0\2\10\2\0\3\10\11\0\1\10\5\0\7\10\2\0"+
    "\7\10\3\0\5\10\u010b\0\106\10\1\0\1\10\10\0\12\12\246\0"+
    "\66\10\2\0\11\10\77\0\101\10\3\0\1\10\13\0\12\12\46\0"+
    "\70\10\10\0\12\12\u01d6\0\100\10\12\12\25\0\1\10\u01c0\0\71\10"+
    "\u0507\0\u0399\10\147\0\157\10\u0b91\0\u042f\10\u33d1\0\u0239\10\7\0\37\10"+
    "\1\0\12\12\146\0\36\10\2\0\5\10\13\0\67\10\11\0\4\10"+
    "\14\0\12\12\11\0\25\10\5\0\23\10\u0370\0\105\10\13\0\57\10"+
    "\20\0\21\10\u4060\0\2\10\u0bfe\0\153\10\5\0\15\10\3\0\11\10"+
    "\7\0\12\10\3\0\2\10\u14c6\0\5\10\3\0\6\10\10\0\10\10"+
    "\2\0\7\10\36\0\4\10\224\0\3\10\u01bb\0\125\10\1\0\107\10"+
    "\1\0\2\10\2\0\1\10\2\0\2\10\2\0\4\10\1\0\14\10"+
    "\1\0\1\10\1\0\7\10\1\0\101\10\1\0\4\10\2\0\10\10"+
    "\1\0\7\10\1\0\34\10\1\0\4\10\1\0\5\10\1\0\1\10"+
    "\3\0\7\10\1\0\u0154\10\2\0\31\10\1\0\31\10\1\0\37\10"+
    "\1\0\31\10\1\0\37\10\1\0\31\10\1\0\37\10\1\0\31\10"+
    "\1\0\37\10\1\0\31\10\1\0\10\10\2\0\62\12\u1000\0\305\10"+
    "\13\0\7\10\u0529\0\4\10\1\0\33\10\1\0\2\10\1\0\1\10"+
    "\2\0\1\10\1\0\12\10\1\0\4\10\1\0\1\10\1\0\1\10"+
    "\6\0\1\10\4\0\1\10\1\0\1\10\1\0\1\10\1\0\3\10"+
    "\1\0\2\10\1\0\1\10\2\0\1\10\1\0\1\10\1\0\1\10"+
    "\1\0\1\10\1\0\1\10\1\0\2\10\1\0\1\10\2\0\4\10"+
    "\1\0\7\10\1\0\4\10\1\0\4\10\1\0\1\10\1\0\12\10"+
    "\1\0\21\10\5\0\3\10\1\0\5\10\1\0\21\10\u0274\0\32\10"+
    "\6\0\32\10\6\0\32\10\u0e76\0\ua6d7\10\51\0\u1035\10\13\0\336\10"+
    "\u3fe2\0\u021e\10\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u06ed\0"+
    "\360\10\uffff\0\uffff\0\ufe12\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\1\1\10\1\11\14\6\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\1\1\27\4\0\1\30\1\0\1\31\2\6"+
    "\1\32\1\33\3\6\1\34\1\35\11\6\1\36\1\37"+
    "\1\40\1\41\2\0\1\7\1\0\1\7\1\42\1\43"+
    "\1\6\1\44\1\45\4\6\1\46\2\6\1\47\3\6"+
    "\1\50\1\0\1\51\4\6\1\52\1\53\3\6\1\50"+
    "\1\0\1\6\1\54\1\55\2\6\1\56\1\6\1\57"+
    "\1\0\1\60\1\61\1\62\1\6\1\0\1\6\1\50"+
    "\1\63";

  private static int [] zzUnpackAction() {
    int [] result = new int[119];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\60\0\140\0\60\0\60\0\60\0\220\0\300"+
    "\0\360\0\u0120\0\u0150\0\u0180\0\u01b0\0\u01e0\0\u0210\0\u0240"+
    "\0\u0270\0\u02a0\0\u02d0\0\u0300\0\u0330\0\u0360\0\u0390\0\60"+
    "\0\60\0\60\0\60\0\60\0\60\0\u03c0\0\60\0\60"+
    "\0\60\0\60\0\u03f0\0\u0420\0\u0450\0\60\0\u0480\0\u04b0"+
    "\0\u04e0\0\360\0\60\0\u0510\0\u0540\0\u0570\0\u05a0\0\220"+
    "\0\220\0\u05d0\0\u0600\0\u0630\0\220\0\220\0\u0660\0\u0690"+
    "\0\u06c0\0\u06f0\0\u0720\0\u0750\0\u0780\0\u07b0\0\u07e0\0\60"+
    "\0\60\0\60\0\60\0\u0810\0\u0840\0\u04b0\0\u0870\0\u0870"+
    "\0\60\0\220\0\u08a0\0\220\0\220\0\u08d0\0\u0900\0\u0930"+
    "\0\u0960\0\220\0\u0990\0\u09c0\0\220\0\u09f0\0\u0a20\0\u0a50"+
    "\0\u0a80\0\u0ab0\0\u0ae0\0\u0b10\0\u0b40\0\u0b70\0\u0ba0\0\220"+
    "\0\220\0\u0bd0\0\u0c00\0\u0c30\0\u0c60\0\u0c90\0\u0cc0\0\220"+
    "\0\220\0\u0cf0\0\u0d20\0\220\0\u0d50\0\220\0\u0d80\0\220"+
    "\0\220\0\220\0\u0db0\0\u0de0\0\u0e10\0\60\0\220";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[119];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\2\1\0\1\7"+
    "\1\2\2\10\1\11\1\2\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\7\1\21\1\22\1\23\1\7"+
    "\1\24\1\25\1\26\3\7\1\27\1\7\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\61\0\1\47\7\0"+
    "\2\10\54\0\4\7\4\0\22\7\30\0\2\10\3\0"+
    "\1\50\1\51\40\0\13\52\1\53\1\54\43\52\11\0"+
    "\2\10\63\0\1\55\50\0\4\7\4\0\3\7\1\56"+
    "\3\7\1\57\12\7\26\0\4\7\4\0\2\7\1\60"+
    "\17\7\26\0\4\7\4\0\10\7\1\61\11\7\26\0"+
    "\4\7\4\0\2\7\1\62\3\7\1\63\13\7\26\0"+
    "\4\7\4\0\5\7\1\64\14\7\26\0\4\7\4\0"+
    "\3\7\1\65\10\7\1\66\5\7\26\0\4\7\4\0"+
    "\2\7\1\67\17\7\26\0\4\7\4\0\1\70\21\7"+
    "\26\0\4\7\4\0\3\7\1\71\16\7\26\0\4\7"+
    "\4\0\5\7\1\72\2\7\1\73\11\7\26\0\4\7"+
    "\4\0\2\7\1\74\7\7\1\75\3\7\1\76\3\7"+
    "\26\0\4\7\4\0\10\7\1\77\11\7\66\0\1\100"+
    "\57\0\1\101\57\0\1\102\57\0\1\103\10\0\2\104"+
    "\1\105\1\104\1\0\4\104\1\0\32\104\1\0\13\104"+
    "\11\0\2\106\4\0\1\51\41\0\1\107\7\0\2\110"+
    "\2\0\1\107\42\0\6\52\1\0\51\52\16\0\1\111"+
    "\50\0\4\7\4\0\1\7\1\112\20\7\26\0\4\7"+
    "\4\0\15\7\1\113\4\7\26\0\4\7\4\0\13\7"+
    "\1\114\6\7\26\0\4\7\4\0\7\7\1\115\12\7"+
    "\26\0\4\7\4\0\6\7\1\116\13\7\26\0\4\7"+
    "\4\0\17\7\1\117\2\7\26\0\4\7\4\0\11\7"+
    "\1\120\1\7\1\121\6\7\26\0\4\7\4\0\1\7"+
    "\1\122\20\7\26\0\4\7\4\0\1\123\21\7\26\0"+
    "\4\7\4\0\16\7\1\124\3\7\26\0\4\7\4\0"+
    "\10\7\1\125\11\7\26\0\4\7\4\0\7\7\1\126"+
    "\12\7\26\0\4\7\4\0\3\7\1\127\16\7\26\0"+
    "\4\7\4\0\1\130\21\7\17\0\3\131\2\0\4\131"+
    "\1\0\32\131\1\0\13\131\2\0\1\132\66\0\2\110"+
    "\54\0\4\7\4\0\1\133\21\7\26\0\4\7\4\0"+
    "\7\7\1\134\12\7\26\0\4\7\4\0\12\7\1\135"+
    "\7\7\26\0\4\7\4\0\1\136\21\7\26\0\4\7"+
    "\4\0\16\7\1\137\3\7\26\0\4\7\4\0\3\7"+
    "\1\140\16\7\26\0\4\7\4\0\1\141\21\7\26\0"+
    "\4\7\4\0\15\7\1\142\4\7\26\0\4\7\4\0"+
    "\17\7\1\143\2\7\26\0\4\7\4\0\12\7\1\144"+
    "\7\7\17\0\5\145\2\131\51\145\1\132\1\146\1\132"+
    "\2\0\4\132\1\0\32\132\1\0\13\132\7\0\4\7"+
    "\4\0\6\7\1\147\13\7\26\0\4\7\4\0\1\150"+
    "\21\7\26\0\4\7\4\0\7\7\1\151\12\7\26\0"+
    "\4\7\4\0\12\7\1\152\7\7\26\0\4\7\4\0"+
    "\10\7\1\153\11\7\26\0\4\7\4\0\1\154\21\7"+
    "\26\0\4\7\4\0\13\7\1\155\6\7\26\0\4\7"+
    "\4\0\21\7\1\156\17\0\6\145\1\0\51\145\1\0"+
    "\1\157\65\0\4\7\4\0\14\7\1\160\5\7\26\0"+
    "\4\7\4\0\13\7\1\161\6\7\26\0\4\7\4\0"+
    "\3\7\1\162\16\7\26\0\4\7\4\0\6\7\1\163"+
    "\13\7\22\0\1\164\63\0\4\7\4\0\2\7\1\165"+
    "\17\7\22\0\1\166\63\0\4\7\4\0\3\7\1\167"+
    "\16\7\17\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[3648];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\3\11\21\1\6\11\1\1\4\11"+
    "\3\1\1\11\4\0\1\11\1\0\23\1\4\11\2\0"+
    "\1\1\1\0\1\1\1\11\20\1\1\0\13\1\1\0"+
    "\10\1\1\0\4\1\1\0\1\1\1\11\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[119];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
	private Symbol symbol(int type) {
		return new Symbol(type, yyline, yycolumn);
	}
	private Symbol symbol(int type, Object value) {
		return new Symbol(type, yyline, yycolumn, value);
  	}	


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LuaLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2736) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { /* Syntax Error */
            }
          case 52: break;
          case 2: 
            { System.out.printf(" MINUS"); return symbol(sym.MINUS);
            }
          case 53: break;
          case 3: 
            { System.out.printf(" OPEN_BRACKETS"); return symbol(sym.OPEN_BRACKETS);
            }
          case 54: break;
          case 4: 
            { System.out.printf(" CLOSE_BRACKETS"); return symbol(sym.CLOSE_BRACKETS);
            }
          case 55: break;
          case 5: 
            { System.out.printf(" CLOSE_BRACES"); return symbol(sym.CLOSE_BRACES);
            }
          case 56: break;
          case 6: 
            { System.out.printf(" IDENTIFIER"); return symbol(sym.IDENTIFIER);
            }
          case 57: break;
          case 7: 
            { System.out.printf(" NUMBER"); return symbol(sym.NUMBER);
            }
          case 58: break;
          case 8: 
            { System.out.printf(" PLUS"); return symbol(sym.PLUS);
            }
          case 59: break;
          case 9: 
            { System.out.printf(" COMMA"); return symbol(sym.PERIOD);
            }
          case 60: break;
          case 10: 
            { System.out.printf(" COLON"); return symbol(sym.COLON);
            }
          case 61: break;
          case 11: 
            { System.out.printf(" SEMICOLON"); return symbol(sym.SEMICOLON);
            }
          case 62: break;
          case 12: 
            { System.out.printf(" COMMA"); return symbol(sym.COMMA);
            }
          case 63: break;
          case 13: 
            { System.out.printf(" OPEN_BRACES"); return symbol(sym.OPEN_BRACES);
            }
          case 64: break;
          case 14: 
            { System.out.printf(" OPEN_PARENTHESES"); return symbol(sym.OPEN_PARENTHESES);
            }
          case 65: break;
          case 15: 
            { System.out.printf(" CLOSE_PARENTHESES"); return symbol(sym.CLOSE_PARENTHESES);
            }
          case 66: break;
          case 16: 
            { System.out.printf(" SIGN"); return symbol(sym.SIGN);
            }
          case 67: break;
          case 17: 
            { System.out.printf(" TIMES"); return symbol(sym.TIMES);
            }
          case 68: break;
          case 18: 
            { System.out.printf(" DIV"); return symbol(sym.DIV);
            }
          case 69: break;
          case 19: 
            { System.out.printf(" UP_CARET"); return symbol(sym.UP_CARET);
            }
          case 70: break;
          case 20: 
            { System.out.printf(" PERCENT"); return symbol(sym.PERCENT);
            }
          case 71: break;
          case 21: 
            { System.out.printf(" LESS_THAN"); return symbol(sym.LESS_THAN);
            }
          case 72: break;
          case 22: 
            { System.out.printf(" GREATHER_THAN"); return symbol(sym.GREATHER_THAN);
            }
          case 73: break;
          case 23: 
            { System.out.printf(" LENGTH"); return symbol(sym.LENGTH);
            }
          case 74: break;
          case 24: 
            { System.out.printf(" STRING"); return symbol(sym.STRING);
            }
          case 75: break;
          case 25: 
            { System.out.printf(" TWO_PERIOD"); return symbol(sym.TWO_PERIOD);
            }
          case 76: break;
          case 26: 
            { System.out.printf(" DO"); return symbol(sym.DO);
            }
          case 77: break;
          case 27: 
            { System.out.printf(" OR"); return symbol(sym.OR);
            }
          case 78: break;
          case 28: 
            { System.out.printf(" IN"); return symbol(sym.IN);
            }
          case 79: break;
          case 29: 
            { System.out.printf(" IF"); return symbol(sym.IF);
            }
          case 80: break;
          case 30: 
            { System.out.printf(" EQUAL"); return symbol(sym.EQUAL);
            }
          case 81: break;
          case 31: 
            { System.out.printf(" LESS_THAN_EQUAL"); return symbol(sym.LESS_THAN_EQUAL);
            }
          case 82: break;
          case 32: 
            { System.out.printf(" GREATHER_THAN_EQUAL"); return symbol(sym.GREATHER_THAN_EQUAL);
            }
          case 83: break;
          case 33: 
            { System.out.printf(" DIFFERENT"); return symbol(sym.DIFFERENT);
            }
          case 84: break;
          case 34: 
            { System.out.printf(" ELLIPSIS"); return symbol(sym.ELLIPSIS);
            }
          case 85: break;
          case 35: 
            { System.out.printf(" END"); return symbol(sym.END);
            }
          case 86: break;
          case 36: 
            { System.out.printf(" NOT"); return symbol(sym.NOT);
            }
          case 87: break;
          case 37: 
            { System.out.printf(" NIL"); return symbol(sym.NIL);
            }
          case 88: break;
          case 38: 
            { System.out.printf(" AND"); return symbol(sym.AND);
            }
          case 89: break;
          case 39: 
            { System.out.printf(" FOR"); return symbol(sym.FOR);
            }
          case 90: break;
          case 40: 
            { System.out.printf(" COMMENT");
            }
          case 91: break;
          case 41: 
            { System.out.printf(" ELSE"); return symbol(sym.ELSE);
            }
          case 92: break;
          case 42: 
            { System.out.printf(" THEN"); return symbol(sym.THEN);
            }
          case 93: break;
          case 43: 
            { System.out.printf(" TRUE"); return symbol(sym.TRUE);
            }
          case 94: break;
          case 44: 
            { System.out.printf(" WHILE"); return symbol(sym.WHILE);
            }
          case 95: break;
          case 45: 
            { System.out.printf(" LOCAL"); return symbol(sym.LOCAL);
            }
          case 96: break;
          case 46: 
            { System.out.printf(" FALSE"); return symbol(sym.FALSE);
            }
          case 97: break;
          case 47: 
            { System.out.printf(" BREAK"); return symbol(sym.BREAK);
            }
          case 98: break;
          case 48: 
            { System.out.printf(" ELSEIF"); return symbol(sym.ELSEIF);
            }
          case 99: break;
          case 49: 
            { System.out.printf(" REPEAT"); return symbol(sym.REPEAT);
            }
          case 100: break;
          case 50: 
            { System.out.printf(" RETURN"); return symbol(sym.RETURN);
            }
          case 101: break;
          case 51: 
            { System.out.printf(" FUNCTION"); return symbol(sym.FUNCTION);
            }
          case 102: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
