
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Dec 20 23:33:13 BRST 2016
//----------------------------------------------------

package br.uff.compilers.luacompilers;

import java_cup.runtime.*;
import java.io.FileReader;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Dec 20 23:33:13 BRST 2016
  */
public class LuaParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public LuaParser() {super();}

  /** Constructor which sets the default scanner. */
  public LuaParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public LuaParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\155\000\002\002\004\000\002\002\004\000\002\031" +
    "\005\000\002\031\002\000\002\032\004\000\002\032\002" +
    "\000\002\003\003\000\002\004\005\000\002\004\003\000" +
    "\002\004\005\000\002\004\007\000\002\004\006\000\002" +
    "\004\003\000\002\004\014\000\002\004\011\000\002\004" +
    "\005\000\002\004\006\000\002\004\005\000\002\051\011" +
    "\000\002\033\007\000\002\033\002\000\002\034\004\000" +
    "\002\034\002\000\002\036\004\000\002\036\002\000\002" +
    "\005\004\000\002\005\003\000\002\037\003\000\002\037" +
    "\002\000\002\006\005\000\002\040\005\000\002\040\002" +
    "\000\002\050\004\000\002\050\002\000\002\007\004\000" +
    "\002\010\003\000\002\010\004\000\002\053\004\000\002" +
    "\053\005\000\002\011\004\000\002\012\004\000\002\015" +
    "\004\000\002\052\005\000\002\052\003\000\002\017\004" +
    "\000\002\044\003\000\002\044\002\000\002\021\004\000" +
    "\002\021\003\000\002\022\005\000\002\046\003\000\002" +
    "\023\004\000\002\047\005\000\002\047\002\000\002\024" +
    "\007\000\002\024\005\000\002\024\003\000\002\024\002" +
    "\000\002\026\003\000\002\026\003\000\002\026\003\000" +
    "\002\026\003\000\002\026\003\000\002\026\003\000\002" +
    "\026\003\000\002\026\003\000\002\026\003\000\002\026" +
    "\003\000\002\026\003\000\002\026\003\000\002\026\003" +
    "\000\002\026\003\000\002\026\003\000\002\027\003\000" +
    "\002\027\003\000\002\027\003\000\002\030\003\000\002" +
    "\030\002\000\002\025\003\000\002\025\003\000\002\045" +
    "\004\000\002\045\002\000\002\043\005\000\002\043\002" +
    "\000\002\042\005\000\002\042\002\000\002\041\005\000" +
    "\002\041\002\000\002\035\004\000\002\035\002\000\002" +
    "\016\005\000\002\016\003\000\002\016\003\000\002\013" +
    "\005\000\002\013\004\000\002\013\003\000\002\054\003" +
    "\000\002\054\003\000\002\054\003\000\002\054\003\000" +
    "\002\054\003\000\002\054\003\000\002\054\003\000\002" +
    "\054\003\000\002\054\003\000\002\020\007\000\002\014" +
    "\003\000\002\014\003\000\002\014\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\273\000\032\002\ufffe\004\022\006\006\007\005\010" +
    "\016\014\007\017\021\020\013\021\ufffe\022\ufffe\036\011" +
    "\065\020\001\002\000\020\002\ufffc\005\ufffc\012\ufffc\013" +
    "\ufffc\016\ufffc\021\270\022\271\001\002\000\032\004\022" +
    "\006\006\007\005\010\016\014\007\016\ufffe\017\021\020" +
    "\013\021\ufffe\022\ufffe\036\011\065\020\001\002\000\034" +
    "\017\046\023\051\024\061\025\050\026\056\034\031\036" +
    "\011\042\062\061\043\062\057\063\054\064\052\065\020" +
    "\001\002\000\004\065\241\001\002\000\126\002\uff96\004" +
    "\uff96\005\uff96\006\uff96\007\uff96\010\uff96\011\uff96\012\uff96" +
    "\013\uff96\014\uff96\016\uff96\017\uff96\020\uff96\021\uff96\022" +
    "\uff96\027\uff96\030\uff96\031\uff96\032\uff96\033\uff96\034\uff96" +
    "\035\uff96\036\uff96\037\uff96\041\uff96\042\uff96\043\uff96\044" +
    "\uff96\045\uff96\046\uff96\047\uff96\050\uff96\051\uff96\052\uff96" +
    "\053\uff96\054\uff96\055\uff96\056\uff96\057\uff96\060\uff96\064" +
    "\uff96\065\uff96\001\002\000\034\017\046\023\051\024\061" +
    "\025\050\026\056\034\031\036\011\042\062\061\043\062" +
    "\057\063\054\064\052\065\020\001\002\000\044\002\uffb4" +
    "\004\uffb4\005\uffb4\006\uffb4\007\uffb4\010\uffb4\012\uffb4\013" +
    "\uffb4\014\uffb4\016\uffb4\017\uffb4\020\uffb4\021\uffb4\022\uffb4" +
    "\030\234\036\uffb4\065\uffb4\001\002\000\006\017\225\065" +
    "\117\001\002\000\044\002\ufff5\004\ufff5\005\ufff5\006\ufff5" +
    "\007\ufff5\010\ufff5\012\ufff5\013\ufff5\014\ufff5\016\ufff5\017" +
    "\ufff5\020\ufff5\021\ufff5\022\ufff5\030\ufff5\036\ufff5\065\ufff5" +
    "\001\002\000\004\040\222\001\002\000\034\017\046\023" +
    "\051\024\061\025\050\026\056\034\031\036\011\042\062" +
    "\061\043\062\057\063\054\064\052\065\020\001\002\000" +
    "\004\002\204\001\002\000\130\002\uffde\004\uffde\005\uffde" +
    "\006\uffde\007\uffde\010\uffde\011\uffde\012\uffde\013\uffde\014" +
    "\uffde\016\uffde\017\uffde\020\uffde\021\uffde\022\uffde\027\uffde" +
    "\030\uffde\031\uffde\032\uffde\033\uffde\034\uffde\035\uffde\036" +
    "\uffde\037\uffde\040\uffde\041\uffde\042\uffde\043\uffde\044\uffde" +
    "\045\uffde\046\uffde\047\uffde\050\uffde\051\uffde\052\uffde\053" +
    "\uffde\054\uffde\055\uffde\056\uffde\057\uffde\060\uffde\064\uffde" +
    "\065\uffde\001\002\000\004\065\173\001\002\000\032\004" +
    "\022\005\ufffe\006\006\007\005\010\016\014\007\017\021" +
    "\020\013\021\ufffe\022\ufffe\036\011\065\020\001\002\000" +
    "\062\002\uff97\004\uff97\005\uff97\006\uff97\007\uff97\010\uff97" +
    "\012\uff97\013\uff97\014\uff97\016\uff97\017\uff97\020\uff97\021" +
    "\uff97\022\uff97\027\uff97\030\uff97\031\163\032\uff97\034\uff97" +
    "\036\uff97\040\uffaa\050\uff97\064\uff97\065\uff97\001\002\000" +
    "\056\002\ufff9\004\ufff9\005\ufff9\006\ufff9\007\ufff9\010\ufff9" +
    "\012\ufff9\013\ufff9\014\ufff9\016\ufff9\017\ufff9\020\ufff9\021" +
    "\ufff9\022\ufff9\027\026\030\ufff9\032\025\034\031\036\027" +
    "\050\032\064\030\065\ufff9\001\002\000\034\017\046\023" +
    "\051\024\061\025\050\026\056\034\031\036\011\042\062" +
    "\061\043\062\057\063\054\064\052\065\020\001\002\000" +
    "\004\065\157\001\002\000\036\017\046\023\051\024\061" +
    "\025\050\026\056\034\031\036\011\037\uffe5\042\062\061" +
    "\043\062\057\063\054\064\052\065\020\001\002\000\126" +
    "\002\uffa5\004\uffa5\005\uffa5\006\uffa5\007\uffa5\010\uffa5\011" +
    "\uffa5\012\uffa5\013\uffa5\014\uffa5\016\uffa5\017\uffa5\020\uffa5" +
    "\021\uffa5\022\uffa5\027\uffa5\030\uffa5\031\uffa5\032\uffa5\033" +
    "\uffa5\034\uffa5\035\uffa5\036\uffa5\037\uffa5\041\uffa5\042\uffa5" +
    "\043\uffa5\044\uffa5\045\uffa5\046\uffa5\047\uffa5\050\uffa5\051" +
    "\uffa5\052\uffa5\053\uffa5\054\uffa5\055\uffa5\056\uffa5\057\uffa5" +
    "\060\uffa5\064\uffa5\065\uffa5\001\002\000\044\017\046\023" +
    "\051\024\061\025\050\026\056\030\uffc8\031\uffc8\032\053" +
    "\034\031\035\uffc8\036\011\042\062\061\043\062\057\063" +
    "\054\064\052\065\044\001\002\000\004\065\037\001\002" +
    "\000\126\002\uffd6\004\uffd6\005\uffd6\006\uffd6\007\uffd6\010" +
    "\uffd6\011\uffd6\012\uffd6\013\uffd6\014\uffd6\016\uffd6\017\uffd6" +
    "\020\uffd6\021\uffd6\022\uffd6\027\uffd6\030\uffd6\031\uffd6\032" +
    "\uffd6\033\uffd6\034\uffd6\035\uffd6\036\uffd6\037\uffd6\041\uffd6" +
    "\042\uffd6\043\uffd6\044\uffd6\045\uffd6\046\uffd6\047\uffd6\050" +
    "\uffd6\051\uffd6\052\uffd6\053\uffd6\054\uffd6\055\uffd6\056\uffd6" +
    "\057\uffd6\060\uffd6\064\uffd6\065\uffd6\001\002\000\126\002" +
    "\uffd8\004\uffd8\005\uffd8\006\uffd8\007\uffd8\010\uffd8\011\uffd8" +
    "\012\uffd8\013\uffd8\014\uffd8\016\uffd8\017\uffd8\020\uffd8\021" +
    "\uffd8\022\uffd8\027\uffd8\030\uffd8\031\uffd8\032\uffd8\033\uffd8" +
    "\034\uffd8\035\uffd8\036\uffd8\037\uffd8\041\uffd8\042\uffd8\043" +
    "\uffd8\044\uffd8\045\uffd8\046\uffd8\047\uffd8\050\uffd8\051\uffd8" +
    "\052\uffd8\053\uffd8\054\uffd8\055\uffd8\056\uffd8\057\uffd8\060" +
    "\uffd8\064\uffd8\065\uffd8\001\002\000\126\002\uffa6\004\uffa6" +
    "\005\uffa6\006\uffa6\007\uffa6\010\uffa6\011\uffa6\012\uffa6\013" +
    "\uffa6\014\uffa6\016\uffa6\017\uffa6\020\uffa6\021\uffa6\022\uffa6" +
    "\027\uffa6\030\uffa6\031\uffa6\032\uffa6\033\uffa6\034\uffa6\035" +
    "\uffa6\036\uffa6\037\uffa6\041\uffa6\042\uffa6\043\uffa6\044\uffa6" +
    "\045\uffa6\046\uffa6\047\uffa6\050\uffa6\051\uffa6\052\uffa6\053" +
    "\uffa6\054\uffa6\055\uffa6\056\uffa6\057\uffa6\060\uffa6\064\uffa6" +
    "\065\uffa6\001\002\000\130\002\uffdd\004\uffdd\005\uffdd\006" +
    "\uffdd\007\uffdd\010\uffdd\011\uffdd\012\uffdd\013\uffdd\014\uffdd" +
    "\016\uffdd\017\uffdd\020\uffdd\021\uffdd\022\uffdd\027\uffdd\030" +
    "\uffdd\031\uffdd\032\uffdd\033\uffdd\034\uffdd\035\uffdd\036\uffdd" +
    "\037\uffdd\040\uffdd\041\uffdd\042\uffdd\043\uffdd\044\uffdd\045" +
    "\uffdd\046\uffdd\047\uffdd\050\uffdd\051\uffdd\052\uffdd\053\uffdd" +
    "\054\uffdd\055\uffdd\056\uffdd\057\uffdd\060\uffdd\064\uffdd\065" +
    "\uffdd\001\002\000\130\002\uffdc\004\uffdc\005\uffdc\006\uffdc" +
    "\007\uffdc\010\uffdc\011\uffdc\012\uffdc\013\uffdc\014\uffdc\016" +
    "\uffdc\017\uffdc\020\uffdc\021\uffdc\022\uffdc\027\uffdc\030\uffdc" +
    "\031\uffdc\032\uffdc\033\uffdc\034\uffdc\035\uffdc\036\uffdc\037" +
    "\uffdc\040\uffdc\041\uffdc\042\uffdc\043\uffdc\044\uffdc\045\uffdc" +
    "\046\uffdc\047\uffdc\050\uffdc\051\uffdc\052\uffdc\053\uffdc\054" +
    "\uffdc\055\uffdc\056\uffdc\057\uffdc\060\uffdc\064\uffdc\065\uffdc" +
    "\001\002\000\010\030\142\031\141\035\uffcc\001\002\000" +
    "\004\035\140\001\002\000\114\002\uffa2\004\uffa2\005\uffa2" +
    "\006\uffa2\007\uffa2\010\uffa2\011\uffa2\012\uffa2\013\uffa2\014" +
    "\uffa2\016\uffa2\017\uffa2\020\uffa2\021\uffa2\022\uffa2\030\uffa2" +
    "\031\uffa2\033\uffa2\035\uffa2\036\uffa2\037\uffa2\041\uffa2\042" +
    "\uffa2\043\uffa2\044\uffa2\045\uffa2\046\uffa2\047\uffa2\051\uffa2" +
    "\052\uffa2\053\uffa2\054\uffa2\055\uffa2\056\uffa2\057\uffa2\060" +
    "\uffa2\065\uffa2\001\002\000\034\017\uffb7\023\uffb7\024\uffb7" +
    "\025\uffb7\026\uffb7\034\uffb7\036\uffb7\042\uffb7\061\uffb7\062" +
    "\uffb7\063\uffb7\064\uffb7\065\uffb7\001\002\000\064\027\uffde" +
    "\030\uffde\031\uffde\032\uffde\034\uffde\035\uffde\036\uffde\040" +
    "\136\041\uffde\042\uffde\043\uffde\044\uffde\045\uffde\046\uffde" +
    "\047\uffde\050\uffde\051\uffde\052\uffde\053\uffde\054\uffde\055" +
    "\uffde\056\uffde\057\uffde\060\uffde\064\uffde\001\002\000\114" +
    "\002\uff9b\004\uff9b\005\uff9b\006\uff9b\007\uff9b\010\uff9b\011" +
    "\uff9b\012\uff9b\013\uff9b\014\uff9b\016\uff9b\017\uff9b\020\uff9b" +
    "\021\uff9b\022\uff9b\030\uff9b\031\uff9b\033\uff9b\035\uff9b\036" +
    "\uff9b\037\uff9b\041\uff9b\042\uff9b\043\uff9b\044\uff9b\045\uff9b" +
    "\046\uff9b\047\uff9b\051\uff9b\052\uff9b\053\uff9b\054\uff9b\055" +
    "\uff9b\056\uff9b\057\uff9b\060\uff9b\065\uff9b\001\002\000\004" +
    "\036\115\001\002\000\046\030\uffc9\031\uffc9\035\uffc9\041" +
    "\077\042\070\043\104\044\101\045\103\046\073\047\067" +
    "\051\076\052\072\053\106\054\102\055\074\056\075\057" +
    "\071\060\105\001\002\000\114\002\uff9f\004\uff9f\005\uff9f" +
    "\006\uff9f\007\uff9f\010\uff9f\011\uff9f\012\uff9f\013\uff9f\014" +
    "\uff9f\016\uff9f\017\uff9f\020\uff9f\021\uff9f\022\uff9f\030\uff9f" +
    "\031\uff9f\033\uff9f\035\uff9f\036\uff9f\037\uff9f\041\uff9f\042" +
    "\uff9f\043\uff9f\044\uff9f\045\uff9f\046\uff9f\047\uff9f\051\uff9f" +
    "\052\uff9f\053\uff9f\054\uff9f\055\uff9f\056\uff9f\057\uff9f\060" +
    "\uff9f\065\uff9f\001\002\000\114\002\uffa1\004\uffa1\005\uffa1" +
    "\006\uffa1\007\uffa1\010\uffa1\011\uffa1\012\uffa1\013\uffa1\014" +
    "\uffa1\016\uffa1\017\uffa1\020\uffa1\021\uffa1\022\uffa1\030\uffa1" +
    "\031\uffa1\033\uffa1\035\uffa1\036\uffa1\037\uffa1\041\uffa1\042" +
    "\uffa1\043\uffa1\044\uffa1\045\uffa1\046\uffa1\047\uffa1\051\uffa1" +
    "\052\uffa1\053\uffa1\054\uffa1\055\uffa1\056\uffa1\057\uffa1\060" +
    "\uffa1\065\uffa1\001\002\000\114\002\uff9d\004\uff9d\005\uff9d" +
    "\006\uff9d\007\uff9d\010\uff9d\011\uff9d\012\uff9d\013\uff9d\014" +
    "\uff9d\016\uff9d\017\uff9d\020\uff9d\021\uff9d\022\uff9d\030\uff9d" +
    "\031\uff9d\033\uff9d\035\uff9d\036\uff9d\037\uff9d\041\uff9d\042" +
    "\uff9d\043\uff9d\044\uff9d\045\uff9d\046\uff9d\047\uff9d\051\uff9d" +
    "\052\uff9d\053\uff9d\054\uff9d\055\uff9d\056\uff9d\057\uff9d\060" +
    "\uff9d\065\uff9d\001\002\000\034\017\046\023\051\024\061" +
    "\025\050\026\056\034\031\036\011\042\062\061\043\062" +
    "\057\063\054\064\052\065\020\001\002\000\114\002\uff9e" +
    "\004\uff9e\005\uff9e\006\uff9e\007\uff9e\010\uff9e\011\uff9e\012" +
    "\uff9e\013\uff9e\014\uff9e\016\uff9e\017\uff9e\020\uff9e\021\uff9e" +
    "\022\uff9e\030\uff9e\031\uff9e\033\uff9e\035\uff9e\036\uff9e\037" +
    "\uff9e\041\uff9e\042\uff9e\043\uff9e\044\uff9e\045\uff9e\046\uff9e" +
    "\047\uff9e\051\uff9e\052\uff9e\053\uff9e\054\uff9e\055\uff9e\056" +
    "\uff9e\057\uff9e\060\uff9e\065\uff9e\001\002\000\034\017\046" +
    "\023\051\024\061\025\050\026\056\034\031\036\011\042" +
    "\062\061\043\062\057\063\054\064\052\065\020\001\002" +
    "\000\114\002\uff9c\004\uff9c\005\uff9c\006\uff9c\007\uff9c\010" +
    "\uff9c\011\uff9c\012\uff9c\013\uff9c\014\uff9c\016\uff9c\017\uff9c" +
    "\020\uff9c\021\uff9c\022\uff9c\030\uff9c\031\uff9c\033\uff9c\035" +
    "\uff9c\036\uff9c\037\uff9c\041\uff9c\042\uff9c\043\uff9c\044\uff9c" +
    "\045\uff9c\046\uff9c\047\uff9c\051\uff9c\052\uff9c\053\uff9c\054" +
    "\uff9c\055\uff9c\056\uff9c\057\uff9c\060\uff9c\065\uff9c\001\002" +
    "\000\034\017\uffb6\023\uffb6\024\uffb6\025\uffb6\026\uffb6\034" +
    "\uffb6\036\uffb6\042\uffb6\061\uffb6\062\uffb6\063\uffb6\064\uffb6" +
    "\065\uffb6\001\002\000\114\002\uff99\004\uff99\005\uff99\006" +
    "\uff99\007\uff99\010\uff99\011\uff99\012\uff99\013\uff99\014\uff99" +
    "\016\uff99\017\uff99\020\uff99\021\uff99\022\uff99\030\uff99\031" +
    "\uff99\033\uff99\035\uff99\036\uff99\037\uff99\041\uff99\042\uff99" +
    "\043\uff99\044\uff99\045\uff99\046\uff99\047\uff99\051\uff99\052" +
    "\uff99\053\uff99\054\uff99\055\uff99\056\uff99\057\uff99\060\uff99" +
    "\065\uff99\001\002\000\114\002\uffa0\004\uffa0\005\uffa0\006" +
    "\uffa0\007\uffa0\010\uffa0\011\uffa0\012\uffa0\013\uffa0\014\uffa0" +
    "\016\uffa0\017\uffa0\020\uffa0\021\uffa0\022\uffa0\030\uffa0\031" +
    "\uffa0\033\uffa0\035\uffa0\036\uffa0\037\uffa0\041\uffa0\042\uffa0" +
    "\043\uffa0\044\uffa0\045\uffa0\046\uffa0\047\uffa0\051\uffa0\052" +
    "\uffa0\053\uffa0\054\uffa0\055\uffa0\056\uffa0\057\uffa0\060\uffa0" +
    "\065\uffa0\001\002\000\034\017\uffb8\023\uffb8\024\uffb8\025" +
    "\uffb8\026\uffb8\034\uffb8\036\uffb8\042\uffb8\061\uffb8\062\uffb8" +
    "\063\uffb8\064\uffb8\065\uffb8\001\002\000\126\002\uff9a\004" +
    "\uff9a\005\uff9a\006\uff9a\007\uff9a\010\uff9a\011\uff9a\012\uff9a" +
    "\013\uff9a\014\uff9a\016\uff9a\017\uff9a\020\uff9a\021\uff9a\022" +
    "\uff9a\027\026\030\uff9a\031\uff9a\032\025\033\uff9a\034\031" +
    "\035\uff9a\036\027\037\uff9a\041\uff9a\042\uff9a\043\uff9a\044" +
    "\uff9a\045\uff9a\046\uff9a\047\uff9a\050\032\051\uff9a\052\uff9a" +
    "\053\uff9a\054\uff9a\055\uff9a\056\uff9a\057\uff9a\060\uff9a\064" +
    "\030\065\uff9a\001\002\000\004\035\uffcf\001\002\000\126" +
    "\002\uff97\004\uff97\005\uff97\006\uff97\007\uff97\010\uff97\011" +
    "\uff97\012\uff97\013\uff97\014\uff97\016\uff97\017\uff97\020\uff97" +
    "\021\uff97\022\uff97\027\uff97\030\uff97\031\uff97\032\uff97\033" +
    "\uff97\034\uff97\035\uff97\036\uff97\037\uff97\041\uff97\042\uff97" +
    "\043\uff97\044\uff97\045\uff97\046\uff97\047\uff97\050\uff97\051" +
    "\uff97\052\uff97\053\uff97\054\uff97\055\uff97\056\uff97\057\uff97" +
    "\060\uff97\064\uff97\065\uff97\001\002\000\114\002\uffa3\004" +
    "\uffa3\005\uffa3\006\uffa3\007\uffa3\010\uffa3\011\uffa3\012\uffa3" +
    "\013\uffa3\014\uffa3\016\uffa3\017\uffa3\020\uffa3\021\uffa3\022" +
    "\uffa3\030\uffa3\031\uffa3\033\uffa3\035\uffa3\036\uffa3\037\uffa3" +
    "\041\077\042\070\043\104\044\101\045\103\046\073\047" +
    "\067\051\076\052\072\053\106\054\102\055\074\056\075" +
    "\057\071\060\105\065\uffa3\001\002\000\026\017\uffc1\023" +
    "\uffc1\024\uffc1\025\uffc1\026\uffc1\034\uffc1\036\uffc1\063\uffc1" +
    "\064\uffc1\065\uffc1\001\002\000\026\017\uffc6\023\uffc6\024" +
    "\uffc6\025\uffc6\026\uffc6\034\uffc6\036\uffc6\063\uffc6\064\uffc6" +
    "\065\uffc6\001\002\000\026\017\uffba\023\uffba\024\uffba\025" +
    "\uffba\026\uffba\034\uffba\036\uffba\063\uffba\064\uffba\065\uffba" +
    "\001\002\000\026\017\uffbf\023\uffbf\024\uffbf\025\uffbf\026" +
    "\uffbf\034\uffbf\036\uffbf\063\uffbf\064\uffbf\065\uffbf\001\002" +
    "\000\026\017\uffc2\023\uffc2\024\uffc2\025\uffc2\026\uffc2\034" +
    "\uffc2\036\uffc2\063\uffc2\064\uffc2\065\uffc2\001\002\000\026" +
    "\017\uffbc\023\uffbc\024\uffbc\025\uffbc\026\uffbc\034\uffbc\036" +
    "\uffbc\063\uffbc\064\uffbc\065\uffbc\001\002\000\026\017\uffbb" +
    "\023\uffbb\024\uffbb\025\uffbb\026\uffbb\034\uffbb\036\uffbb\063" +
    "\uffbb\064\uffbb\065\uffbb\001\002\000\026\017\uffc0\023\uffc0" +
    "\024\uffc0\025\uffc0\026\uffc0\034\uffc0\036\uffc0\063\uffc0\064" +
    "\uffc0\065\uffc0\001\002\000\026\017\uffc7\023\uffc7\024\uffc7" +
    "\025\uffc7\026\uffc7\034\uffc7\036\uffc7\063\uffc7\064\uffc7\065" +
    "\uffc7\001\002\000\026\017\046\023\051\024\061\025\050" +
    "\026\056\034\031\036\011\063\054\064\052\065\020\001" +
    "\002\000\026\017\uffc4\023\uffc4\024\uffc4\025\uffc4\026\uffc4" +
    "\034\uffc4\036\uffc4\063\uffc4\064\uffc4\065\uffc4\001\002\000" +
    "\026\017\uffbd\023\uffbd\024\uffbd\025\uffbd\026\uffbd\034\uffbd" +
    "\036\uffbd\063\uffbd\064\uffbd\065\uffbd\001\002\000\026\017" +
    "\uffc3\023\uffc3\024\uffc3\025\uffc3\026\uffc3\034\uffc3\036\uffc3" +
    "\063\uffc3\064\uffc3\065\uffc3\001\002\000\026\017\uffc5\023" +
    "\uffc5\024\uffc5\025\uffc5\026\uffc5\034\uffc5\036\uffc5\063\uffc5" +
    "\064\uffc5\065\uffc5\001\002\000\026\017\uffb9\023\uffb9\024" +
    "\uffb9\025\uffb9\026\uffb9\034\uffb9\036\uffb9\063\uffb9\064\uffb9" +
    "\065\uffb9\001\002\000\026\017\uffbe\023\uffbe\024\uffbe\025" +
    "\uffbe\026\uffbe\034\uffbe\036\uffbe\063\uffbe\064\uffbe\065\uffbe" +
    "\001\002\000\114\002\uffa4\004\uffa4\005\uffa4\006\uffa4\007" +
    "\uffa4\010\uffa4\011\uffa4\012\uffa4\013\uffa4\014\uffa4\016\uffa4" +
    "\017\uffa4\020\uffa4\021\uffa4\022\uffa4\030\uffa4\031\uffa4\033" +
    "\uffa4\035\uffa4\036\uffa4\037\uffa4\041\uffa4\042\uffa4\043\uffa4" +
    "\044\uffa4\045\uffa4\046\uffa4\047\uffa4\051\uffa4\052\uffa4\053" +
    "\uffa4\054\uffa4\055\uffa4\056\uffa4\057\uffa4\060\uffa4\065\uffa4" +
    "\001\002\000\042\033\111\041\077\042\070\043\104\044" +
    "\101\045\103\046\073\047\067\051\076\052\072\053\106" +
    "\054\102\055\074\056\075\057\071\060\105\001\002\000" +
    "\004\040\112\001\002\000\034\017\046\023\051\024\061" +
    "\025\050\026\056\034\031\036\011\042\062\061\043\062" +
    "\057\063\054\064\052\065\020\001\002\000\046\030\uffcb" +
    "\031\uffcb\035\uffcb\041\077\042\070\043\104\044\101\045" +
    "\103\046\073\047\067\051\076\052\072\053\106\054\102" +
    "\055\074\056\075\057\071\060\105\001\002\000\114\002" +
    "\uffd5\004\uffd5\005\uffd5\006\uffd5\007\uffd5\010\uffd5\011\uffd5" +
    "\012\uffd5\013\uffd5\014\uffd5\016\uffd5\017\uffd5\020\uffd5\021" +
    "\uffd5\022\uffd5\030\uffd5\031\uffd5\033\uffd5\035\uffd5\036\uffd5" +
    "\037\uffd5\041\uffd5\042\uffd5\043\uffd5\044\uffd5\045\uffd5\046" +
    "\uffd5\047\uffd5\051\uffd5\052\uffd5\053\uffd5\054\uffd5\055\uffd5" +
    "\056\uffd5\057\uffd5\060\uffd5\065\uffd5\001\002\000\010\026" +
    "\121\037\uffd3\065\117\001\002\000\006\031\133\037\uffb0" +
    "\001\002\000\052\002\uffac\004\uffac\005\uffac\006\uffac\007" +
    "\uffac\010\uffac\012\uffac\013\uffac\014\uffac\016\uffac\017\uffac" +
    "\020\uffac\021\uffac\022\uffac\030\uffac\031\127\036\uffac\037" +
    "\uffac\040\uffac\065\uffac\001\002\000\004\037\123\001\002" +
    "\000\004\037\uffd1\001\002\000\004\037\uffd4\001\002\000" +
    "\032\004\022\005\ufffe\006\006\007\005\010\016\014\007" +
    "\017\021\020\013\021\ufffe\022\ufffe\036\011\065\020\001" +
    "\002\000\004\005\126\001\002\000\012\005\ufffb\012\ufffb" +
    "\013\ufffb\016\ufffb\001\002\000\114\002\uff98\004\uff98\005" +
    "\uff98\006\uff98\007\uff98\010\uff98\011\uff98\012\uff98\013\uff98" +
    "\014\uff98\016\uff98\017\uff98\020\uff98\021\uff98\022\uff98\030" +
    "\uff98\031\uff98\033\uff98\035\uff98\036\uff98\037\uff98\041\uff98" +
    "\042\uff98\043\uff98\044\uff98\045\uff98\046\uff98\047\uff98\051" +
    "\uff98\052\uff98\053\uff98\054\uff98\055\uff98\056\uff98\057\uff98" +
    "\060\uff98\065\uff98\001\002\000\004\065\131\001\002\000" +
    "\054\002\uffda\004\uffda\005\uffda\006\uffda\007\uffda\010\uffda" +
    "\012\uffda\013\uffda\014\uffda\015\uffda\016\uffda\017\uffda\020" +
    "\uffda\021\uffda\022\uffda\030\uffda\031\uffda\036\uffda\037\uffda" +
    "\040\uffda\065\uffda\001\002\000\054\002\uffac\004\uffac\005" +
    "\uffac\006\uffac\007\uffac\010\uffac\012\uffac\013\uffac\014\uffac" +
    "\015\uffac\016\uffac\017\uffac\020\uffac\021\uffac\022\uffac\030" +
    "\uffac\031\127\036\uffac\037\uffac\040\uffac\065\uffac\001\002" +
    "\000\054\002\uffad\004\uffad\005\uffad\006\uffad\007\uffad\010" +
    "\uffad\012\uffad\013\uffad\014\uffad\015\uffad\016\uffad\017\uffad" +
    "\020\uffad\021\uffad\022\uffad\030\uffad\031\uffad\036\uffad\037" +
    "\uffad\040\uffad\065\uffad\001\002\000\004\026\135\001\002" +
    "\000\004\037\uffd2\001\002\000\004\037\uffb1\001\002\000" +
    "\034\017\046\023\051\024\061\025\050\026\056\034\031" +
    "\036\011\042\062\061\043\062\057\063\054\064\052\065" +
    "\020\001\002\000\046\030\uffca\031\uffca\035\uffca\041\077" +
    "\042\070\043\104\044\101\045\103\046\073\047\067\051" +
    "\076\052\072\053\106\054\102\055\074\056\075\057\071" +
    "\060\105\001\002\000\126\002\uffd0\004\uffd0\005\uffd0\006" +
    "\uffd0\007\uffd0\010\uffd0\011\uffd0\012\uffd0\013\uffd0\014\uffd0" +
    "\016\uffd0\017\uffd0\020\uffd0\021\uffd0\022\uffd0\027\uffd0\030" +
    "\uffd0\031\uffd0\032\uffd0\033\uffd0\034\uffd0\035\uffd0\036\uffd0" +
    "\037\uffd0\041\uffd0\042\uffd0\043\uffd0\044\uffd0\045\uffd0\046" +
    "\uffd0\047\uffd0\050\uffd0\051\uffd0\052\uffd0\053\uffd0\054\uffd0" +
    "\055\uffd0\056\uffd0\057\uffd0\060\uffd0\064\uffd0\065\uffd0\001" +
    "\002\000\044\017\uffb3\023\uffb3\024\uffb3\025\uffb3\026\uffb3" +
    "\030\uffb3\031\uffb3\032\uffb3\034\uffb3\035\uffb3\036\uffb3\042" +
    "\uffb3\061\uffb3\062\uffb3\063\uffb3\064\uffb3\065\uffb3\001\002" +
    "\000\044\017\uffb2\023\uffb2\024\uffb2\025\uffb2\026\uffb2\030" +
    "\uffb2\031\uffb2\032\uffb2\034\uffb2\035\uffb2\036\uffb2\042\uffb2" +
    "\061\uffb2\062\uffb2\063\uffb2\064\uffb2\065\uffb2\001\002\000" +
    "\004\035\uffce\001\002\000\044\017\046\023\051\024\061" +
    "\025\050\026\056\030\uffc8\031\uffc8\032\053\034\031\035" +
    "\uffc8\036\011\042\062\061\043\062\057\063\054\064\052" +
    "\065\044\001\002\000\010\030\142\031\141\035\uffcc\001" +
    "\002\000\004\035\uffcd\001\002\000\004\037\156\001\002" +
    "\000\020\002\uffe6\005\uffe6\012\uffe6\013\uffe6\016\uffe6\030" +
    "\uffe6\037\uffe6\001\002\000\106\002\uffae\004\uffae\005\uffae" +
    "\006\uffae\007\uffae\010\uffae\012\uffae\013\uffae\014\uffae\016" +
    "\uffae\017\uffae\020\uffae\021\uffae\022\uffae\030\uffae\031\153" +
    "\036\uffae\037\uffae\041\077\042\070\043\104\044\101\045" +
    "\103\046\073\047\067\051\076\052\072\053\106\054\102" +
    "\055\074\056\075\057\071\060\105\065\uffae\001\002\000" +
    "\046\002\uffd9\004\uffd9\005\uffd9\006\uffd9\007\uffd9\010\uffd9" +
    "\012\uffd9\013\uffd9\014\uffd9\016\uffd9\017\uffd9\020\uffd9\021" +
    "\uffd9\022\uffd9\030\uffd9\036\uffd9\037\uffd9\065\uffd9\001\002" +
    "\000\034\017\046\023\051\024\061\025\050\026\056\034" +
    "\031\036\011\042\062\061\043\062\057\063\054\064\052" +
    "\065\020\001\002\000\106\002\uffae\004\uffae\005\uffae\006" +
    "\uffae\007\uffae\010\uffae\012\uffae\013\uffae\014\uffae\016\uffae" +
    "\017\uffae\020\uffae\021\uffae\022\uffae\030\uffae\031\153\036" +
    "\uffae\037\uffae\041\077\042\070\043\104\044\101\045\103" +
    "\046\073\047\067\051\076\052\072\053\106\054\102\055" +
    "\074\056\075\057\071\060\105\065\uffae\001\002\000\046" +
    "\002\uffaf\004\uffaf\005\uffaf\006\uffaf\007\uffaf\010\uffaf\012" +
    "\uffaf\013\uffaf\014\uffaf\016\uffaf\017\uffaf\020\uffaf\021\uffaf" +
    "\022\uffaf\030\uffaf\036\uffaf\037\uffaf\065\uffaf\001\002\000" +
    "\126\002\uffa7\004\uffa7\005\uffa7\006\uffa7\007\uffa7\010\uffa7" +
    "\011\uffa7\012\uffa7\013\uffa7\014\uffa7\016\uffa7\017\uffa7\020" +
    "\uffa7\021\uffa7\022\uffa7\027\uffa7\030\uffa7\031\uffa7\032\uffa7" +
    "\033\uffa7\034\uffa7\035\uffa7\036\uffa7\037\uffa7\041\uffa7\042" +
    "\uffa7\043\uffa7\044\uffa7\045\uffa7\046\uffa7\047\uffa7\050\uffa7" +
    "\051\uffa7\052\uffa7\053\uffa7\054\uffa7\055\uffa7\056\uffa7\057" +
    "\uffa7\060\uffa7\064\uffa7\065\uffa7\001\002\000\010\034\031" +
    "\036\027\064\030\001\002\000\126\002\uffd7\004\uffd7\005" +
    "\uffd7\006\uffd7\007\uffd7\010\uffd7\011\uffd7\012\uffd7\013\uffd7" +
    "\014\uffd7\016\uffd7\017\uffd7\020\uffd7\021\uffd7\022\uffd7\027" +
    "\uffd7\030\uffd7\031\uffd7\032\uffd7\033\uffd7\034\uffd7\035\uffd7" +
    "\036\uffd7\037\uffd7\041\uffd7\042\uffd7\043\uffd7\044\uffd7\045" +
    "\uffd7\046\uffd7\047\uffd7\050\uffd7\051\uffd7\052\uffd7\053\uffd7" +
    "\054\uffd7\055\uffd7\056\uffd7\057\uffd7\060\uffd7\064\uffd7\065" +
    "\uffd7\001\002\000\042\033\162\041\077\042\070\043\104" +
    "\044\101\045\103\046\073\047\067\051\076\052\072\053" +
    "\106\054\102\055\074\056\075\057\071\060\105\001\002" +
    "\000\130\002\uffdb\004\uffdb\005\uffdb\006\uffdb\007\uffdb\010" +
    "\uffdb\011\uffdb\012\uffdb\013\uffdb\014\uffdb\016\uffdb\017\uffdb" +
    "\020\uffdb\021\uffdb\022\uffdb\027\uffdb\030\uffdb\031\uffdb\032" +
    "\uffdb\033\uffdb\034\uffdb\035\uffdb\036\uffdb\037\uffdb\040\uffdb" +
    "\041\uffdb\042\uffdb\043\uffdb\044\uffdb\045\uffdb\046\uffdb\047" +
    "\uffdb\050\uffdb\051\uffdb\052\uffdb\053\uffdb\054\uffdb\055\uffdb" +
    "\056\uffdb\057\uffdb\060\uffdb\064\uffdb\065\uffdb\001\002\000" +
    "\006\036\011\065\020\001\002\000\004\040\uffdf\001\002" +
    "\000\022\027\uff97\031\163\032\uff97\034\uff97\036\uff97\040" +
    "\uffaa\050\uff97\064\uff97\001\002\000\016\027\026\032\025" +
    "\034\031\036\027\050\032\064\030\001\002\000\004\040" +
    "\uffab\001\002\000\004\005\171\001\002\000\044\002\ufff8" +
    "\004\ufff8\005\ufff8\006\ufff8\007\ufff8\010\ufff8\012\ufff8\013" +
    "\ufff8\014\ufff8\016\ufff8\017\ufff8\020\ufff8\021\ufff8\022\ufff8" +
    "\030\ufff8\036\ufff8\065\ufff8\001\002\000\004\036\115\001" +
    "\002\000\010\036\uffe2\047\uffe2\050\175\001\002\000\006" +
    "\036\uffe0\047\200\001\002\000\004\065\176\001\002\000" +
    "\010\036\uffe2\047\uffe2\050\175\001\002\000\006\036\uffe3" +
    "\047\uffe3\001\002\000\004\065\202\001\002\000\004\036" +
    "\uffe4\001\002\000\004\036\uffe1\001\002\000\044\002\ufff2" +
    "\004\ufff2\005\ufff2\006\ufff2\007\ufff2\010\ufff2\012\ufff2\013" +
    "\ufff2\014\ufff2\016\ufff2\017\ufff2\020\ufff2\021\ufff2\022\ufff2" +
    "\030\ufff2\036\ufff2\065\ufff2\001\002\000\004\002\001\001" +
    "\002\000\042\011\206\041\077\042\070\043\104\044\101" +
    "\045\103\046\073\047\067\051\076\052\072\053\106\054" +
    "\102\055\074\056\075\057\071\060\105\001\002\000\036" +
    "\004\022\005\ufffe\006\006\007\005\010\016\012\ufffe\013" +
    "\ufffe\014\007\017\021\020\013\021\ufffe\022\ufffe\036\011" +
    "\065\020\001\002\000\010\005\uffed\012\uffed\013\211\001" +
    "\002\000\006\005\uffeb\012\216\001\002\000\034\017\046" +
    "\023\051\024\061\025\050\026\056\034\031\036\011\042" +
    "\062\061\043\062\057\063\054\064\052\065\020\001\002" +
    "\000\042\011\213\041\077\042\070\043\104\044\101\045" +
    "\103\046\073\047\067\051\076\052\072\053\106\054\102" +
    "\055\074\056\075\057\071\060\105\001\002\000\036\004" +
    "\022\005\ufffe\006\006\007\005\010\016\012\ufffe\013\ufffe" +
    "\014\007\017\021\020\013\021\ufffe\022\ufffe\036\011\065" +
    "\020\001\002\000\010\005\uffed\012\uffed\013\211\001\002" +
    "\000\006\005\uffee\012\uffee\001\002\000\032\004\022\005" +
    "\ufffe\006\006\007\005\010\016\014\007\017\021\020\013" +
    "\021\ufffe\022\ufffe\036\011\065\020\001\002\000\004\005" +
    "\220\001\002\000\044\002\uffef\004\uffef\005\uffef\006\uffef" +
    "\007\uffef\010\uffef\012\uffef\013\uffef\014\uffef\016\uffef\017" +
    "\uffef\020\uffef\021\uffef\022\uffef\030\uffef\036\uffef\065\uffef" +
    "\001\002\000\004\005\uffec\001\002\000\034\017\046\023" +
    "\051\024\061\025\050\026\056\034\031\036\011\042\062" +
    "\061\043\062\057\063\054\064\052\065\020\001\002\000" +
    "\044\002\ufffa\004\ufffa\005\ufffa\006\ufffa\007\ufffa\010\ufffa" +
    "\012\ufffa\013\ufffa\014\ufffa\016\ufffa\017\ufffa\020\ufffa\021" +
    "\ufffa\022\ufffa\030\ufffa\036\ufffa\065\ufffa\001\002\000\046" +
    "\002\uffe9\004\uffe9\005\uffe9\006\uffe9\007\uffe9\010\uffe9\012" +
    "\uffe9\013\uffe9\014\uffe9\016\uffe9\017\uffe9\020\uffe9\021\uffe9" +
    "\022\uffe9\030\uffe9\036\uffe9\040\231\065\uffe9\001\002\000" +
    "\004\065\226\001\002\000\004\036\115\001\002\000\044" +
    "\002\ufff1\004\ufff1\005\ufff1\006\ufff1\007\ufff1\010\ufff1\012" +
    "\ufff1\013\ufff1\014\ufff1\016\ufff1\017\ufff1\020\ufff1\021\ufff1" +
    "\022\ufff1\030\ufff1\036\ufff1\065\ufff1\001\002\000\044\002" +
    "\ufff0\004\ufff0\005\ufff0\006\ufff0\007\ufff0\010\ufff0\012\ufff0" +
    "\013\ufff0\014\ufff0\016\ufff0\017\ufff0\020\ufff0\021\ufff0\022" +
    "\ufff0\030\ufff0\036\ufff0\065\ufff0\001\002\000\034\017\046" +
    "\023\051\024\061\025\050\026\056\034\031\036\011\042" +
    "\062\061\043\062\057\063\054\064\052\065\020\001\002" +
    "\000\044\002\uffea\004\uffea\005\uffea\006\uffea\007\uffea\010" +
    "\uffea\012\uffea\013\uffea\014\uffea\016\uffea\017\uffea\020\uffea" +
    "\021\uffea\022\uffea\030\uffea\036\uffea\065\uffea\001\002\000" +
    "\042\002\ufffe\004\022\005\ufffe\006\006\007\005\010\016" +
    "\012\ufffe\013\ufffe\014\007\016\ufffe\017\021\020\013\021" +
    "\ufffe\022\ufffe\036\011\065\020\001\002\000\042\002\uffb5" +
    "\004\uffb5\005\uffb5\006\uffb5\007\uffb5\010\uffb5\012\uffb5\013" +
    "\uffb5\014\uffb5\016\uffb5\017\uffb5\020\uffb5\021\uffb5\022\uffb5" +
    "\036\uffb5\065\uffb5\001\002\000\020\002\uffff\005\uffff\012" +
    "\uffff\013\uffff\016\uffff\021\uffff\022\uffff\001\002\000\042" +
    "\037\237\041\077\042\070\043\104\044\101\045\103\046" +
    "\073\047\067\051\076\052\072\053\106\054\102\055\074" +
    "\056\075\057\071\060\105\001\002\000\126\002\uff95\004" +
    "\uff95\005\uff95\006\uff95\007\uff95\010\uff95\011\uff95\012\uff95" +
    "\013\uff95\014\uff95\016\uff95\017\uff95\020\uff95\021\uff95\022" +
    "\uff95\027\uff95\030\uff95\031\uff95\032\uff95\033\uff95\034\uff95" +
    "\035\uff95\036\uff95\037\uff95\041\uff95\042\uff95\043\uff95\044" +
    "\uff95\045\uff95\046\uff95\047\uff95\050\uff95\051\uff95\052\uff95" +
    "\053\uff95\054\uff95\055\uff95\056\uff95\057\uff95\060\uff95\064" +
    "\uff95\065\uff95\001\002\000\004\015\254\001\002\000\010" +
    "\015\uffac\031\127\040\242\001\002\000\034\017\046\023" +
    "\051\024\061\025\050\026\056\034\031\036\011\042\062" +
    "\061\043\062\057\063\054\064\052\065\020\001\002\000" +
    "\042\031\244\041\077\042\070\043\104\044\101\045\103" +
    "\046\073\047\067\051\076\052\072\053\106\054\102\055" +
    "\074\056\075\057\071\060\105\001\002\000\034\017\046" +
    "\023\051\024\061\025\050\026\056\034\031\036\011\042" +
    "\062\061\043\062\057\063\054\064\052\065\020\001\002" +
    "\000\044\004\uffa8\031\246\041\077\042\070\043\104\044" +
    "\101\045\103\046\073\047\067\051\076\052\072\053\106" +
    "\054\102\055\074\056\075\057\071\060\105\001\002\000" +
    "\034\017\046\023\051\024\061\025\050\026\056\034\031" +
    "\036\011\042\062\061\043\062\057\063\054\064\052\065" +
    "\020\001\002\000\004\004\250\001\002\000\032\004\022" +
    "\005\ufffe\006\006\007\005\010\016\014\007\017\021\020" +
    "\013\021\ufffe\022\ufffe\036\011\065\020\001\002\000\004" +
    "\005\252\001\002\000\044\002\ufff4\004\ufff4\005\ufff4\006" +
    "\ufff4\007\ufff4\010\ufff4\012\ufff4\013\ufff4\014\ufff4\016\ufff4" +
    "\017\ufff4\020\ufff4\021\ufff4\022\ufff4\030\ufff4\036\ufff4\065" +
    "\ufff4\001\002\000\042\004\uffa9\041\077\042\070\043\104" +
    "\044\101\045\103\046\073\047\067\051\076\052\072\053" +
    "\106\054\102\055\074\056\075\057\071\060\105\001\002" +
    "\000\034\017\046\023\051\024\061\025\050\026\056\034" +
    "\031\036\011\042\062\061\043\062\057\063\054\064\052" +
    "\065\020\001\002\000\004\004\256\001\002\000\032\004" +
    "\022\005\ufffe\006\006\007\005\010\016\014\007\017\021" +
    "\020\013\021\ufffe\022\ufffe\036\011\065\020\001\002\000" +
    "\004\005\260\001\002\000\044\002\ufff3\004\ufff3\005\ufff3" +
    "\006\ufff3\007\ufff3\010\ufff3\012\ufff3\013\ufff3\014\ufff3\016" +
    "\ufff3\017\ufff3\020\ufff3\021\ufff3\022\ufff3\030\ufff3\036\ufff3" +
    "\065\ufff3\001\002\000\042\004\262\041\077\042\070\043" +
    "\104\044\101\045\103\046\073\047\067\051\076\052\072" +
    "\053\106\054\102\055\074\056\075\057\071\060\105\001" +
    "\002\000\032\004\022\005\ufffe\006\006\007\005\010\016" +
    "\014\007\017\021\020\013\021\ufffe\022\ufffe\036\011\065" +
    "\020\001\002\000\004\005\264\001\002\000\044\002\ufff7" +
    "\004\ufff7\005\ufff7\006\ufff7\007\ufff7\010\ufff7\012\ufff7\013" +
    "\ufff7\014\ufff7\016\ufff7\017\ufff7\020\ufff7\021\ufff7\022\ufff7" +
    "\030\ufff7\036\ufff7\065\ufff7\001\002\000\004\016\266\001" +
    "\002\000\034\017\046\023\051\024\061\025\050\026\056" +
    "\034\031\036\011\042\062\061\043\062\057\063\054\064" +
    "\052\065\020\001\002\000\102\002\ufff6\004\ufff6\005\ufff6" +
    "\006\ufff6\007\ufff6\010\ufff6\012\ufff6\013\ufff6\014\ufff6\016" +
    "\ufff6\017\ufff6\020\ufff6\021\ufff6\022\ufff6\030\ufff6\036\ufff6" +
    "\041\077\042\070\043\104\044\101\045\103\046\073\047" +
    "\067\051\076\052\072\053\106\054\102\055\074\056\075" +
    "\057\071\060\105\065\ufff6\001\002\000\050\002\uffe5\005" +
    "\uffe5\012\uffe5\013\uffe5\016\uffe5\017\046\023\051\024\061" +
    "\025\050\026\056\030\uffe5\034\031\036\011\042\062\061" +
    "\043\062\057\063\054\064\052\065\020\001\002\000\016" +
    "\002\uffe7\005\uffe7\012\uffe7\013\uffe7\016\uffe7\030\uffe7\001" +
    "\002\000\014\002\000\005\000\012\000\013\000\016\000" +
    "\001\002\000\016\002\uffb4\005\uffb4\012\uffb4\013\uffb4\016" +
    "\uffb4\030\234\001\002\000\014\002\ufffd\005\ufffd\012\ufffd" +
    "\013\ufffd\016\ufffd\001\002\000\016\002\uffe8\005\uffe8\012" +
    "\uffe8\013\uffe8\016\uffe8\030\uffe8\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\273\000\022\002\016\004\011\007\014\010\022\014" +
    "\023\015\007\031\003\051\013\001\001\000\006\005\272" +
    "\032\271\001\001\000\024\002\124\003\264\004\011\007" +
    "\014\010\022\014\023\015\007\031\003\051\013\001\001" +
    "\000\022\010\064\013\260\014\062\015\007\017\044\022" +
    "\057\027\054\054\041\001\001\000\004\011\237\001\001" +
    "\000\002\001\001\000\022\010\064\013\235\014\062\015" +
    "\007\017\044\022\057\027\054\054\041\001\001\000\004" +
    "\030\232\001\001\000\004\011\223\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\010\064\013\204\014\062" +
    "\015\007\017\044\022\057\027\054\054\041\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\006\171\001\001" +
    "\000\024\002\124\003\167\004\011\007\014\010\022\014" +
    "\023\015\007\031\003\051\013\001\001\000\004\041\163" +
    "\001\001\000\012\016\032\022\034\052\033\053\035\001" +
    "\001\000\022\010\064\013\160\014\062\015\007\017\044" +
    "\022\057\027\054\054\041\001\001\000\002\001\001\000" +
    "\026\010\064\012\147\013\150\014\062\015\007\017\044" +
    "\022\057\027\054\037\146\054\041\001\001\000\002\001" +
    "\001\000\030\010\064\013\046\014\062\015\007\017\044" +
    "\022\057\023\063\024\037\027\054\046\040\054\041\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\025\143\047\142\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\020\113\001\001\000\004\026\077\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\010\064\013\107\014\062\015\007\017\044\022\057" +
    "\027\054\054\041\001\001\000\002\001\001\000\022\010" +
    "\064\013\065\014\062\015\007\017\044\022\057\027\054" +
    "\054\041\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\016\032\022\034\052\033\053\035\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\026\077\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\010\064\014" +
    "\062\015\007\017\044\022\057\054\106\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\026\077\001\001\000\002\001\001\000\022\010" +
    "\064\013\112\014\062\015\007\017\044\022\057\027\054" +
    "\054\041\001\001\000\004\026\077\001\001\000\002\001" +
    "\001\000\010\011\115\021\121\044\117\001\001\000\004" +
    "\045\133\001\001\000\004\042\127\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\002\124" +
    "\003\123\004\011\007\014\010\022\014\023\015\007\031" +
    "\003\051\013\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\042\131\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\010\064\013" +
    "\136\014\062\015\007\017\044\022\057\027\054\054\041" +
    "\001\001\000\004\026\077\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\010\064\013\046\014\062\015\007\017\044\022\057\024" +
    "\144\027\054\054\041\001\001\000\006\025\143\047\145" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\026\077\043\151\001\001\000\002\001\001" +
    "\000\022\010\064\013\153\014\062\015\007\017\044\022" +
    "\057\027\054\054\041\001\001\000\006\026\077\043\154" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\016" +
    "\157\022\034\001\001\000\002\001\001\000\004\026\077" +
    "\001\001\000\002\001\001\000\010\010\164\014\165\015" +
    "\007\001\001\000\002\001\001\000\004\041\166\001\001" +
    "\000\012\016\032\022\034\052\033\053\035\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\020\202\001\001\000\004\040\173\001\001\000\004\050" +
    "\200\001\001\000\002\001\001\000\004\040\176\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\026\077\001\001\000\024\002\124\003\206\004\011\007" +
    "\014\010\022\014\023\015\007\031\003\051\013\001\001" +
    "\000\004\033\207\001\001\000\004\034\216\001\001\000" +
    "\022\010\064\013\211\014\062\015\007\017\044\022\057" +
    "\027\054\054\041\001\001\000\004\026\077\001\001\000" +
    "\024\002\124\003\213\004\011\007\014\010\022\014\023" +
    "\015\007\031\003\051\013\001\001\000\004\033\214\001" +
    "\001\000\002\001\001\000\024\002\124\003\220\004\011" +
    "\007\014\010\022\014\023\015\007\031\003\051\013\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\010\064\012\222\013\150\014\062\015\007\017" +
    "\044\022\057\027\054\054\041\001\001\000\002\001\001" +
    "\000\004\036\227\001\001\000\002\001\001\000\004\020" +
    "\226\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\010\064\012\231\013\150\014\062\015\007\017\044\022" +
    "\057\027\054\054\041\001\001\000\002\001\001\000\020" +
    "\004\011\007\014\010\022\014\023\015\007\031\234\051" +
    "\013\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\026\077\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\042\127\001\001\000\022\010\064\013\242\014\062" +
    "\015\007\017\044\022\057\027\054\054\041\001\001\000" +
    "\004\026\077\001\001\000\022\010\064\013\244\014\062" +
    "\015\007\017\044\022\057\027\054\054\041\001\001\000" +
    "\006\026\077\035\246\001\001\000\022\010\064\013\252" +
    "\014\062\015\007\017\044\022\057\027\054\054\041\001" +
    "\001\000\002\001\001\000\024\002\124\003\250\004\011" +
    "\007\014\010\022\014\023\015\007\031\003\051\013\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\026\077" +
    "\001\001\000\024\010\064\012\254\013\150\014\062\015" +
    "\007\017\044\022\057\027\054\054\041\001\001\000\002" +
    "\001\001\000\024\002\124\003\256\004\011\007\014\010" +
    "\022\014\023\015\007\031\003\051\013\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\026\077\001\001\000" +
    "\024\002\124\003\262\004\011\007\014\010\022\014\023" +
    "\015\007\031\003\051\013\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\010\064\013\266" +
    "\014\062\015\007\017\044\022\057\027\054\054\041\001" +
    "\001\000\004\026\077\001\001\000\026\010\064\012\147" +
    "\013\150\014\062\015\007\017\044\022\057\027\054\037" +
    "\274\054\041\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\030\273\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$LuaParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$LuaParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$LuaParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    // Funções chamadas em erros ///////////////////////////////////////////////////////////////////////////
    public void syntax_error(Symbol s){ 
        System.out.println("\nOcorreu um erro na linha " + (s.right) +", coluna "+s.left+ ". Identificador "
        +s.value + " não reconhecido." );
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        System.out.println("\nOcorreu um erro na linha " + (s.right)+ ", coluna "+s.left+". Identificador " +
        s.value + " não reconhecido.");
    }
    
    public static void main(String[] args){
        try {
            LuaParser parser = new LuaParser(new LuaLexer(new FileReader(args[0])));
            Object result = parser.parse().value;
            System.out.println("*** Resultados finais ***");
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$LuaParser$actions {
  private final LuaParser parser;

  /** Constructor */
  CUP$LuaParser$actions(LuaParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$LuaParser$do_action(
    int                        CUP$LuaParser$act_num,
    java_cup.runtime.lr_parser CUP$LuaParser$parser,
    java.util.Stack            CUP$LuaParser$stack,
    int                        CUP$LuaParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$LuaParser$result;

      /* select the action based on the action number */
      switch (CUP$LuaParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // prefixexp ::= OPEN_PARENTHESES exp CLOSE_PARENTHESES 
            {
              Object RESULT =null;

              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("prefixexp",10, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-2)), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // prefixexp ::= functioncall 
            {
              Object RESULT =null;

              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("prefixexp",10, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // prefixexp ::= var 
            {
              Object RESULT =null;

              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("prefixexp",10, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // funcbody ::= OPEN_PARENTHESES parlisttemp CLOSE_PARENTHESES block END 
            {
              Object RESULT =null;

              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("funcbody",14, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-4)), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // exptemp ::= tableconstructor 
            {
              Object RESULT =null;

              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("exptemp",42, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // exptemp ::= prefixexp 
            {
              Object RESULT =null;

              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("exptemp",42, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // exptemp ::= function 
            {
              Object RESULT =null;

              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("exptemp",42, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // exptemp ::= ELLIPSIS 
            {
              Object RESULT =null;

              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("exptemp",42, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // exptemp ::= STRING 
            {
              Object RESULT =null;

              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("exptemp",42, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // exptemp ::= NUMBER 
            {
              Object RESULT =null;

              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("exptemp",42, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // exptemp ::= TRUE 
            {
              Object RESULT =null;

              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("exptemp",42, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // exptemp ::= FALSE 
            {
              Object RESULT =null;

              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("exptemp",42, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // exptemp ::= NIL 
            {
              Object RESULT =null;

              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("exptemp",42, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // exp ::= exptemp 
            {
              Object RESULT =null;

              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("exp",9, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // exp ::= unop exp 
            {
              Object RESULT =null;

              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("exp",9, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-1)), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // exp ::= exp binop exptemp 
            {
              Object RESULT =null;

              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("exp",9, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-2)), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // args ::= STRING 
            {
              Object RESULT =null;

              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("args",12, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // args ::= tableconstructor 
            {
              Object RESULT =null;

              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("args",12, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // args ::= OPEN_PARENTHESES explisttemp CLOSE_PARENTHESES 
            {
              Object RESULT =null;

              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("args",12, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-2)), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // commaexptemp ::= 
            {
              Object RESULT =null;

              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("commaexptemp",27, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // commaexptemp ::= COMMA exp 
            {
              Object RESULT =null;

              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("commaexptemp",27, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-1)), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // commavartemp ::= 
            {
              Object RESULT =null;

              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("commavartemp",31, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // commavartemp ::= COMMA var commavartemp 
            {
              Object RESULT =null;

              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("commavartemp",31, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-2)), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // commaidentifiertemp ::= 
            {
              Object RESULT =null;

              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("commaidentifiertemp",32, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // commaidentifiertemp ::= COMMA IDENTIFIER commaidentifiertemp 
            {
              Object RESULT =null;

              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("commaidentifiertemp",32, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-2)), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // expcommatemp ::= 
            {
              Object RESULT =null;

              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("expcommatemp",33, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // expcommatemp ::= COMMA exp expcommatemp 
            {
              Object RESULT =null;

              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("expcommatemp",33, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-2)), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // commaellipsistemp ::= 
            {
              Object RESULT =null;

              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("commaellipsistemp",35, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // commaellipsistemp ::= COMMA ELLIPSIS 
            {
              Object RESULT =null;

              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("commaellipsistemp",35, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-1)), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // fieldsep ::= SEMICOLON 
            {
              Object RESULT =null;

              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("fieldsep",19, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // fieldsep ::= COMMA 
            {
              Object RESULT =null;

              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("fieldsep",19, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // semicolontemp ::= 
            {
              Object RESULT =null;

              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("semicolontemp",22, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // semicolontemp ::= SEMICOLON 
            {
              Object RESULT =null;

              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("semicolontemp",22, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // unop ::= LENGTH 
            {
              Object RESULT =null;

              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("unop",21, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // unop ::= NOT 
            {
              Object RESULT =null;

              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("unop",21, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // unop ::= MINUS 
            {
              Object RESULT =null;

              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("unop",21, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // binop ::= OR 
            {
              Object RESULT =null;

              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("binop",20, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // binop ::= AND 
            {
              Object RESULT =null;

              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("binop",20, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // binop ::= DIFFERENT 
            {
              Object RESULT =null;

              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("binop",20, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // binop ::= EQUAL 
            {
              Object RESULT =null;

              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("binop",20, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // binop ::= GREATHER_THAN_EQUAL 
            {
              Object RESULT =null;

              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("binop",20, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // binop ::= GREATHER_THAN 
            {
              Object RESULT =null;

              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("binop",20, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // binop ::= LESS_THAN_EQUAL 
            {
              Object RESULT =null;

              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("binop",20, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // binop ::= LESS_THAN 
            {
              Object RESULT =null;

              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("binop",20, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // binop ::= TWO_PERIOD 
            {
              Object RESULT =null;

              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("binop",20, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // binop ::= PERCENT 
            {
              Object RESULT =null;

              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("binop",20, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // binop ::= UP_CARET 
            {
              Object RESULT =null;

              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("binop",20, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // binop ::= DIV 
            {
              Object RESULT =null;

              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("binop",20, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // binop ::= TIMES 
            {
              Object RESULT =null;

              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("binop",20, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // binop ::= MINUS 
            {
              Object RESULT =null;

              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("binop",20, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // binop ::= PLUS 
            {
              Object RESULT =null;

              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("binop",20, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // field ::= 
            {
              Object RESULT =null;

              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("field",18, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // field ::= exp 
            {
              Object RESULT =null;

              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("field",18, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // field ::= IDENTIFIER SIGN exp 
            {
              Object RESULT =null;

              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("field",18, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-2)), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // field ::= OPEN_BRACKETS exp CLOSE_BRACKETS SIGN exp 
            {
              Object RESULT =null;

              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("field",18, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-4)), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // fieldsepfieldtemp ::= 
            {
              Object RESULT =null;

              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("fieldsepfieldtemp",37, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // fieldsepfieldtemp ::= fieldsep field fieldsepfieldtemp 
            {
              Object RESULT =null;

              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("fieldsepfieldtemp",37, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-2)), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // fieldlist ::= field fieldsepfieldtemp 
            {
              Object RESULT =null;

              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("fieldlist",17, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-1)), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // fieldlisttemp ::= fieldlist 
            {
              Object RESULT =null;

              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("fieldlisttemp",36, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // tableconstructor ::= OPEN_BRACES fieldlisttemp CLOSE_BRACES 
            {
              Object RESULT =null;

              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("tableconstructor",16, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-2)), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // parlist ::= ELLIPSIS 
            {
              Object RESULT =null;

              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("parlist",15, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // parlist ::= namelist commaellipsistemp 
            {
              Object RESULT =null;

              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("parlist",15, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-1)), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // parlisttemp ::= 
            {
              Object RESULT =null;

              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("parlisttemp",34, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // parlisttemp ::= parlist 
            {
              Object RESULT =null;

              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("parlisttemp",34, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // function ::= FUNCTION funcbody 
            {
              Object RESULT =null;

              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("function",13, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-1)), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // functioncalltemp ::= args 
            {
              Object RESULT =null;

              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("functioncalltemp",40, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // functioncalltemp ::= COLON IDENTIFIER args 
            {
              Object RESULT =null;

              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("functioncalltemp",40, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-2)), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // functioncall ::= prefixexp functioncalltemp 
            {
              Object RESULT =null;
		 System.out.println("THAIS"); 
              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("functioncall",11, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-1)), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // explist ::= exp expcommatemp 
            {
              Object RESULT =null;

              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("explist",8, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-1)), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // namelist ::= IDENTIFIER commaidentifiertemp 
            {
              Object RESULT =null;

              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("namelist",7, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-1)), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // vartemp ::= OPEN_BRACKETS exp CLOSE_BRACKETS 
            {
              Object RESULT =null;

              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("vartemp",41, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-2)), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // vartemp ::= PERIOD IDENTIFIER 
            {
              Object RESULT =null;

              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("vartemp",41, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-1)), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // var ::= prefixexp vartemp 
            {
              Object RESULT =null;

              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("var",6, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-1)), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // var ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("var",6, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // varlist ::= var commavartemp 
            {
              Object RESULT =null;

              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("varlist",5, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-1)), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // twoperiodidentifertemp ::= 
            {
              Object RESULT =null;

              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("twoperiodidentifertemp",38, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // twoperiodidentifertemp ::= TWO_PERIOD IDENTIFIER 
            {
              Object RESULT =null;

              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("twoperiodidentifertemp",38, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-1)), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // periodidentifiertemp ::= 
            {
              Object RESULT =null;

              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("periodidentifiertemp",30, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // periodidentifiertemp ::= PERIOD IDENTIFIER periodidentifiertemp 
            {
              Object RESULT =null;

              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("periodidentifiertemp",30, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-2)), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // funcname ::= IDENTIFIER periodidentifiertemp twoperiodidentifertemp 
            {
              Object RESULT =null;

              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("funcname",4, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-2)), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // explisttemp ::= 
            {
              Object RESULT =null;

              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("explisttemp",29, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // explisttemp ::= explist 
            {
              Object RESULT =null;

              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("explisttemp",29, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // laststat ::= BREAK 
            {
              Object RESULT =null;

              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("laststat",3, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // laststat ::= RETURN explisttemp 
            {
              Object RESULT =null;

              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("laststat",3, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-1)), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // signexplisttemp ::= 
            {
              Object RESULT =null;

              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("signexplisttemp",28, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // signexplisttemp ::= SIGN explist 
            {
              Object RESULT =null;

              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("signexplisttemp",28, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-1)), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // elsetemp ::= 
            {
              Object RESULT =null;

              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("elsetemp",26, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // elsetemp ::= ELSE block 
            {
              Object RESULT =null;

              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("elsetemp",26, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-1)), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // elseiftemp ::= 
            {
              Object RESULT =null;

              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("elseiftemp",25, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // elseiftemp ::= ELSEIF exp THEN block elseiftemp 
            {
              Object RESULT =null;

              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("elseiftemp",25, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-4)), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ifstatment ::= IF exp THEN block elseiftemp elsetemp END 
            {
              Object RESULT =null;

              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("ifstatment",39, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-6)), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // stat ::= LOCAL namelist signexplisttemp 
            {
              Object RESULT =null;

              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("stat",2, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-2)), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // stat ::= LOCAL FUNCTION IDENTIFIER funcbody 
            {
              Object RESULT =null;

              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("stat",2, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-3)), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // stat ::= FUNCTION funcname funcbody 
            {
              Object RESULT =null;

              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("stat",2, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-2)), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // stat ::= FOR namelist IN explist DO block END 
            {
              Object RESULT =null;

              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("stat",2, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-6)), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // stat ::= FOR IDENTIFIER SIGN exp COMMA exp commaexptemp DO block END 
            {
              Object RESULT =null;

              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("stat",2, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-9)), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // stat ::= ifstatment 
            {
              Object RESULT =null;

              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("stat",2, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // stat ::= REPEAT block UNTIL exp 
            {
              Object RESULT =null;

              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("stat",2, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-3)), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // stat ::= WHILE exp DO block END 
            {
              Object RESULT =null;

              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("stat",2, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-4)), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // stat ::= DO block END 
            {
              Object RESULT =null;

              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("stat",2, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-2)), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // stat ::= prefixexp 
            {
              Object RESULT =null;

              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("stat",2, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // stat ::= varlist SIGN explist 
            {
              Object RESULT =null;

              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("stat",2, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-2)), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // block ::= chuck 
            {
              Object RESULT =null;

              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("block",1, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // laststattemp ::= 
            {
              Object RESULT =null;

              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("laststattemp",24, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // laststattemp ::= laststat semicolontemp 
            {
              Object RESULT =null;

              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("laststattemp",24, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-1)), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // tempchuck ::= 
            {
              Object RESULT =null;

              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("tempchuck",23, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // tempchuck ::= stat semicolontemp tempchuck 
            {
              Object RESULT =null;

              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("tempchuck",23, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-2)), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // chuck ::= tempchuck laststattemp 
            {
              Object RESULT =null;
		 System.out.println("BINIS"); 
              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("chuck",0, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-1)), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          return CUP$LuaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= chuck EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-1)).value;
		RESULT = start_val;
              CUP$LuaParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$LuaParser$stack.elementAt(CUP$LuaParser$top-1)), ((java_cup.runtime.Symbol)CUP$LuaParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$LuaParser$parser.done_parsing();
          return CUP$LuaParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

